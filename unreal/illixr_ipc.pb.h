// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: illixr_ipc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_illixr_5fipc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_illixr_5fipc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_illixr_5fipc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_illixr_5fipc_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_illixr_5fipc_2eproto;
namespace ILLIXRIPC {
class IPCPayload;
struct IPCPayloadDefaultTypeInternal;
extern IPCPayloadDefaultTypeInternal _IPCPayload_default_instance_;
class Mesh;
struct MeshDefaultTypeInternal;
extern MeshDefaultTypeInternal _Mesh_default_instance_;
class Vector3;
struct Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
}  // namespace ILLIXRIPC
PROTOBUF_NAMESPACE_OPEN
template<> ::ILLIXRIPC::IPCPayload* Arena::CreateMaybeMessage<::ILLIXRIPC::IPCPayload>(Arena*);
template<> ::ILLIXRIPC::Mesh* Arena::CreateMaybeMessage<::ILLIXRIPC::Mesh>(Arena*);
template<> ::ILLIXRIPC::Vector3* Arena::CreateMaybeMessage<::ILLIXRIPC::Vector3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ILLIXRIPC {

// ===================================================================

class Vector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ILLIXRIPC.Vector3) */ {
 public:
  inline Vector3() : Vector3(nullptr) {}
  ~Vector3() override;
  explicit PROTOBUF_CONSTEXPR Vector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector3& from) {
    Vector3::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ILLIXRIPC.Vector3";
  }
  protected:
  explicit Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:ILLIXRIPC.Vector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_illixr_5fipc_2eproto;
};
// -------------------------------------------------------------------

class Mesh final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ILLIXRIPC.Mesh) */ {
 public:
  inline Mesh() : Mesh(nullptr) {}
  ~Mesh() override;
  explicit PROTOBUF_CONSTEXPR Mesh(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mesh(const Mesh& from);
  Mesh(Mesh&& from) noexcept
    : Mesh() {
    *this = ::std::move(from);
  }

  inline Mesh& operator=(const Mesh& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mesh& operator=(Mesh&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mesh& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mesh* internal_default_instance() {
    return reinterpret_cast<const Mesh*>(
               &_Mesh_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Mesh& a, Mesh& b) {
    a.Swap(&b);
  }
  inline void Swap(Mesh* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mesh* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mesh* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mesh>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Mesh& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Mesh& from) {
    Mesh::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mesh* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ILLIXRIPC.Mesh";
  }
  protected:
  explicit Mesh(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
    kFacesFieldNumber = 2,
    kNormalsFieldNumber = 3,
  };
  // repeated .ILLIXRIPC.Vector3 vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  ::ILLIXRIPC::Vector3* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ILLIXRIPC::Vector3 >*
      mutable_vertices();
  private:
  const ::ILLIXRIPC::Vector3& _internal_vertices(int index) const;
  ::ILLIXRIPC::Vector3* _internal_add_vertices();
  public:
  const ::ILLIXRIPC::Vector3& vertices(int index) const;
  ::ILLIXRIPC::Vector3* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ILLIXRIPC::Vector3 >&
      vertices() const;

  // repeated int32 faces = 2;
  int faces_size() const;
  private:
  int _internal_faces_size() const;
  public:
  void clear_faces();
  private:
  int32_t _internal_faces(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_faces() const;
  void _internal_add_faces(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_faces();
  public:
  int32_t faces(int index) const;
  void set_faces(int index, int32_t value);
  void add_faces(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      faces() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_faces();

  // repeated .ILLIXRIPC.Vector3 normals = 3;
  int normals_size() const;
  private:
  int _internal_normals_size() const;
  public:
  void clear_normals();
  ::ILLIXRIPC::Vector3* mutable_normals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ILLIXRIPC::Vector3 >*
      mutable_normals();
  private:
  const ::ILLIXRIPC::Vector3& _internal_normals(int index) const;
  ::ILLIXRIPC::Vector3* _internal_add_normals();
  public:
  const ::ILLIXRIPC::Vector3& normals(int index) const;
  ::ILLIXRIPC::Vector3* add_normals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ILLIXRIPC::Vector3 >&
      normals() const;

  // @@protoc_insertion_point(class_scope:ILLIXRIPC.Mesh)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ILLIXRIPC::Vector3 > vertices_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > faces_;
    mutable std::atomic<int> _faces_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ILLIXRIPC::Vector3 > normals_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_illixr_5fipc_2eproto;
};
// -------------------------------------------------------------------

class IPCPayload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ILLIXRIPC.IPCPayload) */ {
 public:
  inline IPCPayload() : IPCPayload(nullptr) {}
  ~IPCPayload() override;
  explicit PROTOBUF_CONSTEXPR IPCPayload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IPCPayload(const IPCPayload& from);
  IPCPayload(IPCPayload&& from) noexcept
    : IPCPayload() {
    *this = ::std::move(from);
  }

  inline IPCPayload& operator=(const IPCPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPCPayload& operator=(IPCPayload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IPCPayload& default_instance() {
    return *internal_default_instance();
  }
  static inline const IPCPayload* internal_default_instance() {
    return reinterpret_cast<const IPCPayload*>(
               &_IPCPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IPCPayload& a, IPCPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(IPCPayload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IPCPayload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IPCPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IPCPayload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IPCPayload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IPCPayload& from) {
    IPCPayload::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPCPayload* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ILLIXRIPC.IPCPayload";
  }
  protected:
  explicit IPCPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeshesFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .ILLIXRIPC.Mesh meshes = 2;
  int meshes_size() const;
  private:
  int _internal_meshes_size() const;
  public:
  void clear_meshes();
  ::ILLIXRIPC::Mesh* mutable_meshes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ILLIXRIPC::Mesh >*
      mutable_meshes();
  private:
  const ::ILLIXRIPC::Mesh& _internal_meshes(int index) const;
  ::ILLIXRIPC::Mesh* _internal_add_meshes();
  public:
  const ::ILLIXRIPC::Mesh& meshes(int index) const;
  ::ILLIXRIPC::Mesh* add_meshes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ILLIXRIPC::Mesh >&
      meshes() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ILLIXRIPC.IPCPayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ILLIXRIPC::Mesh > meshes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_illixr_5fipc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector3

// float x = 1;
inline void Vector3::clear_x() {
  _impl_.x_ = 0;
}
inline float Vector3::_internal_x() const {
  return _impl_.x_;
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:ILLIXRIPC.Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Vector3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ILLIXRIPC.Vector3.x)
}

// float y = 2;
inline void Vector3::clear_y() {
  _impl_.y_ = 0;
}
inline float Vector3::_internal_y() const {
  return _impl_.y_;
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:ILLIXRIPC.Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Vector3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ILLIXRIPC.Vector3.y)
}

// float z = 3;
inline void Vector3::clear_z() {
  _impl_.z_ = 0;
}
inline float Vector3::_internal_z() const {
  return _impl_.z_;
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:ILLIXRIPC.Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Vector3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:ILLIXRIPC.Vector3.z)
}

// -------------------------------------------------------------------

// Mesh

// repeated .ILLIXRIPC.Vector3 vertices = 1;
inline int Mesh::_internal_vertices_size() const {
  return _impl_.vertices_.size();
}
inline int Mesh::vertices_size() const {
  return _internal_vertices_size();
}
inline void Mesh::clear_vertices() {
  _impl_.vertices_.Clear();
}
inline ::ILLIXRIPC::Vector3* Mesh::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:ILLIXRIPC.Mesh.vertices)
  return _impl_.vertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ILLIXRIPC::Vector3 >*
Mesh::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:ILLIXRIPC.Mesh.vertices)
  return &_impl_.vertices_;
}
inline const ::ILLIXRIPC::Vector3& Mesh::_internal_vertices(int index) const {
  return _impl_.vertices_.Get(index);
}
inline const ::ILLIXRIPC::Vector3& Mesh::vertices(int index) const {
  // @@protoc_insertion_point(field_get:ILLIXRIPC.Mesh.vertices)
  return _internal_vertices(index);
}
inline ::ILLIXRIPC::Vector3* Mesh::_internal_add_vertices() {
  return _impl_.vertices_.Add();
}
inline ::ILLIXRIPC::Vector3* Mesh::add_vertices() {
  ::ILLIXRIPC::Vector3* _add = _internal_add_vertices();
  // @@protoc_insertion_point(field_add:ILLIXRIPC.Mesh.vertices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ILLIXRIPC::Vector3 >&
Mesh::vertices() const {
  // @@protoc_insertion_point(field_list:ILLIXRIPC.Mesh.vertices)
  return _impl_.vertices_;
}

// repeated int32 faces = 2;
inline int Mesh::_internal_faces_size() const {
  return _impl_.faces_.size();
}
inline int Mesh::faces_size() const {
  return _internal_faces_size();
}
inline void Mesh::clear_faces() {
  _impl_.faces_.Clear();
}
inline int32_t Mesh::_internal_faces(int index) const {
  return _impl_.faces_.Get(index);
}
inline int32_t Mesh::faces(int index) const {
  // @@protoc_insertion_point(field_get:ILLIXRIPC.Mesh.faces)
  return _internal_faces(index);
}
inline void Mesh::set_faces(int index, int32_t value) {
  _impl_.faces_.Set(index, value);
  // @@protoc_insertion_point(field_set:ILLIXRIPC.Mesh.faces)
}
inline void Mesh::_internal_add_faces(int32_t value) {
  _impl_.faces_.Add(value);
}
inline void Mesh::add_faces(int32_t value) {
  _internal_add_faces(value);
  // @@protoc_insertion_point(field_add:ILLIXRIPC.Mesh.faces)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Mesh::_internal_faces() const {
  return _impl_.faces_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Mesh::faces() const {
  // @@protoc_insertion_point(field_list:ILLIXRIPC.Mesh.faces)
  return _internal_faces();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Mesh::_internal_mutable_faces() {
  return &_impl_.faces_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Mesh::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:ILLIXRIPC.Mesh.faces)
  return _internal_mutable_faces();
}

// repeated .ILLIXRIPC.Vector3 normals = 3;
inline int Mesh::_internal_normals_size() const {
  return _impl_.normals_.size();
}
inline int Mesh::normals_size() const {
  return _internal_normals_size();
}
inline void Mesh::clear_normals() {
  _impl_.normals_.Clear();
}
inline ::ILLIXRIPC::Vector3* Mesh::mutable_normals(int index) {
  // @@protoc_insertion_point(field_mutable:ILLIXRIPC.Mesh.normals)
  return _impl_.normals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ILLIXRIPC::Vector3 >*
Mesh::mutable_normals() {
  // @@protoc_insertion_point(field_mutable_list:ILLIXRIPC.Mesh.normals)
  return &_impl_.normals_;
}
inline const ::ILLIXRIPC::Vector3& Mesh::_internal_normals(int index) const {
  return _impl_.normals_.Get(index);
}
inline const ::ILLIXRIPC::Vector3& Mesh::normals(int index) const {
  // @@protoc_insertion_point(field_get:ILLIXRIPC.Mesh.normals)
  return _internal_normals(index);
}
inline ::ILLIXRIPC::Vector3* Mesh::_internal_add_normals() {
  return _impl_.normals_.Add();
}
inline ::ILLIXRIPC::Vector3* Mesh::add_normals() {
  ::ILLIXRIPC::Vector3* _add = _internal_add_normals();
  // @@protoc_insertion_point(field_add:ILLIXRIPC.Mesh.normals)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ILLIXRIPC::Vector3 >&
Mesh::normals() const {
  // @@protoc_insertion_point(field_list:ILLIXRIPC.Mesh.normals)
  return _impl_.normals_;
}

// -------------------------------------------------------------------

// IPCPayload

// string name = 1;
inline void IPCPayload::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& IPCPayload::name() const {
  // @@protoc_insertion_point(field_get:ILLIXRIPC.IPCPayload.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IPCPayload::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ILLIXRIPC.IPCPayload.name)
}
inline std::string* IPCPayload::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ILLIXRIPC.IPCPayload.name)
  return _s;
}
inline const std::string& IPCPayload::_internal_name() const {
  return _impl_.name_.Get();
}
inline void IPCPayload::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* IPCPayload::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* IPCPayload::release_name() {
  // @@protoc_insertion_point(field_release:ILLIXRIPC.IPCPayload.name)
  return _impl_.name_.Release();
}
inline void IPCPayload::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ILLIXRIPC.IPCPayload.name)
}

// repeated .ILLIXRIPC.Mesh meshes = 2;
inline int IPCPayload::_internal_meshes_size() const {
  return _impl_.meshes_.size();
}
inline int IPCPayload::meshes_size() const {
  return _internal_meshes_size();
}
inline void IPCPayload::clear_meshes() {
  _impl_.meshes_.Clear();
}
inline ::ILLIXRIPC::Mesh* IPCPayload::mutable_meshes(int index) {
  // @@protoc_insertion_point(field_mutable:ILLIXRIPC.IPCPayload.meshes)
  return _impl_.meshes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ILLIXRIPC::Mesh >*
IPCPayload::mutable_meshes() {
  // @@protoc_insertion_point(field_mutable_list:ILLIXRIPC.IPCPayload.meshes)
  return &_impl_.meshes_;
}
inline const ::ILLIXRIPC::Mesh& IPCPayload::_internal_meshes(int index) const {
  return _impl_.meshes_.Get(index);
}
inline const ::ILLIXRIPC::Mesh& IPCPayload::meshes(int index) const {
  // @@protoc_insertion_point(field_get:ILLIXRIPC.IPCPayload.meshes)
  return _internal_meshes(index);
}
inline ::ILLIXRIPC::Mesh* IPCPayload::_internal_add_meshes() {
  return _impl_.meshes_.Add();
}
inline ::ILLIXRIPC::Mesh* IPCPayload::add_meshes() {
  ::ILLIXRIPC::Mesh* _add = _internal_add_meshes();
  // @@protoc_insertion_point(field_add:ILLIXRIPC.IPCPayload.meshes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ILLIXRIPC::Mesh >&
IPCPayload::meshes() const {
  // @@protoc_insertion_point(field_list:ILLIXRIPC.IPCPayload.meshes)
  return _impl_.meshes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ILLIXRIPC

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_illixr_5fipc_2eproto
