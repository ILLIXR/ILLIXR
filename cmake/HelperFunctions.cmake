set(GPL_PLUGINS "openvins")
set(LGPL_PLUGINS "audio_pipeline")

macro(check_gpl varname)
    if(NO_GPL)
        set(REMOVE_LIST "${GPL_PLUGINS}")
        if(NO_LGPL)
            list(APPEND REMOVE_LIST "${LGPL_PLUGINS}")
        endif()
        foreach(RPL IN LISTS REMOVE_LIST)
            string(REPLACE "${RPL}" "" ${varname} "${${varname}}")
        endforeach()
        string(REPLACE ",," "," ${varname} "${${varname}}")
        string(REGEX REPLACE "^," "" ${varname} "${${varname}}")
        string(REGEX REPLACE ",$" "" ${varname} "${${varname}}")
    endif()
endmacro()

macro(disable_gpl)
    if(NO_GPL)
        set(DISABLE_LIST "${GPL_PLUGINS}")
        if(NO_LGPL)
            list(APPEND DISABLE_LIST "${LGPL_PLUGINS}")
        endif()
        foreach(DPL IN LISTS DISABLE_LIST)
            string(TOUPPER "USE_${DPL}" DPL_UPPER)
            set(${DPL_UPPER} OFF)
        endforeach()
    endif ()
endmacro()
# generate the profile yaml files from the master plugins.yaml
function(generate_yaml)
    if(NOT EXISTS "${PROJECT_SOURCE_DIR}/plugins/plugins.yaml")
        message(FATAL_ERROR "plugins/plugins.yaml file is missing")
    endif()

    file(TIMESTAMP "${PROJECT_SOURCE_DIR}/plugins/plugins.yaml" PROFILE_FILE_TIMESTAMP "%s" UTC)

    if(NOT FORCE_REGEN AND DEFINED CACHE{LAST_YAML_BUILD} AND DEFINED CACHE{PLUGIN_LIST})
        message("Using cached profile yaml files")
    else()
        set(LAST_YAML_BUILD "0" CACHE INTERNAL "")
    endif()

    if(FORCE_REGEN OR ($CACHE{LAST_YAML_BUILD} LESS ${PROFILE_FILE_TIMESTAMP}))
        message("Rebuilding profile yaml files")
        set(TEMP_MOD_PLUG "" CACHE INTERNAL "")
        set(PROFILE_NAMES "")
        set(ALL_BUILD_FLAGS "")

        file(STRINGS "${PROJECT_SOURCE_DIR}/plugins/plugins.yaml" YAML_LINES)
        set(IN_ENV_VARS NO)
        set(INDENT_LEVEL 0)
        set(STARTED_PROFILES NO)
        foreach(LINE_ITEM IN LISTS YAML_LINES)
            if(LINE_ITEM STREQUAL "")
                continue()
            elseif(LINE_ITEM MATCHES "^#")
                continue()
            endif()
            string(FIND "${LINE_ITEM}" "      " INDENT_COUNT)
            if(INDENT_COUNT EQUAL 0)
                set(INDENT_LEVEL 1)
            else()
                set(INDENT_LEVEL 0)
            endif()
            if(PROFILE_WRITING)
                string(FIND "${LINE_ITEM}" "  - " NEW_PROFILE)
                if(${NEW_PROFILE} EQUAL 0)
                    string(REGEX REPLACE "  - ([a-zA-Z][a-zA-Z0-9_]*):" "\\1" PROFILE_NAME ${LINE_ITEM})
                    if(STARTED_PROFILES)
                        file(APPEND ${OUTFILE} "env_vars:\n")
                        foreach(E_VAR IN LISTS ENV_VAR_NAMES)
                            set(EV_NAME "EV_${E_VAR}")
                            string(TOLOWER "${E_VAR}" E_VAR_LOWER)
                            file(APPEND ${OUTFILE} "  ${E_VAR_LOWER}: ${${EV_NAME}}\n")
                        endforeach()
                    else()
                        set(STARTED_PROFILES YES)
                    endif()
                    set(ENV_VAR_NAMES "ENABLE_OFFLOAD;ENABLE_ALIGNMENT;ENABLE_VERBOSE_ERRORS;ENABLE_PRE_SLEEP")
                    set(EV_ENABLE_OFFLOAD "false")
                    set(EV_ENABLE_ALIGNMENT "false")
                    set(EV_ENABLE_VERBOSE_ERRORS "false")
                    set(EV_ENABLE_PRE_SLEEP "false")

                    if(TEMP_MOD_PLUG)
                        set(TEMP_MOD_PLUG "${TEMP_MOD_PLUG}},\n")
                    endif()
                    list(APPEND PROFILE_NAMES ${PROFILE_NAME})
                    set(TEMP_MOD_PLUG "${TEMP_MOD_PLUG}    {\n      \"name\": \"${PROFILE_NAME}\"")
                    set(OUTFILE "${PROJECT_SOURCE_DIR}/profiles/${PROFILE_NAME}.yaml")
                    file(WRITE ${OUTFILE} "# This file was auto generated, take caution if manually editing.\n")
                    continue()
                endif()
            endif()
            string(REPLACE " " "" ITEM ${LINE_ITEM})
            string(REGEX REPLACE "^([^:]*):(.*)" "\\1;\\2" ITEM_LIST "${ITEM}")
            list(GET ITEM_LIST 0 ENTRY)
            if(IN_ENV_VARS)
                if(INDENT_LEVEL EQUAL 0)
                    set(IN_ENV_VARS NO)
                else()
                    list(GET ITEM_LIST 1 EV_VALUE)
                    string(TOUPPER ${ENTRY} ENTRY_UPPER)
                    list(FIND ENV_VAR_NAMES ${ENTRY_UPPER} VAR_FOUND)
                    if(${VAR_FOUND} LESS 0)
                        list(APPEND ENV_VAR_NAMES ${ENTRY_UPPER})
                    endif()
                    set(TEMP_NAME "EV_${ENTRY_UPPER}")
                    set(${TEMP_NAME} ${EV_VALUE})
                endif()
            endif()
            if(NOT IN_ENV_VARS AND INDENT_LEVEL EQUAL 0)
                if(ENTRY STREQUAL "all_plugins")
                    list(GET ITEM_LIST 1 PLUGIN_NAMES)
                    string(REPLACE "," ";" TEMP_PLUGIN_LIST "${PLUGIN_NAMES}")
                    set(PLUGIN_LIST ${TEMP_PLUGIN_LIST})
                    list(SORT PLUGIN_LIST)
                    set(PLUGIN_LIST ${PLUGIN_LIST} CACHE INTERNAL "" FORCE)
                elseif(ENTRY STREQUAL "build_flags")
                    if(NOT PROFILE_WRITING)
                        message(FATAL_ERROR "plugins/plugins.yaml has incorrect format")
                    endif()
                    list(GET ITEM_LIST 1 LOCAL_BUILD_FLAGS)
                    file(APPEND ${OUTFILE} "build_flags: ${LOCAL_BUILD_FLAGS}\n")
                    set(TEMP_MOD_PLUG "${TEMP_MOD_PLUG},\n    \"build_flags\": \"${LOCAL_BUILD_FLAGS}\"")
                    string(REPLACE "," ";" TEMP_BUILD_FLAGS "${LOCAL_BUILD_FLAGS}")
                    list(APPEND ALL_BUILD_FLAGS "${TEMP_BUILD_FLAGS}")
                elseif(ENTRY STREQUAL "profiles")
                    set(ALL_FILE "${PROJECT_SOURCE_DIR}/profiles/all.yaml")
                    file(WRITE ${ALL_FILE} "# This file was auto generated and is intended for debugging an entire build, take caution if editing manually.\n")
                    file(APPEND ${ALL_FILE} "plugins: ${PLUGIN_NAMES}\n")
                    file(APPEND ${ALL_FILE} "env_vars:\n")
                    file(APPEND ${ALL_FILE} "  enable_offload: false\n")
                    file(APPEND ${ALL_FILE} "  enable_alignment: false\n")
                    file(APPEND ${ALL_FILE} "  enable_verbose_errors: false\n")
                    file(APPEND ${ALL_FILE} "  enable_pre_sleep: false\n")
                    set(PROFILE_WRITING TRUE)
                elseif(KEY STREQUAL "install_prefix")
                    if(NOT PROFILE_WRITING)
                        message(FATAL_ERROR "plugins/plugins.yaml has incorrect format")
                    endif()
                    list(GET ITEM_LIST 1 PREFIX)
                    file(APPEND ${OUTFILE} "install_prefix: ${PREFIX}\n")
                elseif(ENTRY STREQUAL "plugins")
                    list(GET ITEM_LIST 1 PLUGIN_NAMES)
                    check_gpl(${PLUGIN_NAMES})
                    file(APPEND ${OUTFILE} "plugins: ${PLUGIN_NAMES}\n")
                    string(REPLACE "," "\", \"" MOD_PLUGS "${PLUGIN_NAMES}")
                    set(TEMP_MOD_PLUG "${TEMP_MOD_PLUG},\n      \"plugins\": [\"${MOD_PLUGS}\"]")
                elseif(ENTRY STREQUAL "run")
                    list(GET ITEM_LIST 1 PLUGIN_NAMES)
                    file(APPEND ${OUTFILE} "run: ${PLUGIN_NAMES}\n")
                elseif(ENTRY STREQUAL "build_type")
                    list(GET ITEM_LIST 1 BLD_TYPE)
                    file(APPEND ${OUTFILE} "build_type: ${BLD_TYPE}\n")
                elseif(ENTRY STREQUAL "env_vars")
                    set(IN_ENV_VARS YES)
                else()
                    message(WARNING "Unknown keyword: ${ENTRY}")
                endif(ENTRY STREQUAL "all_plugins")
            endif(NOT IN_ENV_VARS AND INDENT_LEVEL EQUAL 0)
        endforeach()
        file(APPEND ${OUTFILE} "env_vars:\n")
        foreach(E_VAR IN LISTS ENV_VAR_NAMES)
            set(EV_NAME "EV_${E_VAR}")
            string(TOLOWER "${E_VAR}" E_VAR_LOWER)
            file(APPEND ${OUTFILE} "  ${E_VAR_LOWER}: ${${EV_NAME}}\n")
        endforeach()
        set(TEMP_MOD_PLUG "${TEMP_MOD_PLUG}\n    }\n")
        string(REPLACE "\n" "||" MODULE_PLUGINS "${TEMP_MOD_PLUG}")
        set(MODULE_PLUGINS "${MODULE_PLUGINS}" CACHE INTERNAL "")
        string(TIMESTAMP CURRENT_TIME "%s" UTC)
        set(LAST_YAML_BUILD ${CURRENT_TIME} CACHE INTERNAL "")
        set(ILLIXR_PROFILE_NAMES ${PROFILE_NAMES} CACHE INTERNAL "")
        if (ALL_BUILD_FLAGS)
            list(REMOVE_DUPLICATES ALL_BUILD_FLAGS)
            string(REPLACE ";" "," OUT_BUILD_FLAGS "${ALL_BUILD_FLAGS}")
            file(APPEND ${ALL_FILE} "build_flags: ${OUT_BUILD_FLAGS}")
        endif()
    endif()
endfunction()

# read the provided yaml file for arguments/options
function(read_yaml FILENAME)
    # check that the file exists
    if(NOT EXISTS "${FILENAME}")
        FIND_FILE(FILEPATH ${FILENAME}
                  PATHS profiles ${CMAKE_SOURCE_DIR} $ENV{HOME} $ENV{HOME}/.illixr
                  PATH_SUFFIXES profiles
                  NO_CACHE
        )
        if(${FILEPATH} STREQUAL "FILEPATH-NOTFOUND")
            message(FATAL_ERROR "Could not find ${FILENAME} in any of the following paths:\n    profiles\n    ${CMAKE_SOURCE_DIR}\n    ${CMAKE_SOURCE_DIR}/profiles\n    $ENV{HOME}\n    $ENV{HOME}/profiles\n    $ENV{HOME}/.illixr\n    $ENV{HOME}/.illixr/profiles")
        endif()
        set(FILENAME ${FILEPATH})
        message(STATUS "Reading profile file ${FILENAME}")
    endif()

    set(EV_ENABLE_OFFLOAD "false" PARENT_SCOPE)
    set(EV_ENABLE_ALIGNMENT "false" PARENT_SCOPE)
    set(EV_ENABLE_VERBOSE_ERRORS "false" PARENT_SCOPE)
    set(EV_ENABLE_PRE_SLEEP "false" PARENT_SCOPE)
    file(STRINGS ${FILENAME} YAML_LINES)
    set(IN_ENV_VARS NO)
    set(ENV_VAR_NAMES "ENABLE_OFFLOAD;ENABLE_ALIGNMENT;ENABLE_VERBOSE_ERRORS;ENABLE_PRE_SLEEP")
    set(INDENT_LEVEL 0)
    foreach(LINE IN LISTS YAML_LINES)
        string(FIND ${LINE} "  " INDENT_COUNT)
        if(INDENT_COUNT EQUAL 0)
            set(INDENT_LEVEL 1)
        else()
            set(INDENT_LEVEL 0)
        endif()
        string(REPLACE " " "" ITEM ${LINE})
        string(REGEX REPLACE "^([^:]*):(.*)" "\\1;\\2" ITEM_LIST "${ITEM}")
        list(GET ITEM_LIST 0 KEY)
        if(IN_ENV_VARS)
            if(INDENT_LEVEL EQUAL 0)
                set(IN_ENV_VARS NO)
            else()
                list(GET ITEM_LIST 1 EV_VALUE)
                string(TOUPPER "${KEY}" KEY_UPPER)
                list(FIND ENV_VAR_NAMES ${KEY_UPPER} VAR_FOUND)
                if(${VAR_FOUND} LESS 0)
                    list(APPEND ENV_VAR_NAMES ${KEY_UPPER})
                endif()
                set(TEMP_NAME "EV_${KEY_UPPER}")
                set(${TEMP_NAME} ${EV_VALUE} PARENT_SCOPE)
            endif()
        endif()
        if(NOT IN_ENV_VARS AND INDENT_LEVEL EQUAL 0)
            if(KEY STREQUAL "plugins")
                list(GET ITEM_LIST 1 PLUGIN_NAMES)
                check_gpl("PLUGIN_NAMES")
                set(PLUGIN_UNORDERED "${PLUGIN_NAMES}" PARENT_SCOPE)
                string(REPLACE "," ";" TEMP_PLUGIN_LIST "${PLUGIN_NAMES}")
                foreach(PL IN LISTS TEMP_PLUGIN_LIST)
                    string(TOUPPER "USE_${PL}" PL_UPPER)
                    set(${PL_UPPER} ON PARENT_SCOPE)
                endforeach()
            elseif(KEY STREQUAL "build_flags")
                list(GET ITEM_LIST 1 TEMP_BUILD_FLAGS)
                string(REPLACE "," " " LOC_BUILD_FLAGS "${TEMP_BUILD_FLAGS}")
                set(LOCAL_BUILD_FLAGS ${LOC_BUILD_FLAGS} PARENT_SCOPE)
            elseif(KEY STREQUAL "data")
                list(SUBLIST ITEM_LIST 1 -1 TDATA_LIST)
                list(JOIN TDATA_LIST ":" DATA_FILE_ITEM)
                set(DATA_FILE ${DATA_FILE_ITEM} PARENT_SCOPE)
            elseif(KEY STREQUAL "build_type")
                if(CMAKE_BUILD_TYPE STREQUAL "")
                    list(GET ITEM_LIST 1 BLD_TYPE)
                    set(CMAKE_BUILD_TYPE ${BLD_TYPE} PARENT_SCOPE)
                endif()
            elseif(KEY STREQUAL "install_prefix")
                if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
                    list(GET ITEM_LIST 1 PREFIX)
                    set(CMAKE_INSTALL_PREFIX ${PREFIX} PARENT_SCOPE)
                endif()
            elseif(KEY STREQUAL "enable_offload")
                list(GET ITEM_LIST 1 VAL)
                message(DEPRECATION "This yaml file is using an older format, which will be deprecated in a future release. See the documentation on the new format.")
                set(EV_ENABLE_OFFLOAD ${VAL} PARENT_SCOPE)
            elseif(KEY STREQUAL "enable_alignment")
                list(GET ITEM_LIST 1 VAL)
                message(DEPRECATION "This yaml file is using an older format, which will be deprecated in a future release. See the documentation on the new format.")
                set(EV_ENABLE_ALIGNMENT ${VAL} PARENT_SCOPE)
            elseif(KEY STREQUAL "enable_verbose_errors")
                list(GET ITEM_LIST 1 VAL)
                message(DEPRECATION "This yaml file is using an older format, which will be deprecated in a future release. See the documentation on the new format.")
                set(EV_ENABLE_VERBOSE_ERRORS ${VAL} PARENT_SCOPE)
            elseif(KEY STREQUAL "enable_pre_sleep")
                list(GET ITEM_LIST 1 VAL)
                message(DEPRECATION "This yaml file is using an older format, which will be deprecated in a future release. See the documentation on the new format.")
                set(EV_ENABLE_PRE_SLEEP ${VAL} PARENT_SCOPE)
            elseif(KEY STREQUAL "env_vars")
                set(IN_ENV_VARS YES)
            endif()
        endif()
    endforeach()
    set(ENVIRONMENT_VARS ${ENV_VAR_NAMES} PARENT_SCOPE)
endfunction()

# function to make sure all of the plugins actually exist
function(check_plugins)
    foreach(ITEM IN LISTS PLUGIN_LIST)
        string(TOLOWER ${ITEM} PLUGIN)
        string(REPLACE "." "/" PLUGIN "${PLUGIN}")
        if(NOT EXISTS "${CMAKE_SOURCE_DIR}/plugins/${PLUGIN}")
            message(FATAL_ERROR "Plugin directory for ${PLUGIN} does not exist in ${CMAKE_SOURCE_DIR}/plugins")
        endif()
    endforeach()
endfunction()

# check for 3rd party dependencies that are not parts of OS repos
macro(get_external proj)
    list(FIND EXTERNAL_LIBRARIES "${proj}" EXTERNAL_INDEX)
    if(NOT ${proj}_EXTERNAL AND EXTERNAL_INDEX EQUAL -1)
        list(APPEND EXTERNAL_LIBRARIES "${proj}")
        set(${proj}_EXTERNAL No)
        set(${proj}_DEP_STR "")
        include(${CMAKE_SOURCE_DIR}/cmake/Get${proj}.cmake)
    endif()
endmacro()

# check for 3rd party dependencies that are not parts of OS repos, but from included plugins
macro(get_external_for_plugin proj)
    list(FIND EXTERNAL_LIBRARIES "${proj}" EXTERNAL_INDEX)
    if(NOT ${proj}_EXTERNAL AND EXTERNAL_INDEX EQUAL -1)
        list(APPEND EXTERNAL_LIBRARIES "${proj}")
        set(${proj}_EXTERNAL No PARENT_SCOPE)
        set(${proj}_DEP_STR "" PARENT_SCOPE)
        include(${CMAKE_SOURCE_DIR}/cmake/Get${proj}.cmake)
        set(EXTERNAL_LIBRARIES ${EXTERNAL_LIBRARIES} PARENT_SCOPE)
        set(${proj}_EXTERNAL ${${proj}_EXTERNAL} PARENT_SCOPE)
        set(${proj}_DEP_STR ${${proj}_DEP_STR} PARENT_SCOPE)
    endif()
endmacro()

macro(install_shaders SHADER_LIST PLUG LIB_NAME)
    foreach(ITEM IN LISTS ${SHADER_LIST})
        if(DO_DEBUG)
            set(LOC "Debug")
        else()
            set(LOC "Release")
        endif()
        set(INST_LOC "${CMAKE_INSTALL_PREFIX}/share/illixr/shaders/${PLUG}/${LOC}")
        install(FILES "${ITEM}"
                DESTINATION ${INST_LOC})
    endforeach()
    target_compile_definitions(${LIB_NAME} PUBLIC -DSHADER_FOLDER=\"${INST_LOC}\")
endmacro()

function(has_external)
    set(_singleargs LINE EXTERNAL_NAME)
    cmake_parse_arguments(HAS_EXTERNAL "" "${_singleargs}" "" ${ARGN})
    string(REGEX MATCH "^get_external\\(([a-zA-Z0-9_]*)\\)" MATCH_FOUND ${HAS_EXTERNAL_LINE})
    if (MATCH_FOUND)
        set(${HAS_EXTERNAL_EXTERNAL_NAME} ${CMAKE_MATCH_1} PARENT_SCOPE)
        return()
    endif()
    string(REGEX MATCH "^get_external_for_plugin\\(([a-zA-Z0-9_]*)\\)" MATCH_FOUND ${HAS_EXTERNAL_LINE})
    if (MATCH_FOUND)
        set(${HAS_EXTERNAL_EXTERNAL_NAME} ${CMAKE_MATCH_1} PARENT_SCOPE)
        return()
    endif()
    set(${HAS_EXTERNAL_EXTERNAL_NAME} "" PARENT_SCOPE)
    return()
endfunction()

function(check_for_external)
    set(_singleargs FILE_NAME EXT_TO_CHECK OUT_FLAGS)
    cmake_parse_arguments(CHECK_FOR_EXTERNAL "" "${_singleargs}" "" ${ARGN})
    file(SIZE "${CHECK_FOR_EXTERNAL_FILE_NAME}" F_SIZE)
    file(STRINGS "${CHECK_FOR_EXTERNAL_FILE_NAME}" FILE_LINES)
    set(FLAGS_FOUND ${${CHECK_FOR_EXTERNAL_OUT_FLAGS}})
    foreach(LINE_ITEM IN LISTS FILE_LINES)
        string(REPLACE ";" " " LINE_ITEM "${LINE_ITEM}")
        string(STRIP "${LINE_ITEM}" LINE_ITEM)
        if(LINE_ITEM STREQUAL "")
            continue()
        elseif(LINE_ITEM MATCHES "^#")
            continue()
        endif()
        set(ext_name)
        has_external(LINE ${LINE_ITEM}
                     EXTERNAL_NAME ext_name)
        if (ext_name)
            set(EXT_FOUND -1)
            foreach(S_FLAG IN LISTS CHECK_FOR_EXTERNAL_EXT_TO_CHECK)
                string(FIND ${ext_name} ${S_FLAG} EXT_FOUND)
                if (EXT_FOUND GREATER_EQUAL 0)
                    string(TOUPPER ${S_FLAG} UPPER_FLAG)
                    list(APPEND FLAGS_FOUND "ENABLE_${UPPER_FLAG}")
                endif()
            endforeach()
            if (EXT_FOUND LESS 0)
                set(FOUND_EXT_VARS)
                check_for_external(FILE_NAME "${CMAKE_SOURCE_DIR}/cmake/Get${ext_name}.cmake"
                                   EXT_TO_CHECK ${CHECK_FOR_EXTERNAL_EXT_TO_CHECK}
                                   OUT_FLAGS FOUND_EXT_VARS
                )
                if (${FOUND_EXT_VARS})
                    list(APPEND FLAGS_FOUND "${FOUND_EXT_VARS}")
                endif()
            endif()
        endif()
    endforeach()
    set(${CHECK_FOR_EXTERNAL_OUT_FLAGS} ${FLAGS_FOUND} PARENT_SCOPE)
endfunction()
