// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sr_input.proto

#include "sr_input.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_sr_5finput_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sr_5finput_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ImgData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sr_5finput_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Pose;
}  // namespace protobuf_sr_5finput_2eproto
namespace sr_input_proto {
class PoseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Pose>
      _instance;
} _Pose_default_instance_;
class ImgDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImgData>
      _instance;
} _ImgData_default_instance_;
class SRDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SRData>
      _instance;
} _SRData_default_instance_;
}  // namespace sr_input_proto
namespace protobuf_sr_5finput_2eproto {
static void InitDefaultsPose() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sr_input_proto::_Pose_default_instance_;
    new (ptr) ::sr_input_proto::Pose();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sr_input_proto::Pose::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Pose =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPose}, {}};

static void InitDefaultsImgData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sr_input_proto::_ImgData_default_instance_;
    new (ptr) ::sr_input_proto::ImgData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sr_input_proto::ImgData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ImgData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsImgData}, {}};

static void InitDefaultsSRData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sr_input_proto::_SRData_default_instance_;
    new (ptr) ::sr_input_proto::SRData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sr_input_proto::SRData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SRData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSRData}, {
      &protobuf_sr_5finput_2eproto::scc_info_Pose.base,
      &protobuf_sr_5finput_2eproto::scc_info_ImgData.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Pose.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ImgData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SRData.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sr_input_proto::Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sr_input_proto::Pose, p_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sr_input_proto::Pose, p_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sr_input_proto::Pose, p_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sr_input_proto::Pose, o_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sr_input_proto::Pose, o_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sr_input_proto::Pose, o_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sr_input_proto::Pose, o_w_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sr_input_proto::ImgData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sr_input_proto::ImgData, img_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sr_input_proto::ImgData, rows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sr_input_proto::ImgData, columns_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sr_input_proto::SRData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sr_input_proto::SRData, input_pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sr_input_proto::SRData, depth_img_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sr_input_proto::SRData, rgb_img_data_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sr_input_proto::Pose)},
  { 12, -1, sizeof(::sr_input_proto::ImgData)},
  { 20, -1, sizeof(::sr_input_proto::SRData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sr_input_proto::_Pose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sr_input_proto::_ImgData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sr_input_proto::_SRData_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "sr_input.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016sr_input.proto\022\016sr_input_proto\"a\n\004Pose"
      "\022\013\n\003p_x\030\001 \001(\001\022\013\n\003p_y\030\002 \001(\001\022\013\n\003p_z\030\003 \001(\001\022"
      "\013\n\003o_x\030\004 \001(\001\022\013\n\003o_y\030\005 \001(\001\022\013\n\003o_z\030\006 \001(\001\022\013"
      "\n\003o_w\030\007 \001(\001\":\n\007ImgData\022\020\n\010img_data\030\001 \001(\014"
      "\022\014\n\004rows\030\002 \001(\005\022\017\n\007columns\030\003 \001(\005\"\222\001\n\006SRDa"
      "ta\022(\n\ninput_pose\030\001 \001(\0132\024.sr_input_proto."
      "Pose\022/\n\016depth_img_data\030\002 \001(\0132\027.sr_input_"
      "proto.ImgData\022-\n\014rgb_img_data\030\003 \001(\0132\027.sr"
      "_input_proto.ImgDatab\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 348);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sr_input.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_sr_5finput_2eproto
namespace sr_input_proto {

// ===================================================================

void Pose::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pose::kPXFieldNumber;
const int Pose::kPYFieldNumber;
const int Pose::kPZFieldNumber;
const int Pose::kOXFieldNumber;
const int Pose::kOYFieldNumber;
const int Pose::kOZFieldNumber;
const int Pose::kOWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pose::Pose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sr_5finput_2eproto::scc_info_Pose.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sr_input_proto.Pose)
}
Pose::Pose(const Pose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&p_x_, &from.p_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&o_w_) -
    reinterpret_cast<char*>(&p_x_)) + sizeof(o_w_));
  // @@protoc_insertion_point(copy_constructor:sr_input_proto.Pose)
}

void Pose::SharedCtor() {
  ::memset(&p_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&o_w_) -
      reinterpret_cast<char*>(&p_x_)) + sizeof(o_w_));
}

Pose::~Pose() {
  // @@protoc_insertion_point(destructor:sr_input_proto.Pose)
  SharedDtor();
}

void Pose::SharedDtor() {
}

void Pose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Pose::descriptor() {
  ::protobuf_sr_5finput_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sr_5finput_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pose& Pose::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sr_5finput_2eproto::scc_info_Pose.base);
  return *internal_default_instance();
}


void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:sr_input_proto.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&p_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&o_w_) -
      reinterpret_cast<char*>(&p_x_)) + sizeof(o_w_));
  _internal_metadata_.Clear();
}

bool Pose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sr_input_proto.Pose)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double p_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &p_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double p_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &p_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double p_z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &p_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double o_x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &o_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double o_y = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &o_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double o_z = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &o_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double o_w = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &o_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sr_input_proto.Pose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sr_input_proto.Pose)
  return false;
#undef DO_
}

void Pose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sr_input_proto.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double p_x = 1;
  if (this->p_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->p_x(), output);
  }

  // double p_y = 2;
  if (this->p_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->p_y(), output);
  }

  // double p_z = 3;
  if (this->p_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->p_z(), output);
  }

  // double o_x = 4;
  if (this->o_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->o_x(), output);
  }

  // double o_y = 5;
  if (this->o_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->o_y(), output);
  }

  // double o_z = 6;
  if (this->o_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->o_z(), output);
  }

  // double o_w = 7;
  if (this->o_w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->o_w(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sr_input_proto.Pose)
}

::google::protobuf::uint8* Pose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sr_input_proto.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double p_x = 1;
  if (this->p_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->p_x(), target);
  }

  // double p_y = 2;
  if (this->p_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->p_y(), target);
  }

  // double p_z = 3;
  if (this->p_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->p_z(), target);
  }

  // double o_x = 4;
  if (this->o_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->o_x(), target);
  }

  // double o_y = 5;
  if (this->o_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->o_y(), target);
  }

  // double o_z = 6;
  if (this->o_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->o_z(), target);
  }

  // double o_w = 7;
  if (this->o_w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->o_w(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sr_input_proto.Pose)
  return target;
}

size_t Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sr_input_proto.Pose)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double p_x = 1;
  if (this->p_x() != 0) {
    total_size += 1 + 8;
  }

  // double p_y = 2;
  if (this->p_y() != 0) {
    total_size += 1 + 8;
  }

  // double p_z = 3;
  if (this->p_z() != 0) {
    total_size += 1 + 8;
  }

  // double o_x = 4;
  if (this->o_x() != 0) {
    total_size += 1 + 8;
  }

  // double o_y = 5;
  if (this->o_y() != 0) {
    total_size += 1 + 8;
  }

  // double o_z = 6;
  if (this->o_z() != 0) {
    total_size += 1 + 8;
  }

  // double o_w = 7;
  if (this->o_w() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sr_input_proto.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  const Pose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sr_input_proto.Pose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sr_input_proto.Pose)
    MergeFrom(*source);
  }
}

void Pose::MergeFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sr_input_proto.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.p_x() != 0) {
    set_p_x(from.p_x());
  }
  if (from.p_y() != 0) {
    set_p_y(from.p_y());
  }
  if (from.p_z() != 0) {
    set_p_z(from.p_z());
  }
  if (from.o_x() != 0) {
    set_o_x(from.o_x());
  }
  if (from.o_y() != 0) {
    set_o_y(from.o_y());
  }
  if (from.o_z() != 0) {
    set_o_z(from.o_z());
  }
  if (from.o_w() != 0) {
    set_o_w(from.o_w());
  }
}

void Pose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sr_input_proto.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sr_input_proto.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {
  return true;
}

void Pose::Swap(Pose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pose::InternalSwap(Pose* other) {
  using std::swap;
  swap(p_x_, other->p_x_);
  swap(p_y_, other->p_y_);
  swap(p_z_, other->p_z_);
  swap(o_x_, other->o_x_);
  swap(o_y_, other->o_y_);
  swap(o_z_, other->o_z_);
  swap(o_w_, other->o_w_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Pose::GetMetadata() const {
  protobuf_sr_5finput_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sr_5finput_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ImgData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImgData::kImgDataFieldNumber;
const int ImgData::kRowsFieldNumber;
const int ImgData::kColumnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImgData::ImgData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sr_5finput_2eproto::scc_info_ImgData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sr_input_proto.ImgData)
}
ImgData::ImgData(const ImgData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  img_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.img_data().size() > 0) {
    img_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.img_data_);
  }
  ::memcpy(&rows_, &from.rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&columns_) -
    reinterpret_cast<char*>(&rows_)) + sizeof(columns_));
  // @@protoc_insertion_point(copy_constructor:sr_input_proto.ImgData)
}

void ImgData::SharedCtor() {
  img_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&columns_) -
      reinterpret_cast<char*>(&rows_)) + sizeof(columns_));
}

ImgData::~ImgData() {
  // @@protoc_insertion_point(destructor:sr_input_proto.ImgData)
  SharedDtor();
}

void ImgData::SharedDtor() {
  img_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImgData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ImgData::descriptor() {
  ::protobuf_sr_5finput_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sr_5finput_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImgData& ImgData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sr_5finput_2eproto::scc_info_ImgData.base);
  return *internal_default_instance();
}


void ImgData::Clear() {
// @@protoc_insertion_point(message_clear_start:sr_input_proto.ImgData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  img_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&columns_) -
      reinterpret_cast<char*>(&rows_)) + sizeof(columns_));
  _internal_metadata_.Clear();
}

bool ImgData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sr_input_proto.ImgData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes img_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_img_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rows = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 columns = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &columns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sr_input_proto.ImgData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sr_input_proto.ImgData)
  return false;
#undef DO_
}

void ImgData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sr_input_proto.ImgData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes img_data = 1;
  if (this->img_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->img_data(), output);
  }

  // int32 rows = 2;
  if (this->rows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rows(), output);
  }

  // int32 columns = 3;
  if (this->columns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->columns(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sr_input_proto.ImgData)
}

::google::protobuf::uint8* ImgData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sr_input_proto.ImgData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes img_data = 1;
  if (this->img_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->img_data(), target);
  }

  // int32 rows = 2;
  if (this->rows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rows(), target);
  }

  // int32 columns = 3;
  if (this->columns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->columns(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sr_input_proto.ImgData)
  return target;
}

size_t ImgData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sr_input_proto.ImgData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes img_data = 1;
  if (this->img_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->img_data());
  }

  // int32 rows = 2;
  if (this->rows() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rows());
  }

  // int32 columns = 3;
  if (this->columns() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->columns());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImgData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sr_input_proto.ImgData)
  GOOGLE_DCHECK_NE(&from, this);
  const ImgData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImgData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sr_input_proto.ImgData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sr_input_proto.ImgData)
    MergeFrom(*source);
  }
}

void ImgData::MergeFrom(const ImgData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sr_input_proto.ImgData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.img_data().size() > 0) {

    img_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.img_data_);
  }
  if (from.rows() != 0) {
    set_rows(from.rows());
  }
  if (from.columns() != 0) {
    set_columns(from.columns());
  }
}

void ImgData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sr_input_proto.ImgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImgData::CopyFrom(const ImgData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sr_input_proto.ImgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImgData::IsInitialized() const {
  return true;
}

void ImgData::Swap(ImgData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImgData::InternalSwap(ImgData* other) {
  using std::swap;
  img_data_.Swap(&other->img_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rows_, other->rows_);
  swap(columns_, other->columns_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ImgData::GetMetadata() const {
  protobuf_sr_5finput_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sr_5finput_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SRData::InitAsDefaultInstance() {
  ::sr_input_proto::_SRData_default_instance_._instance.get_mutable()->input_pose_ = const_cast< ::sr_input_proto::Pose*>(
      ::sr_input_proto::Pose::internal_default_instance());
  ::sr_input_proto::_SRData_default_instance_._instance.get_mutable()->depth_img_data_ = const_cast< ::sr_input_proto::ImgData*>(
      ::sr_input_proto::ImgData::internal_default_instance());
  ::sr_input_proto::_SRData_default_instance_._instance.get_mutable()->rgb_img_data_ = const_cast< ::sr_input_proto::ImgData*>(
      ::sr_input_proto::ImgData::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SRData::kInputPoseFieldNumber;
const int SRData::kDepthImgDataFieldNumber;
const int SRData::kRgbImgDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SRData::SRData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sr_5finput_2eproto::scc_info_SRData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sr_input_proto.SRData)
}
SRData::SRData(const SRData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_input_pose()) {
    input_pose_ = new ::sr_input_proto::Pose(*from.input_pose_);
  } else {
    input_pose_ = NULL;
  }
  if (from.has_depth_img_data()) {
    depth_img_data_ = new ::sr_input_proto::ImgData(*from.depth_img_data_);
  } else {
    depth_img_data_ = NULL;
  }
  if (from.has_rgb_img_data()) {
    rgb_img_data_ = new ::sr_input_proto::ImgData(*from.rgb_img_data_);
  } else {
    rgb_img_data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sr_input_proto.SRData)
}

void SRData::SharedCtor() {
  ::memset(&input_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rgb_img_data_) -
      reinterpret_cast<char*>(&input_pose_)) + sizeof(rgb_img_data_));
}

SRData::~SRData() {
  // @@protoc_insertion_point(destructor:sr_input_proto.SRData)
  SharedDtor();
}

void SRData::SharedDtor() {
  if (this != internal_default_instance()) delete input_pose_;
  if (this != internal_default_instance()) delete depth_img_data_;
  if (this != internal_default_instance()) delete rgb_img_data_;
}

void SRData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SRData::descriptor() {
  ::protobuf_sr_5finput_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sr_5finput_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SRData& SRData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sr_5finput_2eproto::scc_info_SRData.base);
  return *internal_default_instance();
}


void SRData::Clear() {
// @@protoc_insertion_point(message_clear_start:sr_input_proto.SRData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && input_pose_ != NULL) {
    delete input_pose_;
  }
  input_pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && depth_img_data_ != NULL) {
    delete depth_img_data_;
  }
  depth_img_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && rgb_img_data_ != NULL) {
    delete rgb_img_data_;
  }
  rgb_img_data_ = NULL;
  _internal_metadata_.Clear();
}

bool SRData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sr_input_proto.SRData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sr_input_proto.Pose input_pose = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_input_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sr_input_proto.ImgData depth_img_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_depth_img_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sr_input_proto.ImgData rgb_img_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rgb_img_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sr_input_proto.SRData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sr_input_proto.SRData)
  return false;
#undef DO_
}

void SRData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sr_input_proto.SRData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sr_input_proto.Pose input_pose = 1;
  if (this->has_input_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_input_pose(), output);
  }

  // .sr_input_proto.ImgData depth_img_data = 2;
  if (this->has_depth_img_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_depth_img_data(), output);
  }

  // .sr_input_proto.ImgData rgb_img_data = 3;
  if (this->has_rgb_img_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_rgb_img_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sr_input_proto.SRData)
}

::google::protobuf::uint8* SRData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sr_input_proto.SRData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sr_input_proto.Pose input_pose = 1;
  if (this->has_input_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_input_pose(), deterministic, target);
  }

  // .sr_input_proto.ImgData depth_img_data = 2;
  if (this->has_depth_img_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_depth_img_data(), deterministic, target);
  }

  // .sr_input_proto.ImgData rgb_img_data = 3;
  if (this->has_rgb_img_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_rgb_img_data(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sr_input_proto.SRData)
  return target;
}

size_t SRData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sr_input_proto.SRData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sr_input_proto.Pose input_pose = 1;
  if (this->has_input_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *input_pose_);
  }

  // .sr_input_proto.ImgData depth_img_data = 2;
  if (this->has_depth_img_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *depth_img_data_);
  }

  // .sr_input_proto.ImgData rgb_img_data = 3;
  if (this->has_rgb_img_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *rgb_img_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SRData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sr_input_proto.SRData)
  GOOGLE_DCHECK_NE(&from, this);
  const SRData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SRData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sr_input_proto.SRData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sr_input_proto.SRData)
    MergeFrom(*source);
  }
}

void SRData::MergeFrom(const SRData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sr_input_proto.SRData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_input_pose()) {
    mutable_input_pose()->::sr_input_proto::Pose::MergeFrom(from.input_pose());
  }
  if (from.has_depth_img_data()) {
    mutable_depth_img_data()->::sr_input_proto::ImgData::MergeFrom(from.depth_img_data());
  }
  if (from.has_rgb_img_data()) {
    mutable_rgb_img_data()->::sr_input_proto::ImgData::MergeFrom(from.rgb_img_data());
  }
}

void SRData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sr_input_proto.SRData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRData::CopyFrom(const SRData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sr_input_proto.SRData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRData::IsInitialized() const {
  return true;
}

void SRData::Swap(SRData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SRData::InternalSwap(SRData* other) {
  using std::swap;
  swap(input_pose_, other->input_pose_);
  swap(depth_img_data_, other->depth_img_data_);
  swap(rgb_img_data_, other->rgb_img_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SRData::GetMetadata() const {
  protobuf_sr_5finput_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sr_5finput_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sr_input_proto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sr_input_proto::Pose* Arena::CreateMaybeMessage< ::sr_input_proto::Pose >(Arena* arena) {
  return Arena::CreateInternal< ::sr_input_proto::Pose >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sr_input_proto::ImgData* Arena::CreateMaybeMessage< ::sr_input_proto::ImgData >(Arena* arena) {
  return Arena::CreateInternal< ::sr_input_proto::ImgData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sr_input_proto::SRData* Arena::CreateMaybeMessage< ::sr_input_proto::SRData >(Arena* arena) {
  return Arena::CreateInternal< ::sr_input_proto::SRData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
