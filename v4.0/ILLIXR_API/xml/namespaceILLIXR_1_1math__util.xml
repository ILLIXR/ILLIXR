<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceILLIXR_1_1math__util" kind="namespace" language="C++">
    <compoundname>ILLIXR::math_util</compoundname>
    <sectiondef kind="var">
      <memberdef kind="variable" id="math__util_8hpp_1a27974cd4e2e4dbfd433a2c8ed9883634" prot="public" static="no" mutable="no">
        <type>const Eigen::Matrix3f</type>
        <definition>const Eigen::Matrix3f ILLIXR::math_util::invert_x</definition>
        <argsstring></argsstring>
        <name>invert_x</name>
        <qualifiedname>ILLIXR::math_util::invert_x</qualifiedname>
        <initializer>= (Eigen::Matrix3f() &lt;&lt; -1., 0., 0., 0., 1., 0., 0., 0., 1.).finished()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/math_util.hpp" line="205" column="23" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/math_util.hpp" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="math__util_8hpp_1a10e730711467e0a5a8861b772481b486" prot="public" static="no" mutable="no">
        <type>const Eigen::Matrix3f</type>
        <definition>const Eigen::Matrix3f ILLIXR::math_util::invert_y</definition>
        <argsstring></argsstring>
        <name>invert_y</name>
        <qualifiedname>ILLIXR::math_util::invert_y</qualifiedname>
        <initializer>= (Eigen::Matrix3f() &lt;&lt; 1., 0., 0., 0., -1., 0., 0., 0., 1.).finished()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/math_util.hpp" line="206" column="23" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/math_util.hpp" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="math__util_8hpp_1aab45e172d1d21eb0e725b2cc4162adc0" prot="public" static="no" mutable="no">
        <type>const Eigen::Matrix3f</type>
        <definition>const Eigen::Matrix3f ILLIXR::math_util::invert_z</definition>
        <argsstring></argsstring>
        <name>invert_z</name>
        <qualifiedname>ILLIXR::math_util::invert_z</qualifiedname>
        <initializer>= (Eigen::Matrix3f() &lt;&lt; 1., 0., 0., 0., 1., 0., 0., 0., -1.).finished()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/math_util.hpp" line="207" column="23" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/math_util.hpp" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="math__util_8hpp_1a6221ac9c4714f934c56795d590909e2a" prot="public" static="no" mutable="no">
        <type>const Eigen::Matrix3f</type>
        <definition>const Eigen::Matrix3f ILLIXR::math_util::identity</definition>
        <argsstring></argsstring>
        <name>identity</name>
        <qualifiedname>ILLIXR::math_util::identity</qualifiedname>
        <initializer>= Eigen::Matrix3f::Identity()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/math_util.hpp" line="208" column="23" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/math_util.hpp" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="math__util_8hpp_1a30ff2444d82c1412122503a4cd305994" prot="public" static="no" mutable="no">
        <type>const Eigen::Matrix3f</type>
        <definition>const Eigen::Matrix3f ILLIXR::math_util::conversion[6][6]</definition>
        <argsstring>[6][6]</argsstring>
        <name>conversion</name>
        <qualifiedname>ILLIXR::math_util::conversion</qualifiedname>
        <initializer>= {
    {identity, invert_y, rotation(180., 0., 0.), rotation(-90., 0., 0.), rotation(-90., 0., 90.) * invert_z,
     rotation(-90., 0., -90.)}, 
    {invert_y, identity, invert_z, rotation(-90., 0., 0.) * invert_y, rotation(90., 0., 90.),
     rotation(-90., 0., -90.) * invert_y}, 
    {rotation(180., 0., 0.), invert_z, identity, rotation(90., 0., 0.), rotation(90., 0., 90.) * invert_z,
     rotation(-90., 0., 90.) * invert_x* invert_y}, 
    {rotation(90., 0., 0.), invert_y* rotation(90., 0., 0.), rotation(-90., 0., 0.), identity, rotation(0., 0., 90.) * invert_y,
     rotation(0., 0., -90.)}, 
    {rotation(90., -90., 0.) * invert_y, rotation(-90., -90., 0.), rotation(0., 90., 90.) * invert_y,
     invert_x* rotation(0, 0., 90), identity, invert_y}, 
    {rotation(90., -90., 0.), rotation(-90., -90., 0.) * invert_y, rotation(0., 90., 90.), rotation(0, 0., 90), invert_y,
     identity}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/math_util.hpp" line="212" column="23" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/math_util.hpp" bodystart="212" bodyend="224"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="math__util_8hpp_1afba4cb4b4ec10b8e2ab3e4994f15327f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ILLIXR::math_util::projection</definition>
        <argsstring>(Eigen::Matrix4f *result, const float tan_left, const float tan_right, const float tan_up, float const tan_down, const float near_z, const float far_z)</argsstring>
        <name>projection</name>
        <qualifiedname>ILLIXR::math_util::projection</qualifiedname>
        <param>
          <type>Eigen::Matrix4f *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>tan_left</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>tan_right</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>tan_up</declname>
        </param>
        <param>
          <type>float const</type>
          <declname>tan_down</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>near_z</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>far_z</declname>
        </param>
        <briefdescription>
<para>Calculates a projection matrix with the given tangent angles and clip planes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/math_util.hpp" line="13" column="6" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/math_util.hpp" bodystart="13" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="math__util_8hpp_1a4195ba083e17d7eec67b3cf7776f1d0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ILLIXR::math_util::projection_reverse_z</definition>
        <argsstring>(Eigen::Matrix4f *result, const float tan_left, const float tan_right, const float tan_up, float const tan_down, const float near_z, const float far_z)</argsstring>
        <name>projection_reverse_z</name>
        <qualifiedname>ILLIXR::math_util::projection_reverse_z</qualifiedname>
        <param>
          <type>Eigen::Matrix4f *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>tan_left</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>tan_right</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>tan_up</declname>
        </param>
        <param>
          <type>float const</type>
          <declname>tan_down</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>near_z</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>far_z</declname>
        </param>
        <briefdescription>
<para>Calculates a projection matrix with the given tangent angles and clip planes, with reversed depth. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/math_util.hpp" line="41" column="6" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/math_util.hpp" bodystart="41" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="math__util_8hpp_1aab12edcd6b054683a3b6aec4f49c1172" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ILLIXR::math_util::projection_fov</definition>
        <argsstring>(Eigen::Matrix4f *result, const float fov_left, const float fov_right, const float fov_up, const float fov_down, const float near_z, const float far_z, bool reverse_z=false)</argsstring>
        <name>projection_fov</name>
        <qualifiedname>ILLIXR::math_util::projection_fov</qualifiedname>
        <param>
          <type>Eigen::Matrix4f *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>fov_left</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>fov_right</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>fov_up</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>fov_down</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>near_z</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>far_z</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reverse_z</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Calculates a projection matrix with the given FoVs and clip planes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/math_util.hpp" line="69" column="6" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/math_util.hpp" bodystart="69" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="math__util_8hpp_1a3b000d110ba217507d69347b901c2f0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ILLIXR::math_util::unreal_projection</definition>
        <argsstring>(Eigen::Matrix4f *result, const float fov_left, const float fov_right, const float fov_up, const float fov_down)</argsstring>
        <name>unreal_projection</name>
        <qualifiedname>ILLIXR::math_util::unreal_projection</qualifiedname>
        <param>
          <type>Eigen::Matrix4f *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>fov_left</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>fov_right</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>fov_up</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>fov_down</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/math_util.hpp" line="85" column="6" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/math_util.hpp" bodystart="85" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="math__util_8hpp_1a87d3ced34105f8c9aa7c5863db1f3b14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ILLIXR::math_util::godot_projection</definition>
        <argsstring>(Eigen::Matrix4f *result, const float fov_left, const float fov_right, const float fov_up, const float fov_down)</argsstring>
        <name>godot_projection</name>
        <qualifiedname>ILLIXR::math_util::godot_projection</qualifiedname>
        <param>
          <type>Eigen::Matrix4f *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>fov_left</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>fov_right</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>fov_up</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>fov_down</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/math_util.hpp" line="122" column="7" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/math_util.hpp" bodystart="122" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="math__util_8hpp_1a4c2e7638e10632911c272342b6db1be5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::Matrix3f</type>
        <definition>Eigen::Matrix3f ILLIXR::math_util::rotation</definition>
        <argsstring>(const float alpha, const float beta, const float gamma)</argsstring>
        <name>rotation</name>
        <qualifiedname>ILLIXR::math_util::rotation</qualifiedname>
        <param>
          <type>const float</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>gamma</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/math_util.hpp" line="192" column="24" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/math_util.hpp" bodystart="192" bodyend="203"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/friedel/devel/ILLIXR/include/illixr/math_util.hpp" line="11" column="1"/>
  </compounddef>
</doxygen>
