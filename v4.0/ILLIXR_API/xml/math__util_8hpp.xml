<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="math__util_8hpp" kind="file" language="C++">
    <compoundname>math_util.hpp</compoundname>
    <includes refid="point_8hpp" local="yes">data_format/point.hpp</includes>
    <includes refid="pose_8hpp" local="yes">data_format/pose.hpp</includes>
    <includes local="no">cmath</includes>
    <includes local="no">eigen3/Eigen/Core</includes>
    <includedby refid="plugins_2debugview_2plugin_8cpp" local="yes">/home/friedel/devel/ILLIXR/plugins/debugview/plugin.cpp</includedby>
    <includedby refid="plugins_2gldemo_2plugin_8cpp" local="yes">/home/friedel/devel/ILLIXR/plugins/gldemo/plugin.cpp</includedby>
    <includedby refid="openwarp__vk_8cpp" local="yes">/home/friedel/devel/ILLIXR/plugins/openwarp_vk/openwarp_vk.cpp</includedby>
    <includedby refid="plugins_2timewarp__gl_2plugin_8cpp" local="yes">/home/friedel/devel/ILLIXR/plugins/timewarp_gl/plugin.cpp</includedby>
    <includedby refid="timewarp__vk_8cpp" local="yes">/home/friedel/devel/ILLIXR/plugins/timewarp_vk/timewarp_vk.cpp</includedby>
    <includedby refid="vkdemo_2service_8cpp" local="yes">/home/friedel/devel/ILLIXR/services/vkdemo/service.cpp</includedby>
    <incdepgraph>
      <node id="4">
        <label>illixr/data_format/coordinate.hpp</label>
        <link refid="coordinate_8hpp_source"/>
      </node>
      <node id="2">
        <label>data_format/point.hpp</label>
        <link refid="point_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>illixr/data_format/pose.hpp</label>
        <link refid="pose_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>illixr/data_format/template.hpp</label>
        <link refid="template_8hpp_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>illixr/data_format/unit.hpp</label>
        <link refid="unit_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>managed_thread.hpp</label>
        <link refid="managed__thread_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/friedel/devel/ILLIXR/include/illixr/math_util.hpp</label>
        <link refid="math__util_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>network/network_backend.hpp</label>
        <link refid="network__backend_8hpp_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>topic_config.hpp</label>
        <link refid="topic__config_8hpp_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>illixr/phonebook.hpp</label>
        <link refid="phonebook_8hpp_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>record_logger.hpp</label>
        <link refid="record__logger_8hpp_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>illixr/switchboard.hpp</label>
        <link refid="switchboard_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>any</label>
      </node>
      <node id="11">
        <label>atomic</label>
      </node>
      <node id="36">
        <label>boost/archive/binary_iarchive.hpp</label>
      </node>
      <node id="37">
        <label>boost/archive/binary_oarchive.hpp</label>
      </node>
      <node id="38">
        <label>boost/iostreams/device/back_inserter.hpp</label>
      </node>
      <node id="39">
        <label>boost/iostreams/stream.hpp</label>
      </node>
      <node id="40">
        <label>boost/serialization/shared_ptr.hpp</label>
      </node>
      <node id="12">
        <label>cassert</label>
      </node>
      <node id="27">
        <label>chrono</label>
      </node>
      <node id="43">
        <label>cmath</label>
      </node>
      <node id="9">
        <label>concurrentqueue/blockingconcurrentqueue.hpp</label>
      </node>
      <node id="33">
        <label>eigen3/Eigen/Core</label>
      </node>
      <node id="41">
        <label>eigen3/Eigen/Dense</label>
      </node>
      <node id="34">
        <label>eigen3/Eigen/Geometry</label>
      </node>
      <node id="13">
        <label>functional</label>
      </node>
      <node id="24">
        <label>iostream</label>
      </node>
      <node id="35">
        <label>list</label>
      </node>
      <node id="6">
        <label>map</label>
      </node>
      <node id="19">
        <label>memory</label>
      </node>
      <node id="20">
        <label>mutex</label>
      </node>
      <node id="28">
        <label>optional</label>
      </node>
      <node id="21">
        <label>shared_mutex</label>
      </node>
      <node id="25">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="32">
        <label>sstream</label>
      </node>
      <node id="14">
        <label>stdexcept</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="15">
        <label>thread</label>
      </node>
      <node id="22">
        <label>typeindex</label>
      </node>
      <node id="23">
        <label>unordered_map</label>
      </node>
      <node id="16">
        <label>utility</label>
      </node>
      <node id="29">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceILLIXR">ILLIXR</innernamespace>
    <innernamespace refid="namespaceILLIXR_1_1math__util">ILLIXR::math_util</innernamespace>
    <sectiondef kind="define">
      <memberdef kind="define" id="math__util_8hpp_1a525335710b53cb064ca56b936120431e" prot="public" static="no">
        <name>_USE_MATH_DEFINES</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/math_util.hpp" line="3" column="13" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/math_util.hpp" bodystart="3" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_USE_MATH_DEFINES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>_USE_MATH_DEFINES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;data_format/point.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;data_format/pose.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;eigen3/Eigen/Core&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">ILLIXR::math_util<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>projection(Eigen::Matrix4f*<sp/>result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tan_left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tan_right,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tan_up,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tan_down,</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>near_z,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>far_z)<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tan_width<sp/><sp/>=<sp/>tan_right<sp/>-<sp/>tan_left;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tan_height<sp/>=<sp/>tan_up<sp/>-<sp/>tan_down;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://www.scratchapixel.com/lessons/3d-basic-rendering/perspective-and-orthographic-projection-matrix/building-basic-perspective-projection-matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(0,<sp/>0)<sp/>=<sp/>2<sp/>/<sp/>tan_width;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(0,<sp/>1)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(0,<sp/>2)<sp/>=<sp/>(tan_right<sp/>+<sp/>tan_left)<sp/>/<sp/>tan_width;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(0,<sp/>3)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(1,<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(1,<sp/>1)<sp/>=<sp/>2<sp/>/<sp/>tan_height;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(1,<sp/>2)<sp/>=<sp/>(tan_up<sp/>+<sp/>tan_down)<sp/>/<sp/>tan_height;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(1,<sp/>3)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(2,<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(2,<sp/>1)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(2,<sp/>2)<sp/>=<sp/>-far_z<sp/>/<sp/>(far_z<sp/>-<sp/>near_z);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(2,<sp/>3)<sp/>=<sp/>-(far_z<sp/>*<sp/>near_z)<sp/>/<sp/>(far_z<sp/>-<sp/>near_z);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(3,<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(3,<sp/>1)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(3,<sp/>2)<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(3,<sp/>3)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>projection_reverse_z(Eigen::Matrix4f*<sp/>result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tan_left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tan_right,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tan_up,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tan_down,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>near_z,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>far_z)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tan_width<sp/><sp/>=<sp/>tan_right<sp/>-<sp/>tan_left;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tan_height<sp/>=<sp/>tan_up<sp/>-<sp/>tan_down;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://www.scratchapixel.com/lessons/3d-basic-rendering/perspective-and-orthographic-projection-matrix/building-basic-perspective-projection-matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(0,<sp/>0)<sp/>=<sp/>2<sp/>/<sp/>tan_width;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(0,<sp/>1)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(0,<sp/>2)<sp/>=<sp/>(tan_right<sp/>+<sp/>tan_left)<sp/>/<sp/>tan_width;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(0,<sp/>3)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(1,<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(1,<sp/>1)<sp/>=<sp/>2<sp/>/<sp/>tan_height;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(1,<sp/>2)<sp/>=<sp/>(tan_up<sp/>+<sp/>tan_down)<sp/>/<sp/>tan_height;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(1,<sp/>3)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(2,<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(2,<sp/>1)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(2,<sp/>2)<sp/>=<sp/>near_z<sp/>/<sp/>(far_z<sp/>-<sp/>near_z);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(2,<sp/>3)<sp/>=<sp/>(far_z<sp/>*<sp/>near_z)<sp/>/<sp/>(far_z<sp/>-<sp/>near_z);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(3,<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(3,<sp/>1)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(3,<sp/>2)<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(3,<sp/>3)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>projection_fov(Eigen::Matrix4f*<sp/>result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fov_left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fov_right,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fov_up,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fov_down,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>near_z,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>far_z,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reverse_z<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tan_left<sp/><sp/>=<sp/>-tanf(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fov_left<sp/>*<sp/>(M_PI<sp/>/<sp/>180.0f)));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tan_right<sp/>=<sp/>tanf(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fov_right<sp/>*<sp/>(M_PI<sp/>/<sp/>180.0f)));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tan_down<sp/>=<sp/>-tanf(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fov_down<sp/>*<sp/>(M_PI<sp/>/<sp/>180.0f)));</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tan_up<sp/><sp/><sp/>=<sp/>tanf(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fov_up<sp/>*<sp/>(M_PI<sp/>/<sp/>180.0f)));</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reverse_z)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>projection_reverse_z(result,<sp/>tan_left,<sp/>tan_right,<sp/>tan_up,<sp/>tan_down,<sp/>near_z,<sp/>far_z);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>projection(result,<sp/>tan_left,<sp/>tan_right,<sp/>tan_up,<sp/>tan_down,<sp/>near_z,<sp/>far_z);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Expects<sp/>FoVs<sp/>in<sp/>radians</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>unreal_projection(Eigen::Matrix4f*<sp/>result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fov_left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fov_right,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fov_up,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fov_down)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unreal<sp/>uses<sp/>a<sp/>far<sp/>plane<sp/>at<sp/>infinity<sp/>and<sp/>a<sp/>near<sp/>plane<sp/>of<sp/>10<sp/>centimeters<sp/>(0.1<sp/>meters)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>near_z<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle_left<sp/><sp/>=<sp/>tanf(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fov_left));</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle_right<sp/>=<sp/>tanf(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fov_right));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle_up<sp/><sp/><sp/><sp/>=<sp/>tanf(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fov_up));</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle_down<sp/><sp/>=<sp/>tanf(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fov_down));</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sum_rl<sp/>=<sp/>angle_left<sp/>+<sp/>angle_right;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sum_tb<sp/>=<sp/>angle_up<sp/>+<sp/>angle_down;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>inv_rl<sp/>=<sp/>1.0f<sp/>/<sp/>(angle_right<sp/>-<sp/>angle_left);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>inv_tb<sp/>=<sp/>1.0f<sp/>/<sp/>(angle_up<sp/>-<sp/>angle_down);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(0,<sp/>0)<sp/>=<sp/>2<sp/>*<sp/>inv_rl;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(0,<sp/>1)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(0,<sp/>2)<sp/>=<sp/>sum_rl<sp/>*<sp/>(-inv_rl);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(0,<sp/>3)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(1,<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(1,<sp/>1)<sp/>=<sp/>2<sp/>*<sp/>inv_tb;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(1,<sp/>2)<sp/>=<sp/>sum_tb<sp/>*<sp/>(-inv_tb);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(1,<sp/>3)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(2,<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(2,<sp/>1)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(2,<sp/>2)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(2,<sp/>3)<sp/>=<sp/>near_z;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(3,<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(3,<sp/>1)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(3,<sp/>2)<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)(3,<sp/>3)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>this<sp/>is<sp/>just<sp/>a<sp/>complicated<sp/>version<sp/>to<sp/>achieve<sp/>reverse<sp/>Z<sp/>with<sp/>a<sp/>finite<sp/>far<sp/>plane.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal">[[maybe_unused]]<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>godot_projection(Eigen::Matrix4f*<sp/>result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fov_left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fov_right,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fov_up,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fov_down)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Godot&apos;s<sp/>default<sp/>far<sp/>and<sp/>near<sp/>planes<sp/>are<sp/>4000m<sp/>and<sp/>0.05m<sp/>respectively.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://github.com/godotengine/godot/blob/e96ad5af98547df71b50c4c4695ac348638113e0/modules/openxr/openxr_util.cpp#L97</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>Vulkan<sp/>implementation<sp/>passes<sp/>in<sp/>GRAPHICS_OPENGL<sp/>for<sp/>some<sp/>reason.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>near_z<sp/><sp/><sp/>=<sp/>0.05;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>far_z<sp/><sp/><sp/><sp/>=<sp/>4000;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>offset_z<sp/>=<sp/>near_z;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle_left<sp/><sp/>=<sp/>tanf(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fov_left));</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle_right<sp/>=<sp/>tanf(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fov_right));</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle_up<sp/><sp/><sp/><sp/>=<sp/>tanf(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fov_up));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle_down<sp/><sp/>=<sp/>tanf(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fov_down));</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle_width<sp/><sp/>=<sp/>angle_right<sp/>-<sp/>angle_left;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle_height<sp/>=<sp/>angle_up<sp/>-<sp/>angle_down;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix4f<sp/>openxr_matrix;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>openxr_matrix(0,<sp/>0)<sp/>=<sp/>2<sp/>/<sp/>angle_width;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>openxr_matrix(0,<sp/>1)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>openxr_matrix(0,<sp/>2)<sp/>=<sp/>(angle_right<sp/>+<sp/>angle_left)<sp/>/<sp/>angle_width;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>openxr_matrix(0,<sp/>3)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>openxr_matrix(1,<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>openxr_matrix(1,<sp/>1)<sp/>=<sp/>2<sp/>/<sp/>angle_height;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>openxr_matrix(1,<sp/>2)<sp/>=<sp/>(angle_up<sp/>+<sp/>angle_down)<sp/>/<sp/>angle_height;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>openxr_matrix(1,<sp/>3)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>openxr_matrix(2,<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>openxr_matrix(2,<sp/>1)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>openxr_matrix(2,<sp/>2)<sp/>=<sp/>-(far_z<sp/>+<sp/>offset_z)<sp/>/<sp/>(far_z<sp/>-<sp/>near_z);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>openxr_matrix(2,<sp/>3)<sp/>=<sp/>-(far_z<sp/>*<sp/>(near_z<sp/>+<sp/>offset_z))<sp/>/<sp/>(far_z<sp/>-<sp/>near_z);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>openxr_matrix(3,<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>openxr_matrix(3,<sp/>1)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>openxr_matrix(3,<sp/>2)<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>openxr_matrix(3,<sp/>3)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Godot<sp/>then<sp/>remaps<sp/>the<sp/>matrix...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://github.com/Khasehemwy/godot/blob/d950f5f83819240771aebb602bfdd4875363edce/core/math/projection.cpp#L722</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix4f<sp/>remap_z;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>remap_z(0,<sp/>0)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>remap_z(0,<sp/>1)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>remap_z(0,<sp/>2)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>remap_z(0,<sp/>3)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>remap_z(1,<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>remap_z(1,<sp/>1)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>remap_z(1,<sp/>2)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>remap_z(1,<sp/>3)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>remap_z(2,<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>remap_z(2,<sp/>1)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>remap_z(2,<sp/>2)<sp/>=<sp/>-0.5;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>remap_z(2,<sp/>3)<sp/>=<sp/>0.5;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>remap_z(3,<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>remap_z(3,<sp/>1)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>remap_z(3,<sp/>2)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>remap_z(3,<sp/>3)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>(*result)<sp/>=<sp/>remap_z<sp/>*<sp/>openxr_matrix;</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/>Rotation<sp/>matrix<sp/>to<sp/>convert<sp/>a<sp/>point<sp/>from<sp/>one<sp/>coordinate<sp/>system<sp/>to<sp/>another,<sp/>e.g.<sp/>left<sp/>hand<sp/>y<sp/>up<sp/>to<sp/>right<sp/>hand<sp/>y<sp/>up</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Eigen::Matrix3f<sp/>rotation(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>alpha,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>beta,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3f<sp/>rot;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ra<sp/>=<sp/>alpha<sp/>*<sp/>M_PI<sp/>/<sp/>180.;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rb<sp/>=<sp/>beta<sp/>*<sp/>M_PI<sp/>/<sp/>180.;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rg<sp/>=<sp/>gamma<sp/>*<sp/>M_PI<sp/>/<sp/>180;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>rot<sp/>&lt;&lt;<sp/>static_cast&lt;float&gt;(cos(rg)<sp/>*<sp/>cos(rb)),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cos(rg)<sp/>*<sp/>sin(rb)<sp/>*<sp/>sin(ra)<sp/>-<sp/>sin(rg)<sp/>*<sp/>cos(ra)),</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cos(rg)<sp/>*<sp/>sin(rb)<sp/>*<sp/>cos(ra)<sp/>+<sp/>sin(rg)<sp/>*<sp/>sin(ra)),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(sin(rg)<sp/>*<sp/>cos(rb)),</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(sin(rg)<sp/>*<sp/>sin(rb)<sp/>*<sp/>sin(ra)<sp/>+<sp/>cos(rg)<sp/>*<sp/>cos(ra)),</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(sin(rg)<sp/>*<sp/>sin(rb)<sp/>*<sp/>cos(ra)<sp/>-<sp/>cos(rg)<sp/>*<sp/>sin(ra)),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-sin(rb)),</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cos(rb)<sp/>*<sp/>sin(ra)),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cos(rb)<sp/>*<sp/>cos(ra));</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rot;</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Matrix3f<sp/>invert_x<sp/>=<sp/>(Eigen::Matrix3f()<sp/>&lt;&lt;<sp/>-1.,<sp/>0.,<sp/>0.,<sp/>0.,<sp/>1.,<sp/>0.,<sp/>0.,<sp/>0.,<sp/>1.).finished();</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Matrix3f<sp/>invert_y<sp/>=<sp/>(Eigen::Matrix3f()<sp/>&lt;&lt;<sp/>1.,<sp/>0.,<sp/>0.,<sp/>0.,<sp/>-1.,<sp/>0.,<sp/>0.,<sp/>0.,<sp/>1.).finished();</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Matrix3f<sp/>invert_z<sp/>=<sp/>(Eigen::Matrix3f()<sp/>&lt;&lt;<sp/>1.,<sp/>0.,<sp/>0.,<sp/>0.,<sp/>1.,<sp/>0.,<sp/>0.,<sp/>0.,<sp/>-1.).finished();</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Matrix3f<sp/>identity<sp/>=<sp/>Eigen::Matrix3f::Identity();</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">//<sp/>from:<sp/><sp/><sp/><sp/><sp/><sp/>IM<sp/>(image)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LHYU<sp/>(left<sp/>hand<sp/>y<sp/>up)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RHYU<sp/>(right<sp/>hand<sp/>y<sp/>up)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RHZU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(right<sp/>hand<sp/>z<sp/>up<sp/>LHZU<sp/>(left<sp/>hand<sp/>z<sp/>up)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RHZUXF<sp/>(right<sp/>hand<sp/>z<sp/>up<sp/>x<sp/>forward)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Matrix3f<sp/>conversion[6][6]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>{identity,<sp/>invert_y,<sp/>rotation(180.,<sp/>0.,<sp/>0.),<sp/>rotation(-90.,<sp/>0.,<sp/>0.),<sp/>rotation(-90.,<sp/>0.,<sp/>90.)<sp/>*<sp/>invert_z,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>rotation(-90.,<sp/>0.,<sp/>-90.)},<sp/></highlight><highlight class="comment">//<sp/>IM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>{invert_y,<sp/>identity,<sp/>invert_z,<sp/>rotation(-90.,<sp/>0.,<sp/>0.)<sp/>*<sp/>invert_y,<sp/>rotation(90.,<sp/>0.,<sp/>90.),</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>rotation(-90.,<sp/>0.,<sp/>-90.)<sp/>*<sp/>invert_y},<sp/></highlight><highlight class="comment">//<sp/>LHYU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>{rotation(180.,<sp/>0.,<sp/>0.),<sp/>invert_z,<sp/>identity,<sp/>rotation(90.,<sp/>0.,<sp/>0.),<sp/>rotation(90.,<sp/>0.,<sp/>90.)<sp/>*<sp/>invert_z,</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>rotation(-90.,<sp/>0.,<sp/>90.)<sp/>*<sp/>invert_x*<sp/>invert_y},<sp/></highlight><highlight class="comment">//<sp/>RHYU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>{rotation(90.,<sp/>0.,<sp/>0.),<sp/>invert_y*<sp/>rotation(90.,<sp/>0.,<sp/>0.),<sp/>rotation(-90.,<sp/>0.,<sp/>0.),<sp/>identity,<sp/>rotation(0.,<sp/>0.,<sp/>90.)<sp/>*<sp/>invert_y,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>rotation(0.,<sp/>0.,<sp/>-90.)},<sp/></highlight><highlight class="comment">//<sp/>RHZU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>{rotation(90.,<sp/>-90.,<sp/>0.)<sp/>*<sp/>invert_y,<sp/>rotation(-90.,<sp/>-90.,<sp/>0.),<sp/>rotation(0.,<sp/>90.,<sp/>90.)<sp/>*<sp/>invert_y,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>invert_x*<sp/>rotation(0,<sp/>0.,<sp/>90),<sp/>identity,<sp/>invert_y},<sp/></highlight><highlight class="comment">//<sp/>LHZU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>{rotation(90.,<sp/>-90.,<sp/>0.),<sp/>rotation(-90.,<sp/>-90.,<sp/>0.)<sp/>*<sp/>invert_y,<sp/>rotation(0.,<sp/>90.,<sp/>90.),<sp/>rotation(0,<sp/>0.,<sp/>90),<sp/>invert_y,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>identity}};<sp/></highlight><highlight class="comment">//<sp/>RHZUXF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>ILLIXR::math_util</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/friedel/devel/ILLIXR/include/illixr/math_util.hpp"/>
  </compounddef>
</doxygen>
