<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classtimer" kind="class" language="C++" prot="public">
    <compoundname>timer</compoundname>
    <includes refid="cpu__timer_8hpp" local="no">cpu_timer.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename Now_func</type>
      </param>
      <param>
        <type>typename Time_point</type>
        <defval>decltype(std::declval&lt;Now_func&gt;()())</defval>
      </param>
      <param>
        <type>typename Duration</type>
        <defval>decltype(std::declval&lt;Time_point&gt;() - std::declval&lt;Time_point&gt;())</defval>
      </param>
    </templateparamlist>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtimer_1aae1618fdb593335f4123c795d764738d" prot="private" static="no" mutable="no">
        <type>const Now_func &amp;</type>
        <definition>const Now_func&amp; timer&lt; Now_func, Time_point, Duration &gt;::now_</definition>
        <argsstring></argsstring>
        <name>now_</name>
        <qualifiedname>timer::now_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/cpu_timer.hpp" line="93" column="31" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/cpu_timer.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtimer_1ab4ca2bff10c855cd1cb7f01ce714fadd" prot="private" static="no" mutable="no">
        <type>Duration &amp;</type>
        <definition>Duration&amp; timer&lt; Now_func, Time_point, Duration &gt;::duration_</definition>
        <argsstring></argsstring>
        <name>duration_</name>
        <qualifiedname>timer::duration_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/cpu_timer.hpp" line="94" column="15" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/cpu_timer.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtimer_1a80606664a4d7072e06ea86fee5473bf4" prot="private" static="no" mutable="no">
        <type>Time_point</type>
        <definition>Time_point timer&lt; Now_func, Time_point, Duration &gt;::start_</definition>
        <argsstring></argsstring>
        <name>start_</name>
        <qualifiedname>timer::start_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/cpu_timer.hpp" line="95" column="32" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/cpu_timer.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classtimer_1af8c09f759c804d090995d7d28040a652" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>timer&lt; Now_func, Time_point, Duration &gt;::timer</definition>
        <argsstring>(const Now_func &amp;now, Duration &amp;duration)</argsstring>
        <name>timer</name>
        <qualifiedname>timer::timer</qualifiedname>
        <param>
          <type>const Now_func &amp;</type>
          <declname>now</declname>
        </param>
        <param>
          <type>Duration &amp;</type>
          <declname>duration</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/cpu_timer.hpp" line="82" column="5" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/cpu_timer.hpp" bodystart="82" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classtimer_1acea1cb101b547b1665ca531f92785e9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>timer&lt; Now_func, Time_point, Duration &gt;::~timer</definition>
        <argsstring>()</argsstring>
        <name>~timer</name>
        <qualifiedname>timer::~timer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/cpu_timer.hpp" line="88" column="5" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/cpu_timer.hpp" bodystart="88" bodyend="90"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>a timer that times until the end of the code block ([RAII]). </para>
    </briefdescription>
    <detaileddescription>
<para>See [<ulink url="https://www.geeksforgeeks.org/anonymous-classes-in-cpp/">2</ulink>] for how code-blocks are defined in C++.</para>
<para><computeroutput>now</computeroutput> can be any type that takes no arguments and returns a subtractable type.</para>
<para>Example usage:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stuff<sp/>that<sp/>won&apos;t<sp/>get<sp/>timed.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::nanoseconds<sp/>ns;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtimer" kindref="compound">timer</ref>&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">((thread_cpu_time))&gt;<sp/>timer_obj<sp/>{thread_cpu_time,<sp/>ns};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stuff<sp/>that<sp/>gets<sp/>timed.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>stuff<sp/>that<sp/>won&apos;t<sp/>get<sp/>timed.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>ns.count()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <location file="/home/friedel/devel/ILLIXR/include/illixr/cpu_timer.hpp" line="80" column="1" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/cpu_timer.hpp" bodystart="80" bodyend="96"/>
    <listofallmembers>
      <member refid="classtimer_1ab4ca2bff10c855cd1cb7f01ce714fadd" prot="private" virt="non-virtual"><scope>timer</scope><name>duration_</name></member>
      <member refid="classtimer_1aae1618fdb593335f4123c795d764738d" prot="private" virt="non-virtual"><scope>timer</scope><name>now_</name></member>
      <member refid="classtimer_1a80606664a4d7072e06ea86fee5473bf4" prot="private" virt="non-virtual"><scope>timer</scope><name>start_</name></member>
      <member refid="classtimer_1af8c09f759c804d090995d7d28040a652" prot="public" virt="non-virtual"><scope>timer</scope><name>timer</name></member>
      <member refid="classtimer_1acea1cb101b547b1665ca531f92785e9c" prot="public" virt="non-virtual"><scope>timer</scope><name>~timer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
