<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="plugins_2debugview_2plugin_8cpp" kind="file" language="C++">
    <compoundname>plugin.cpp</compoundname>
    <includes refid="plugins_2debugview_2plugin_8hpp" local="yes">plugin.hpp</includes>
    <includes refid="imu_8hpp" local="yes">illixr/data_format/imu.hpp</includes>
    <includes refid="opencv__data__types_8hpp" local="yes">illixr/data_format/opencv_data_types.hpp</includes>
    <includes refid="error__util_8hpp" local="yes">illixr/error_util.hpp</includes>
    <includes refid="global__module__defs_8hpp" local="yes">illixr/global_module_defs.hpp</includes>
    <includes local="yes">illixr/imgui/backends/imgui_impl_glfw.h</includes>
    <includes local="yes">illixr/imgui/backends/imgui_impl_opengl3.h</includes>
    <includes local="yes">illixr/imgui/imgui.h</includes>
    <includes refid="math__util_8hpp" local="yes">illixr/math_util.hpp</includes>
    <includes refid="shader__util_8hpp" local="yes">illixr/shader_util.hpp</includes>
    <includes local="yes">illixr/shaders/demo_shader.hpp</includes>
    <includes refid="switchboard_8hpp" local="yes">illixr/switchboard.hpp</includes>
    <includes refid="threadloop_8hpp" local="yes">illixr/threadloop.hpp</includes>
    <incdepgraph>
      <node id="53">
        <label>cpu_timer.hpp</label>
        <link refid="cpu__timer_8hpp_source"/>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>illixr/data_format/coordinate.hpp</label>
        <link refid="coordinate_8hpp_source"/>
      </node>
      <node id="7">
        <label>illixr/data_format/imu.hpp</label>
        <link refid="imu_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>illixr/data_format/opencv_data_types.hpp</label>
        <link refid="opencv__data__types_8hpp_source"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>data_format/point.hpp</label>
        <link refid="point_8hpp_source"/>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>illixr/data_format/pose.hpp</label>
        <link refid="pose_8hpp_source"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>illixr/data_format/pose_prediction.hpp</label>
        <link refid="pose__prediction_8hpp_source"/>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>illixr/data_format/template.hpp</label>
        <link refid="template_8hpp_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>illixr/data_format/unit.hpp</label>
        <link refid="unit_8hpp_source"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>error_util.hpp</label>
        <link refid="error__util_8hpp_source"/>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>global_module_defs.hpp</label>
        <link refid="global__module__defs_8hpp_source"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>managed_thread.hpp</label>
        <link refid="managed__thread_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>illixr/math_util.hpp</label>
        <link refid="math__util_8hpp_source"/>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>network/network_backend.hpp</label>
        <link refid="network__backend_8hpp_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>topic_config.hpp</label>
        <link refid="topic__config_8hpp_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>illixr/phonebook.hpp</label>
        <link refid="phonebook_8hpp_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>plugin.hpp</label>
        <link refid="include_2illixr_2plugin_8hpp_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>record_logger.hpp</label>
        <link refid="record__logger_8hpp_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>illixr/relative_clock.hpp</label>
        <link refid="relative__clock_8hpp_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>illixr/shader_util.hpp</label>
        <link refid="shader__util_8hpp_source"/>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>stoplight.hpp</label>
        <link refid="stoplight_8hpp_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>illixr/switchboard.hpp</label>
        <link refid="switchboard_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>illixr/threadloop.hpp</label>
        <link refid="threadloop_8hpp_source"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/friedel/devel/ILLIXR/plugins/debugview/plugin.cpp</label>
        <link refid="plugins_2debugview_2plugin_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>plugin.hpp</label>
        <link refid="plugins_2debugview_2plugin_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>GL/gl.h</label>
      </node>
      <node id="5">
        <label>GL/glew.h</label>
      </node>
      <node id="6">
        <label>GLFW/glfw3.h</label>
      </node>
      <node id="56">
        <label>algorithm</label>
      </node>
      <node id="31">
        <label>any</label>
      </node>
      <node id="11">
        <label>atomic</label>
      </node>
      <node id="35">
        <label>boost/archive/binary_iarchive.hpp</label>
      </node>
      <node id="36">
        <label>boost/archive/binary_oarchive.hpp</label>
      </node>
      <node id="37">
        <label>boost/iostreams/device/back_inserter.hpp</label>
      </node>
      <node id="38">
        <label>boost/iostreams/stream.hpp</label>
      </node>
      <node id="39">
        <label>boost/serialization/shared_ptr.hpp</label>
      </node>
      <node id="12">
        <label>cassert</label>
      </node>
      <node id="27">
        <label>chrono</label>
      </node>
      <node id="57">
        <label>cmath</label>
      </node>
      <node id="9">
        <label>concurrentqueue/blockingconcurrentqueue.hpp</label>
      </node>
      <node id="65">
        <label>condition_variable</label>
      </node>
      <node id="58">
        <label>cstring</label>
      </node>
      <node id="3">
        <label>eigen3/Eigen/Core</label>
      </node>
      <node id="40">
        <label>eigen3/Eigen/Dense</label>
      </node>
      <node id="4">
        <label>eigen3/Eigen/Geometry</label>
      </node>
      <node id="44">
        <label>fstream</label>
      </node>
      <node id="13">
        <label>functional</label>
      </node>
      <node id="51">
        <label>illixr/gl_util/obj.hpp</label>
      </node>
      <node id="66">
        <label>illixr/imgui/backends/imgui_impl_glfw.h</label>
      </node>
      <node id="67">
        <label>illixr/imgui/backends/imgui_impl_opengl3.h</label>
      </node>
      <node id="68">
        <label>illixr/imgui/imgui.h</label>
      </node>
      <node id="74">
        <label>illixr/shaders/demo_shader.hpp</label>
      </node>
      <node id="24">
        <label>iostream</label>
      </node>
      <node id="34">
        <label>list</label>
      </node>
      <node id="43">
        <label>map</label>
      </node>
      <node id="19">
        <label>memory</label>
      </node>
      <node id="20">
        <label>mutex</label>
      </node>
      <node id="45">
        <label>opencv4/opencv2/core/mat.hpp</label>
      </node>
      <node id="28">
        <label>optional</label>
      </node>
      <node id="50">
        <label>ratio</label>
      </node>
      <node id="21">
        <label>shared_mutex</label>
      </node>
      <node id="60">
        <label>spdlog/common.h</label>
      </node>
      <node id="61">
        <label>spdlog/sinks/basic_file_sink.h</label>
      </node>
      <node id="62">
        <label>spdlog/sinks/stdout_color_sinks.h</label>
      </node>
      <node id="25">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="33">
        <label>sstream</label>
      </node>
      <node id="14">
        <label>stdexcept</label>
      </node>
      <node id="32">
        <label>string</label>
      </node>
      <node id="15">
        <label>thread</label>
      </node>
      <node id="22">
        <label>typeindex</label>
      </node>
      <node id="63">
        <label>typeinfo</label>
      </node>
      <node id="23">
        <label>unordered_map</label>
      </node>
      <node id="16">
        <label>utility</label>
      </node>
      <node id="29">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="plugins_2debugview_2plugin_8cpp_1a917c3d1738b7d10757fefae2f890788f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix4f</type>
        <definition>Eigen::Matrix4f look_at</definition>
        <argsstring>(const Eigen::Vector3f &amp;eye, const Eigen::Vector3f &amp;target, const Eigen::Vector3f &amp;up)</argsstring>
        <name>look_at</name>
        <param>
          <type>const Eigen::Vector3f &amp;</type>
          <declname>eye</declname>
        </param>
        <param>
          <type>const Eigen::Vector3f &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const Eigen::Vector3f &amp;</type>
          <declname>up</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/debugview/plugin.cpp" line="22" column="17" bodyfile="/home/friedel/devel/ILLIXR/plugins/debugview/plugin.cpp" bodystart="22" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="plugins_2debugview_2plugin_8cpp_1a14c3332320afb7420f44fd067c1a7c9f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void glfw_error_callback</definition>
        <argsstring>(int error, const char *description)</argsstring>
        <name>glfw_error_callback</name>
        <param>
          <type>int</type>
          <declname>error</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>description</declname>
        </param>
        <briefdescription>
<para>Callback function to handle glfw errors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/debugview/plugin.cpp" line="39" column="13" bodyfile="/home/friedel/devel/ILLIXR/plugins/debugview/plugin.cpp" bodystart="39" bodyend="42"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;plugin.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;illixr/data_format/imu.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;illixr/data_format/opencv_data_types.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;illixr/error_util.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;illixr/global_module_defs.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;illixr/imgui/backends/imgui_impl_glfw.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;illixr/imgui/backends/imgui_impl_opengl3.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;illixr/imgui/imgui.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;illixr/math_util.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;illixr/shader_util.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;illixr/shaders/demo_shader.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;illixr/switchboard.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;illixr/threadloop.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceILLIXR" kindref="compound">ILLIXR</ref>;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">ILLIXR::data_format;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Loosely<sp/>inspired<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://spointeau.blogspot.com/2013/12/hello-i-am-looking-at-opengl-3.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal">Eigen::Matrix4f<sp/>look_at(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3f&amp;<sp/>eye,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3f&amp;<sp/>target,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3f&amp;<sp/>up)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Eigen;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector3f<sp/>look_dir<sp/>=<sp/>(target<sp/>-<sp/>eye).normalized();</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector3f<sp/>up_dir<sp/><sp/><sp/>=<sp/>up.normalized();</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector3f<sp/>side_dir<sp/>=<sp/>look_dir.cross(up_dir).normalized();</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>up_dir<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>side_dir.cross(look_dir);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>Matrix4f<sp/>result;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>&lt;&lt;<sp/>side_dir.x(),<sp/>side_dir.y(),<sp/>side_dir.z(),<sp/>-side_dir.dot(eye),<sp/>up_dir.x(),<sp/>up_dir.y(),<sp/>up_dir.z(),</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-up_dir.dot(eye),<sp/>-look_dir.x(),<sp/>-look_dir.y(),<sp/>-look_dir.z(),<sp/>look_dir.dot(eye),<sp/>0,<sp/>0,<sp/>0,<sp/>1;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>glfw_error_callback(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>description)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::get(</highlight><highlight class="stringliteral">&quot;illixr&quot;</highlight><highlight class="normal">)-&gt;error(</highlight><highlight class="stringliteral">&quot;||<sp/>glfw<sp/>error_callback:<sp/>{}\n|&gt;<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>error,<sp/>description);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceILLIXR_1a0f43f628688a8968a09a358bfa012a22" kindref="member">ILLIXR::abort</ref>();</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">[[maybe_unused]]<sp/>debugview::debugview(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/><ref refid="classILLIXR_1_1phonebook" kindref="compound">phonebook</ref>*<sp/>pb)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="classILLIXR_1_1threadloop" kindref="compound">threadloop</ref>{name,<sp/>pb}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>switchboard_{phonebook_-&gt;lookup_impl&lt;<ref refid="classILLIXR_1_1switchboard" kindref="compound">switchboard</ref>&gt;()}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>pose_prediction_{phonebook_-&gt;lookup_impl&lt;pose_prediction&gt;()}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>slow_pose_reader_{switchboard_-&gt;get_reader&lt;<ref refid="structILLIXR_1_1data__format_1_1pose__type" kindref="compound">pose_type</ref>&gt;(</highlight><highlight class="stringliteral">&quot;slow_pose&quot;</highlight><highlight class="normal">)}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>fast_pose_reader_{switchboard_-&gt;get_reader&lt;<ref refid="structILLIXR_1_1data__format_1_1imu__raw__type" kindref="compound">imu_raw_type</ref>&gt;(</highlight><highlight class="stringliteral">&quot;imu_raw&quot;</highlight><highlight class="normal">)}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>rgb_depth_reader_(switchboard_-&gt;get_reader&lt;<ref refid="structILLIXR_1_1data__format_1_1rgb__depth__type" kindref="compound">rgb_depth_type</ref>&gt;(</highlight><highlight class="stringliteral">&quot;rgb_depth&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>cam_reader_{switchboard_-&gt;get_buffered_reader&lt;data_format::<ref refid="structILLIXR_1_1data__format_1_1binocular__cam__type" kindref="compound">binocular_cam_type</ref>&gt;(</highlight><highlight class="stringliteral">&quot;cam&quot;</highlight><highlight class="normal">)}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>display_backend_manages_glfw_{strcmp(switchboard_-&gt;get_env_char(</highlight><highlight class="stringliteral">&quot;ILLIXR_DISPLAY_MODE&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;glfw&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0}<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlogger(switchboard_-&gt;get_env_char(</highlight><highlight class="stringliteral">&quot;DEBUGVIEW_LOG_LEVEL&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>debugview::draw_GUI()<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>RAC_ERRNO_MSG(</highlight><highlight class="stringliteral">&quot;debugview<sp/>at<sp/>start<sp/>of<sp/>draw_GUI&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>the<sp/>Dear<sp/>ImGui<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplOpenGL3_NewFrame();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calls<sp/>glfw<sp/>within<sp/>source<sp/>code<sp/>which<sp/>sets<sp/>errno</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplGlfw_NewFrame();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::NewFrame();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Init<sp/>the<sp/>window<sp/>docked<sp/>to<sp/>the<sp/>bottom<sp/>left<sp/>corner.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::SetNextWindowPos(ImVec2(0.0f,<sp/>ImGui::GetIO().DisplaySize.y),<sp/>ImGuiCond_Once,<sp/>ImVec2(0.0f,<sp/>1.0f));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::Begin(</highlight><highlight class="stringliteral">&quot;ILLIXR<sp/>Debug<sp/>View&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::Text(</highlight><highlight class="stringliteral">&quot;Adjust<sp/>options<sp/>for<sp/>the<sp/>runtime<sp/>debug<sp/>view.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::Spacing();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ImGui::CollapsingHeader(</highlight><highlight class="stringliteral">&quot;Headset<sp/>visualization<sp/>options&quot;</highlight><highlight class="normal">,<sp/>ImGuiTreeNodeFlags_DefaultOpen))<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::Checkbox(</highlight><highlight class="stringliteral">&quot;Follow<sp/>headset<sp/>position&quot;</highlight><highlight class="normal">,<sp/>&amp;follow_headset_);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::SliderFloat(</highlight><highlight class="stringliteral">&quot;View<sp/>distance<sp/>&quot;</highlight><highlight class="normal">,<sp/>&amp;view_distance_,<sp/>0.1f,<sp/>10.0f);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::SliderFloat3(</highlight><highlight class="stringliteral">&quot;Tracking<sp/>\&quot;offset\&quot;&quot;</highlight><highlight class="normal">,<sp/>tracking_position_offset_.data(),<sp/>-10.0f,<sp/>10.0f);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ImGui::Button(</highlight><highlight class="stringliteral">&quot;Reset&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tracking_position_offset_<sp/>=<sp/>Eigen::Vector3f{5.0f,<sp/>2.0f,<sp/>-3.0f};</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::SameLine();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::Text(</highlight><highlight class="stringliteral">&quot;Resets<sp/>to<sp/>default<sp/>tracking<sp/>universe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ImGui::Button(</highlight><highlight class="stringliteral">&quot;Zero&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tracking_position_offset_<sp/>=<sp/>Eigen::Vector3f{0.0f,<sp/>0.0f,<sp/>0.0f};</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::SameLine();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::Text(</highlight><highlight class="stringliteral">&quot;Resets<sp/>to<sp/>zeroed<sp/>out<sp/>tracking<sp/>universe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ImGui::Button(</highlight><highlight class="stringliteral">&quot;Zero<sp/>orientation&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structILLIXR_1_1data__format_1_1pose__type" kindref="compound">pose_type</ref><sp/>predicted_pose<sp/>=<sp/>pose_prediction_-&gt;get_fast_pose().pose;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pose_prediction_-&gt;fast_pose_reliable())<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Can<sp/>only<sp/>zero<sp/>if<sp/>predicted_pose<sp/>is<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pose_prediction_-&gt;set_offset(predicted_pose.<ref refid="structILLIXR_1_1data__format_1_1pose__data_1a7371675dd0f9b6c1c3734c47e9680bb8" kindref="member">orientation</ref>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::SameLine();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::Text(</highlight><highlight class="stringliteral">&quot;Resets<sp/>to<sp/>zeroed<sp/>out<sp/>tracking<sp/>universe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::Spacing();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::Text(</highlight><highlight class="stringliteral">&quot;Switchboard<sp/>connection<sp/>status:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::Text(</highlight><highlight class="stringliteral">&quot;Predicted<sp/>pose<sp/>topic:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::SameLine();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pose_prediction_-&gt;fast_pose_reliable())<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structILLIXR_1_1data__format_1_1pose__type" kindref="compound">pose_type</ref><sp/>predicted_pose<sp/>=<sp/>pose_prediction_-&gt;get_fast_pose().pose;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::TextColored(ImVec4(0.0,<sp/>1.0,<sp/>0.0,<sp/>1.0),<sp/></highlight><highlight class="stringliteral">&quot;Valid<sp/>predicted<sp/>pose<sp/>pointer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::Text(</highlight><highlight class="stringliteral">&quot;Predicted<sp/>pose<sp/>position<sp/>(XYZ):\n<sp/><sp/>(%f,<sp/>%f,<sp/>%f)&quot;</highlight><highlight class="normal">,<sp/>predicted_pose.<ref refid="structILLIXR_1_1data__format_1_1pose__data_1a349cfa289fa6b51c4090c7d3b171332d" kindref="member">position</ref>.x(),<sp/>predicted_pose.<ref refid="structILLIXR_1_1data__format_1_1pose__data_1a349cfa289fa6b51c4090c7d3b171332d" kindref="member">position</ref>.y(),</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>predicted_pose.<ref refid="structILLIXR_1_1data__format_1_1pose__data_1a349cfa289fa6b51c4090c7d3b171332d" kindref="member">position</ref>.z());</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::Text(</highlight><highlight class="stringliteral">&quot;Predicted<sp/>pose<sp/>quaternion<sp/>(XYZW):\n<sp/><sp/>(%f,<sp/>%f,<sp/>%f,<sp/>%f)&quot;</highlight><highlight class="normal">,<sp/>predicted_pose.<ref refid="structILLIXR_1_1data__format_1_1pose__data_1a7371675dd0f9b6c1c3734c47e9680bb8" kindref="member">orientation</ref>.x(),</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>predicted_pose.<ref refid="structILLIXR_1_1data__format_1_1pose__data_1a7371675dd0f9b6c1c3734c47e9680bb8" kindref="member">orientation</ref>.y(),<sp/>predicted_pose.<ref refid="structILLIXR_1_1data__format_1_1pose__data_1a7371675dd0f9b6c1c3734c47e9680bb8" kindref="member">orientation</ref>.z(),<sp/>predicted_pose.<ref refid="structILLIXR_1_1data__format_1_1pose__data_1a7371675dd0f9b6c1c3734c47e9680bb8" kindref="member">orientation</ref>.w());</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::TextColored(ImVec4(1.0,<sp/>0.0,<sp/>0.0,<sp/>1.0),<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>predicted<sp/>pose<sp/>pointer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::Text(</highlight><highlight class="stringliteral">&quot;Fast<sp/>pose<sp/>topic:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::SameLine();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classILLIXR_1_1switchboard_1af91c1b9436918512e95e5fa8553846a7" kindref="member">switchboard::ptr&lt;const imu_raw_type&gt;</ref><sp/>raw_imu<sp/>=<sp/>fast_pose_reader_.get_ro_nullable();</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(raw_imu)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structILLIXR_1_1data__format_1_1pose__type" kindref="compound">pose_type</ref><sp/><ref refid="structILLIXR_1_1data__format_1_1raw__pose" kindref="compound">raw_pose</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structILLIXR_1_1data__format_1_1raw__pose" kindref="compound">raw_pose</ref>.position<sp/><sp/><sp/><sp/>=<sp/>Eigen::Vector3f{float(raw_imu-&gt;pos(0)),<sp/>float(raw_imu-&gt;pos(1)),<sp/>float(raw_imu-&gt;pos(2))};</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structILLIXR_1_1data__format_1_1raw__pose" kindref="compound">raw_pose</ref>.orientation<sp/>=<sp/>Eigen::Quaternionf{float(raw_imu-&gt;quat.w()),<sp/>float(raw_imu-&gt;quat.x()),<sp/>float(raw_imu-&gt;quat.y()),</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float(raw_imu-&gt;quat.z())};</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structILLIXR_1_1data__format_1_1pose__type" kindref="compound">pose_type</ref><sp/>swapped_pose<sp/>=<sp/>pose_prediction_-&gt;correct_pose(<ref refid="structILLIXR_1_1data__format_1_1raw__pose" kindref="compound">raw_pose</ref>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::TextColored(ImVec4(0.0,<sp/>1.0,<sp/>0.0,<sp/>1.0),<sp/></highlight><highlight class="stringliteral">&quot;Valid<sp/>fast<sp/>pose<sp/>pointer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::Text(</highlight><highlight class="stringliteral">&quot;Fast<sp/>pose<sp/>position<sp/>(XYZ):\n<sp/><sp/>(%f,<sp/>%f,<sp/>%f)&quot;</highlight><highlight class="normal">,<sp/>swapped_pose.<ref refid="structILLIXR_1_1data__format_1_1pose__data_1a349cfa289fa6b51c4090c7d3b171332d" kindref="member">position</ref>.x(),<sp/>swapped_pose.<ref refid="structILLIXR_1_1data__format_1_1pose__data_1a349cfa289fa6b51c4090c7d3b171332d" kindref="member">position</ref>.y(),</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swapped_pose.<ref refid="structILLIXR_1_1data__format_1_1pose__data_1a349cfa289fa6b51c4090c7d3b171332d" kindref="member">position</ref>.z());</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::Text(</highlight><highlight class="stringliteral">&quot;Fast<sp/>pose<sp/>quaternion<sp/>(XYZW):\n<sp/><sp/>(%f,<sp/>%f,<sp/>%f,<sp/>%f)&quot;</highlight><highlight class="normal">,<sp/>swapped_pose.<ref refid="structILLIXR_1_1data__format_1_1pose__data_1a7371675dd0f9b6c1c3734c47e9680bb8" kindref="member">orientation</ref>.x(),</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swapped_pose.<ref refid="structILLIXR_1_1data__format_1_1pose__data_1a7371675dd0f9b6c1c3734c47e9680bb8" kindref="member">orientation</ref>.y(),<sp/>swapped_pose.<ref refid="structILLIXR_1_1data__format_1_1pose__data_1a7371675dd0f9b6c1c3734c47e9680bb8" kindref="member">orientation</ref>.z(),<sp/>swapped_pose.<ref refid="structILLIXR_1_1data__format_1_1pose__data_1a7371675dd0f9b6c1c3734c47e9680bb8" kindref="member">orientation</ref>.w());</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::TextColored(ImVec4(1.0,<sp/>0.0,<sp/>0.0,<sp/>1.0),<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>fast<sp/>pose<sp/>pointer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::Text(</highlight><highlight class="stringliteral">&quot;Slow<sp/>pose<sp/>topic:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::SameLine();</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classILLIXR_1_1switchboard_1af91c1b9436918512e95e5fa8553846a7" kindref="member">switchboard::ptr&lt;const pose_type&gt;</ref><sp/>slow_pose_ptr<sp/>=<sp/>slow_pose_reader_.get_ro_nullable();</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(slow_pose_ptr)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structILLIXR_1_1data__format_1_1pose__type" kindref="compound">pose_type</ref><sp/>swapped_pose<sp/>=<sp/>pose_prediction_-&gt;correct_pose(*slow_pose_ptr);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::TextColored(ImVec4(0.0,<sp/>1.0,<sp/>0.0,<sp/>1.0),<sp/></highlight><highlight class="stringliteral">&quot;Valid<sp/>slow<sp/>pose<sp/>pointer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::Text(</highlight><highlight class="stringliteral">&quot;Slow<sp/>pose<sp/>position<sp/>(XYZ):\n<sp/><sp/>(%f,<sp/>%f,<sp/>%f)&quot;</highlight><highlight class="normal">,<sp/>swapped_pose.<ref refid="structILLIXR_1_1data__format_1_1pose__data_1a349cfa289fa6b51c4090c7d3b171332d" kindref="member">position</ref>.x(),<sp/>swapped_pose.<ref refid="structILLIXR_1_1data__format_1_1pose__data_1a349cfa289fa6b51c4090c7d3b171332d" kindref="member">position</ref>.y(),</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swapped_pose.<ref refid="structILLIXR_1_1data__format_1_1pose__data_1a349cfa289fa6b51c4090c7d3b171332d" kindref="member">position</ref>.z());</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::Text(</highlight><highlight class="stringliteral">&quot;Slow<sp/>pose<sp/>quaternion<sp/>(XYZW):\n<sp/><sp/>(%f,<sp/>%f,<sp/>%f,<sp/>%f)&quot;</highlight><highlight class="normal">,<sp/>swapped_pose.<ref refid="structILLIXR_1_1data__format_1_1pose__data_1a7371675dd0f9b6c1c3734c47e9680bb8" kindref="member">orientation</ref>.x(),</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swapped_pose.<ref refid="structILLIXR_1_1data__format_1_1pose__data_1a7371675dd0f9b6c1c3734c47e9680bb8" kindref="member">orientation</ref>.y(),<sp/>swapped_pose.<ref refid="structILLIXR_1_1data__format_1_1pose__data_1a7371675dd0f9b6c1c3734c47e9680bb8" kindref="member">orientation</ref>.z(),<sp/>swapped_pose.<ref refid="structILLIXR_1_1data__format_1_1pose__data_1a7371675dd0f9b6c1c3734c47e9680bb8" kindref="member">orientation</ref>.w());</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::TextColored(ImVec4(1.0,<sp/>0.0,<sp/>0.0,<sp/>1.0),<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>slow<sp/>pose<sp/>pointer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::Text(</highlight><highlight class="stringliteral">&quot;Ground<sp/>truth<sp/>pose<sp/>topic:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::SameLine();</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pose_prediction_-&gt;true_pose_reliable())<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structILLIXR_1_1data__format_1_1pose__type" kindref="compound">pose_type</ref><sp/>true_pose<sp/>=<sp/>pose_prediction_-&gt;get_true_pose();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::TextColored(ImVec4(0.0,<sp/>1.0,<sp/>0.0,<sp/>1.0),<sp/></highlight><highlight class="stringliteral">&quot;Valid<sp/>ground<sp/>truth<sp/>pose<sp/>pointer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::Text(</highlight><highlight class="stringliteral">&quot;Ground<sp/>truth<sp/>position<sp/>(XYZ):\n<sp/><sp/>(%f,<sp/>%f,<sp/>%f)&quot;</highlight><highlight class="normal">,<sp/>true_pose.<ref refid="structILLIXR_1_1data__format_1_1pose__data_1a349cfa289fa6b51c4090c7d3b171332d" kindref="member">position</ref>.x(),<sp/>true_pose.<ref refid="structILLIXR_1_1data__format_1_1pose__data_1a349cfa289fa6b51c4090c7d3b171332d" kindref="member">position</ref>.y(),</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>true_pose.<ref refid="structILLIXR_1_1data__format_1_1pose__data_1a349cfa289fa6b51c4090c7d3b171332d" kindref="member">position</ref>.z());</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::Text(</highlight><highlight class="stringliteral">&quot;Ground<sp/>truth<sp/>quaternion<sp/>(XYZW):\n<sp/><sp/>(%f,<sp/>%f,<sp/>%f,<sp/>%f)&quot;</highlight><highlight class="normal">,<sp/>true_pose.<ref refid="structILLIXR_1_1data__format_1_1pose__data_1a7371675dd0f9b6c1c3734c47e9680bb8" kindref="member">orientation</ref>.x(),<sp/>true_pose.<ref refid="structILLIXR_1_1data__format_1_1pose__data_1a7371675dd0f9b6c1c3734c47e9680bb8" kindref="member">orientation</ref>.y(),</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>true_pose.<ref refid="structILLIXR_1_1data__format_1_1pose__data_1a7371675dd0f9b6c1c3734c47e9680bb8" kindref="member">orientation</ref>.z(),<sp/>true_pose.<ref refid="structILLIXR_1_1data__format_1_1pose__data_1a7371675dd0f9b6c1c3734c47e9680bb8" kindref="member">orientation</ref>.w());</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::TextColored(ImVec4(1.0,<sp/>0.0,<sp/>0.0,<sp/>1.0),<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>ground<sp/>truth<sp/>pose<sp/>pointer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::Text(</highlight><highlight class="stringliteral">&quot;Debug<sp/>view<sp/>Eulers:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::Text(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>(%f,<sp/>%f)&quot;</highlight><highlight class="normal">,<sp/>view_euler_.x(),<sp/>view_euler_.y());</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::End();</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::Begin(</highlight><highlight class="stringliteral">&quot;Camera<sp/>+<sp/>IMU&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::Text(</highlight><highlight class="stringliteral">&quot;Camera<sp/>view<sp/>buffers:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::Text(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Camera0:<sp/>(%d,<sp/>%d)<sp/>\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL<sp/>texture<sp/>handle:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>camera_texture_size_[0].x(),</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>camera_texture_size_[0].y(),<sp/>camera_texture_[0]);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::Text(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Camera1:<sp/>(%d,<sp/>%d)<sp/>\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL<sp/>texture<sp/>handle:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>camera_texture_size_[1].x(),</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>camera_texture_size_[1].y(),<sp/>camera_texture_[1]);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::End();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_cam_)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::SetNextWindowSize(ImVec2(700,<sp/>350),<sp/>ImGuiCond_Once);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::SetNextWindowPos(ImVec2(ImGui::GetIO().DisplaySize.x,<sp/>ImGui::GetIO().DisplaySize.y),<sp/>ImGuiCond_Once,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImVec2(1.0f,<sp/>1.0f));</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::Begin(</highlight><highlight class="stringliteral">&quot;Onboard<sp/>camera<sp/>views&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window_size<sp/><sp/><sp/><sp/><sp/>=<sp/>ImGui::GetWindowSize();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vertical_offset<sp/>=<sp/>ImGui::GetCursorPos().y;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::Image((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>(intptr_t)<sp/>camera_texture_[0],<sp/>ImVec2(window_size.x<sp/>/<sp/>2,<sp/>window_size.y<sp/>-<sp/>vertical_offset<sp/>*<sp/>2));</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::SameLine();</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::Image((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>(intptr_t)<sp/>camera_texture_[1],<sp/>ImVec2(window_size.x<sp/>/<sp/>2,<sp/>window_size.y<sp/>-<sp/>vertical_offset<sp/>*<sp/>2));</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::End();</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_rgb_depth_)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::SetNextWindowSize(ImVec2(700,<sp/>350),<sp/>ImGuiCond_Once);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>there<sp/>are<sp/>RGBD<sp/>stream<sp/>and<sp/>Stereo<sp/>images<sp/>stream,<sp/>then<sp/>move<sp/>the<sp/>RGBD<sp/>display<sp/>window<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>essentially<sp/>making<sp/>the<sp/>display<sp/>images<sp/>of<sp/>RGBD<sp/>on<sp/>top<sp/>of<sp/>stereo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_cam_)</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::SetNextWindowPos(ImVec2(ImGui::GetIO().DisplaySize.x,<sp/>ImGui::GetIO().DisplaySize.y<sp/>-<sp/>350),<sp/>ImGuiCond_Once,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImVec2(1.0f,<sp/>1.0f));</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::SetNextWindowPos(ImVec2(ImGui::GetIO().DisplaySize.x,<sp/>ImGui::GetIO().DisplaySize.y),<sp/>ImGuiCond_Once,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImVec2(1.0f,<sp/>1.0f));</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::Begin(</highlight><highlight class="stringliteral">&quot;Onboard<sp/>RGBD<sp/>views&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window_size<sp/><sp/><sp/><sp/><sp/>=<sp/>ImGui::GetWindowSize();</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vertical_offset<sp/>=<sp/>ImGui::GetCursorPos().y;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::Image((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>(intptr_t)<sp/>rgb_depth_texture_[0],<sp/>ImVec2(window_size.x<sp/>/<sp/>2,<sp/>window_size.y<sp/>-<sp/>vertical_offset<sp/>*<sp/>2));</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::SameLine();</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::Image((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>(intptr_t)<sp/>rgb_depth_texture_[1],<sp/>ImVec2(window_size.x<sp/>/<sp/>2,<sp/>window_size.y<sp/>-<sp/>vertical_offset<sp/>*<sp/>2));</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::End();</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::Render();</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>RAC_ERRNO_MSG(</highlight><highlight class="stringliteral">&quot;debugview<sp/>after<sp/>ImGui<sp/>render&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>debugview::load_camera_images()<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>RAC_ERRNO_MSG(</highlight><highlight class="stringliteral">&quot;debugview<sp/>at<sp/>start<sp/>of<sp/>load_camera_images&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>cam_<sp/>=<sp/>cam_reader_.size()<sp/>==<sp/>0<sp/>?<sp/>nullptr<sp/>:<sp/>cam_reader_.dequeue();</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cam_<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!use_cam_)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_cam_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>glBindTexture(GL_TEXTURE_2D,<sp/>camera_texture_[0]);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Mat<sp/>img0{cam_-&gt;at(image::LEFT_EYE).clone()};</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>glTexImage2D(GL_TEXTURE_2D,<sp/>0,<sp/>GL_R8,<sp/>img0.cols,<sp/>img0.rows,<sp/>0,<sp/>GL_RED,<sp/>GL_UNSIGNED_BYTE,<sp/>img0.ptr());</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>camera_texture_size_[0]<sp/>=<sp/>Eigen::Vector2i(img0.cols,<sp/>img0.rows);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>GLint<sp/>swizzle_mask[]<sp/><sp/><sp/><sp/>=<sp/>{GL_RED,<sp/>GL_RED,<sp/>GL_RED,<sp/>GL_RED};</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>glTexParameteriv(GL_TEXTURE_2D,<sp/>GL_TEXTURE_SWIZZLE_RGBA,<sp/>swizzle_mask);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>glBindTexture(GL_TEXTURE_2D,<sp/>camera_texture_[1]);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Mat<sp/>img1{cam_-&gt;at(image::RIGHT_EYE).clone()};<sp/></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>glTexImage2D(GL_TEXTURE_2D,<sp/>0,<sp/>GL_R8,<sp/>img1.cols,<sp/>img1.rows,<sp/>0,<sp/>GL_RED,<sp/>GL_UNSIGNED_BYTE,<sp/>img1.ptr());</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>camera_texture_size_[1]<sp/>=<sp/>Eigen::Vector2i(img1.cols,<sp/>img1.rows);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>GLint<sp/>swizzle_mask1[]<sp/><sp/><sp/>=<sp/>{GL_RED,<sp/>GL_RED,<sp/>GL_RED,<sp/>GL_RED};</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>glTexParameteriv(GL_TEXTURE_2D,<sp/>GL_TEXTURE_SWIZZLE_RGBA,<sp/>swizzle_mask1);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>RAC_ERRNO_MSG(</highlight><highlight class="stringliteral">&quot;debugview<sp/>at<sp/>end<sp/>of<sp/>load_camera_images&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>debugview::load_rgb_depth()<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>RAC_ERRNO_MSG(</highlight><highlight class="stringliteral">&quot;debugview<sp/>at<sp/>start<sp/>of<sp/>load_rgb_depth&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>rgb_depth_<sp/>=<sp/>rgb_depth_reader_.get_ro_nullable();</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rgb_depth_<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!use_rgb_depth_)</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_rgb_depth_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>glBindTexture(GL_TEXTURE_2D,<sp/>rgb_depth_texture_[0]);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Mat<sp/>rgb{rgb_depth_-&gt;at(image::RGB).clone()};</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>glTexImage2D(GL_TEXTURE_2D,<sp/>0,<sp/>GL_RGBA,<sp/>rgb.cols,<sp/>rgb.rows,<sp/>0,<sp/>GL_RGBA,<sp/>GL_UNSIGNED_BYTE,<sp/>rgb.ptr());</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>rgbd_texture_size_[0]<sp/>=<sp/>Eigen::Vector2i(rgb.cols,<sp/>rgb.rows);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>glBindTexture(GL_TEXTURE_2D,<sp/>rgb_depth_texture_[1]);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Mat<sp/>depth{rgb_depth_-&gt;at(image::DEPTH).clone()};</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>glTexImage2D(GL_TEXTURE_2D,<sp/>0,<sp/>GL_DEPTH_COMPONENT,<sp/>depth.cols,<sp/>depth.rows,<sp/>0,<sp/>GL_DEPTH_COMPONENT,<sp/>GL_SHORT,<sp/>depth.ptr());</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>rgbd_texture_size_[1]<sp/>=<sp/>Eigen::Vector2i(depth.cols,<sp/>depth.rows);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>GLint<sp/>swizzle_mask[]<sp/><sp/>=<sp/>{GL_RED,<sp/>GL_RED,<sp/>GL_RED,<sp/>1};</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>glTexParameteriv(GL_TEXTURE_2D,<sp/>GL_TEXTURE_SWIZZLE_RGBA,<sp/>swizzle_mask);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>RAC_ERRNO_MSG(</highlight><highlight class="stringliteral">&quot;debugview<sp/>at<sp/>end<sp/>of<sp/>load_rgb_depth&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal">Eigen::Matrix4f<sp/>debugview::generate_headset_transform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3f&amp;<sp/>position,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Quaternionf&amp;<sp/>rotation,</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3f&amp;<sp/>position_offset)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix4f<sp/>headset_position;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>headset_position<sp/>&lt;&lt;<sp/>1,<sp/>0,<sp/>0,<sp/>position.x()<sp/>+<sp/>position_offset.x(),<sp/>0,<sp/>1,<sp/>0,<sp/>position.y()<sp/>+<sp/>position_offset.y(),<sp/>0,<sp/>0,<sp/>1,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>position.z()<sp/>+<sp/>position_offset.z(),<sp/>0,<sp/>0,<sp/>0,<sp/>1;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>convert<sp/>the<sp/>headset<sp/>rotation<sp/>quaternion<sp/>to<sp/>a<sp/>4x4<sp/>homogenous<sp/>matrix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>of<sp/>all,<sp/>we<sp/>convert<sp/>to<sp/>3x3<sp/>matrix,<sp/>then<sp/>extend<sp/>to<sp/>4x4<sp/>by<sp/>augmenting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3f<sp/>rotation_matrix<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>rotation.toRotationMatrix();</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix4f<sp/>rotation_matrix_homogeneous<sp/><sp/><sp/>=<sp/>Eigen::Matrix4f::Identity();</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>rotation_matrix_homogeneous.block(0,<sp/>0,<sp/>3,<sp/>3)<sp/>=<sp/>rotation_matrix;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>we<sp/>apply<sp/>the<sp/>headset<sp/>rotation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>headset_position<sp/>*<sp/>rotation_matrix_homogeneous;</highlight></codeline>
<codeline lineno="288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>debugview::_p_thread_setup()<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>RAC_ERRNO_MSG(</highlight><highlight class="stringliteral">&quot;debugview<sp/>at<sp/>start<sp/>of<sp/>_p_thread_setup&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>glfwMakeContextCurrent<sp/>must<sp/>be<sp/>called<sp/>from<sp/>the<sp/>thread<sp/>which<sp/>will<sp/>be<sp/>using<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>glfwMakeContextCurrent(gui_window_);</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>debugview::_p_one_iteration()<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>RAC_ERRNO_MSG(</highlight><highlight class="stringliteral">&quot;debugview<sp/>at<sp/>stat<sp/>of<sp/>_p_one_iteration&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>RAC_ERRNO_MSG(</highlight><highlight class="stringliteral">&quot;debugview<sp/>before<sp/>glfwPollEvents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>glfwPollEvents();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>RAC_ERRNO_MSG(</highlight><highlight class="stringliteral">&quot;debugview<sp/>after<sp/>glfwPollEvents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(glfwGetMouseButton(gui_window_,<sp/>GLFW_MOUSE_BUTTON_LEFT))<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xpos,<sp/>ypos;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glfwGetCursorPos(gui_window_,<sp/>&amp;xpos,<sp/>&amp;ypos);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>new_pos<sp/>=<sp/>Eigen::Vector2d{xpos,<sp/>ypos};</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!being_dragged_)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_mouse_position_<sp/>=<sp/>new_pos;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>being_dragged_<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mouse_velocity_<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>new_pos<sp/>-<sp/>last_mouse_position_;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_mouse_position_<sp/>=<sp/>new_pos;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>being_dragged_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>view_euler_.y()<sp/>+=<sp/>mouse_velocity_.x()<sp/>*<sp/>0.002f;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>view_euler_.x()<sp/>+=<sp/>mouse_velocity_.y()<sp/>*<sp/>0.002f;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>mouse_velocity_<sp/>=<sp/>mouse_velocity_<sp/>*<sp/>0.95;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>load_camera_images();</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>load_rgb_depth();</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>glUseProgram(demo_shader_program_);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix4f<sp/>headset_pose<sp/>=<sp/>Eigen::Matrix4f::Identity();</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structILLIXR_1_1data__format_1_1fast__pose__type" kindref="compound">fast_pose_type</ref><sp/>predicted_pose<sp/>=<sp/>pose_prediction_-&gt;get_fast_pose();</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pose_prediction_-&gt;fast_pose_reliable())<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structILLIXR_1_1data__format_1_1pose__type" kindref="compound">pose_type</ref><sp/><sp/><sp/><sp/>pose<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>predicted_pose.<ref refid="structILLIXR_1_1data__format_1_1fast__pose__type_1a09448c2b9e5d5d7ba07c85863da89ec9" kindref="member">pose</ref>;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Quaternionf<sp/>combined_quat<sp/>=<sp/>pose.<ref refid="structILLIXR_1_1data__format_1_1pose__data_1a7371675dd0f9b6c1c3734c47e9680bb8" kindref="member">orientation</ref>;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>headset_pose<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>generate_headset_transform(pose.<ref refid="structILLIXR_1_1data__format_1_1pose__data_1a349cfa289fa6b51c4090c7d3b171332d" kindref="member">position</ref>,<sp/>combined_quat,<sp/>tracking_position_offset_);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix4f<sp/>model_matrix<sp/>=<sp/>Eigen::Matrix4f::Identity();</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>are<sp/>following<sp/>the<sp/>headset,<sp/>and<sp/>have<sp/>a<sp/>valid<sp/>pose,<sp/>apply<sp/>the<sp/>optional<sp/>offset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3f<sp/>optional_offset<sp/>=<sp/>(follow_headset_<sp/>&amp;&amp;<sp/>pose_prediction_-&gt;fast_pose_reliable())</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(predicted_pose.<ref refid="structILLIXR_1_1data__format_1_1fast__pose__type_1a09448c2b9e5d5d7ba07c85863da89ec9" kindref="member">pose</ref>.<ref refid="structILLIXR_1_1data__format_1_1pose__data_1a349cfa289fa6b51c4090c7d3b171332d" kindref="member">position</ref><sp/>+<sp/>tracking_position_offset_)</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Eigen::Vector3f{0.0f,<sp/>0.0f,<sp/>0.0f};</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix4f<sp/>user_view<sp/>=<sp/>look_at(Eigen::Vector3f{(float)<sp/>(view_distance_<sp/>*<sp/>cos(view_euler_.y())),</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(float)<sp/>(view_distance_<sp/>*<sp/>sin(view_euler_.x())),</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>(view_distance_<sp/>*<sp/>sin(view_euler_.y()))}<sp/>+</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optional_offset,</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optional_offset,<sp/>Eigen::Vector3f::UnitY());</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix4f<sp/>model_view<sp/>=<sp/>user_view<sp/>*<sp/>model_matrix;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>glUseProgram(demo_shader_program_);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Size<sp/>viewport<sp/>to<sp/>window<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>display_w,<sp/>display_h;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>glfwGetFramebufferSize(gui_window_,<sp/>&amp;display_w,<sp/>&amp;display_h);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>glViewport(0,<sp/>0,<sp/>display_w,<sp/>display_h);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ratio<sp/>=<sp/>(float)<sp/>display_h<sp/>/<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>display_w;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>a<sp/>basic<sp/>perspective<sp/>projection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>RAC_ERRNO_MSG(</highlight><highlight class="stringliteral">&quot;debugview<sp/>before<sp/>projection_fov&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>math_util::projection_fov(&amp;basic_projection_,<sp/>40.0f,<sp/>40.0f,<sp/>40.0f<sp/>*<sp/>ratio,<sp/>40.0f<sp/>*<sp/>ratio,<sp/>0.03f,<sp/>20.0f);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>RAC_ERRNO_MSG(</highlight><highlight class="stringliteral">&quot;debugview<sp/>after<sp/>projection_fov&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>glEnable(GL_CULL_FACE);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>glEnable(GL_DEPTH_TEST);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>glClearDepth(1);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>glUniformMatrix4fv(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">GLint</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(model_view_attr_),<sp/>1,<sp/>GL_FALSE,<sp/>(GLfloat*)<sp/>model_view.data());</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>glUniformMatrix4fv(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">GLint</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(projection_attr_),<sp/>1,<sp/>GL_FALSE,<sp/>(GLfloat*)<sp/>(basic_projection_.data()));</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>glBindVertexArray(demo_vao_);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Draw<sp/>things</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>glClearColor(0.8f,<sp/>0.8f,<sp/>0.8f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>RAC_ERRNO_MSG(</highlight><highlight class="stringliteral">&quot;debugview<sp/>before<sp/>glClear&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>glClear(GL_COLOR_BUFFER_BIT<sp/>|<sp/>GL_DEPTH_BUFFER_BIT);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>RAC_ERRNO_MSG(</highlight><highlight class="stringliteral">&quot;debugview<sp/>after<sp/>glClear&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>demo_scene_.Draw();</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>model_view<sp/>=<sp/>user_view<sp/>*<sp/>headset_pose;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>glUniformMatrix4fv(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">GLint</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(model_view_attr_),<sp/>1,<sp/>GL_FALSE,<sp/>(GLfloat*)<sp/>model_view.data());</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>headset_.Draw();</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>draw_GUI();</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>RAC_ERRNO_MSG(</highlight><highlight class="stringliteral">&quot;debugview<sp/>before<sp/>glfwSwapBuffers&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>glfwSwapBuffers(gui_window_);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>RAC_ERRNO_MSG(</highlight><highlight class="stringliteral">&quot;debugview<sp/>after<sp/>glfwSwapBuffers&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>debugview::start()<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>RAC_ERRNO_MSG(</highlight><highlight class="stringliteral">&quot;debugview<sp/>at<sp/>the<sp/>top<sp/>of<sp/>start()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>display<sp/>backend<sp/>already<sp/>initialized<sp/>GLFW,<sp/>then<sp/>we<sp/>shouldn&apos;t<sp/>try<sp/>to<sp/>do<sp/>it<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>GLFW<sp/>should<sp/>be<sp/>initialized<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!display_backend_manages_glfw_)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!glfwInit())<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceILLIXR_1a0f43f628688a8968a09a358bfa012a22" kindref="member">ILLIXR::abort</ref>(</highlight><highlight class="stringliteral">&quot;[debugview]<sp/>Failed<sp/>to<sp/>initialize<sp/>glfw&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RAC_ERRNO_MSG(</highlight><highlight class="stringliteral">&quot;debugview<sp/>after<sp/>glfwInit&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>glfwSetErrorCallback(glfw_error_callback);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>glfwWindowHint(GLFW_OPENGL_DEBUG_CONTEXT,<sp/>GL_TRUE);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>glfwWindowHint(GLFW_VISIBLE,<sp/>GL_TRUE);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>std::string_view<sp/>glsl_version{</highlight><highlight class="stringliteral">&quot;#version<sp/>330<sp/>core&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR,<sp/>4);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR,<sp/>3);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT,<sp/>GL_TRUE);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>glfwWindowHint(GLFW_OPENGL_PROFILE,<sp/>GLFW_OPENGL_CORE_PROFILE);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>glfwWindowHint(GLFW_CLIENT_API,<sp/>GLFW_OPENGL_API);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>gui_window_<sp/>=<sp/>glfwCreateWindow(1600,<sp/>1000,<sp/></highlight><highlight class="stringliteral">&quot;ILLIXR<sp/>Debug<sp/>View&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gui_window_<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::get(name_)-&gt;error(</highlight><highlight class="stringliteral">&quot;couldn&apos;t<sp/>create<sp/>window<sp/>{}:{}&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceILLIXR_1a0f43f628688a8968a09a358bfa012a22" kindref="member">ILLIXR::abort</ref>();</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>glfwSetWindowSize(gui_window_,<sp/>1600,<sp/>1000);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>glfwMakeContextCurrent(gui_window_);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>RAC_ERRNO_MSG(</highlight><highlight class="stringliteral">&quot;debuview<sp/>before<sp/>vsync&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>glfwSwapInterval(1);<sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>vsync!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>RAC_ERRNO_MSG(</highlight><highlight class="stringliteral">&quot;debugview<sp/>after<sp/>vysnc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>glEnable(GL_DEBUG_OUTPUT);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>glDebugMessageCallback(MessageCallback,<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Init<sp/>and<sp/>verify<sp/>GLEW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLenum<sp/>glew_err<sp/>=<sp/>glewInit();</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(glew_err<sp/>!=<sp/>GLEW_OK)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::get(name_)-&gt;error(</highlight><highlight class="stringliteral">&quot;GLEW<sp/>Error:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(glewGetErrorString(glew_err)));</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glfwDestroyWindow(gui_window_);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceILLIXR_1a0f43f628688a8968a09a358bfa012a22" kindref="member">ILLIXR::abort</ref>(</highlight><highlight class="stringliteral">&quot;[debugview]<sp/>Failed<sp/>to<sp/>initialize<sp/>GLEW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>RAC_ERRNO_MSG(</highlight><highlight class="stringliteral">&quot;debugview<sp/>after<sp/>glewInit&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>IMGUI<sp/>context.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>IMGUI_CHECKVERSION();</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::CreateContext();</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Dark<sp/>theme,<sp/>of<sp/>course.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::StyleColorsDark();</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Init<sp/>IMGUI<sp/>for<sp/>OpenGL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplGlfw_InitForOpenGL(gui_window_,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplOpenGL3_Init(glsl_version.data());</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>and<sp/>bind<sp/>global<sp/>VAO<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>glGenVertexArrays(1,<sp/>&amp;demo_vao_);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>glBindVertexArray(demo_vao_);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>demo_shader_program_<sp/>=<sp/>init_and_link(demo_vertex_shader,<sp/>demo_fragment_shader);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::get(name_)-&gt;debug(</highlight><highlight class="stringliteral">&quot;Demo<sp/>app<sp/>shader<sp/>program<sp/>is<sp/>program<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>demo_shader_program_);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>vertex_pos_attr<sp/><sp/><sp/><sp/><sp/>=<sp/>glGetAttribLocation(demo_shader_program_,<sp/></highlight><highlight class="stringliteral">&quot;vertexPosition&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>vertex_normal_attr_<sp/>=<sp/>glGetAttribLocation(demo_shader_program_,<sp/></highlight><highlight class="stringliteral">&quot;vertexNormal&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>model_view_attr_<sp/><sp/><sp/><sp/>=<sp/>glGetUniformLocation(demo_shader_program_,<sp/></highlight><highlight class="stringliteral">&quot;u_modelview&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>projection_attr_<sp/><sp/><sp/><sp/>=<sp/>glGetUniformLocation(demo_shader_program_,<sp/></highlight><highlight class="stringliteral">&quot;u_projection&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>color_uniform_<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>glGetUniformLocation(demo_shader_program_,<sp/></highlight><highlight class="stringliteral">&quot;u_color&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>RAC_ERRNO_MSG(</highlight><highlight class="stringliteral">&quot;debugview<sp/>after<sp/>glGetUniformLocation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Load/initialize<sp/>the<sp/>demo<sp/>scene.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>obj_dir<sp/>=<sp/>switchboard_-&gt;get_env(</highlight><highlight class="stringliteral">&quot;ILLIXR_DEMO_DATA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj_dir.empty())<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceILLIXR_1a0f43f628688a8968a09a358bfa012a22" kindref="member">ILLIXR::abort</ref>(</highlight><highlight class="stringliteral">&quot;Please<sp/>define<sp/>ILLIXR_DEMO_DATA.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>demo_scene_<sp/>=<sp/>ObjScene(std::string(obj_dir),<sp/></highlight><highlight class="stringliteral">&quot;scene.obj&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>headset_<sp/><sp/><sp/><sp/>=<sp/>ObjScene(std::string(obj_dir),<sp/></highlight><highlight class="stringliteral">&quot;headset.obj&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>fun<sp/>test<sp/>pattern<sp/>for<sp/>missing<sp/>camera<sp/>images.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>TEST_PATTERN_WIDTH;<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>TEST_PATTERN_HEIGHT;<sp/>y++)<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_pattern_[x][y]<sp/>=<sp/>((x<sp/>+<sp/>y)<sp/>%<sp/>6<sp/>==<sp/>0)<sp/>?<sp/>255<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>glGenTextures(2,<sp/>&amp;(camera_texture_[0]));</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>glBindTexture(GL_TEXTURE_2D,<sp/>camera_texture_[0]);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>glTexParameteri(GL_TEXTURE_2D,<sp/>GL_TEXTURE_MIN_FILTER,<sp/>GL_LINEAR);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>glTexParameteri(GL_TEXTURE_2D,<sp/>GL_TEXTURE_MAG_FILTER,<sp/>GL_LINEAR);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>glBindTexture(GL_TEXTURE_2D,<sp/>camera_texture_[1]);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>glTexParameteri(GL_TEXTURE_2D,<sp/>GL_TEXTURE_MIN_FILTER,<sp/>GL_LINEAR);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>glTexParameteri(GL_TEXTURE_2D,<sp/>GL_TEXTURE_MAG_FILTER,<sp/>GL_LINEAR);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>glGenTextures(2,<sp/>&amp;(rgb_depth_texture_[0]));</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>glBindTexture(GL_TEXTURE_2D,<sp/>rgb_depth_texture_[0]);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>glTexParameteri(GL_TEXTURE_2D,<sp/>GL_TEXTURE_MIN_FILTER,<sp/>GL_LINEAR);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>glTexParameteri(GL_TEXTURE_2D,<sp/>GL_TEXTURE_MAG_FILTER,<sp/>GL_LINEAR);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>glBindTexture(GL_TEXTURE_2D,<sp/>rgb_depth_texture_[1]);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>glTexParameteri(GL_TEXTURE_2D,<sp/>GL_TEXTURE_MIN_FILTER,<sp/>GL_LINEAR);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>glTexParameteri(GL_TEXTURE_2D,<sp/>GL_TEXTURE_MAG_FILTER,<sp/>GL_LINEAR);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>a<sp/>basic<sp/>perspective<sp/>projection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>math_util::projection_fov(&amp;basic_projection_,<sp/>40.0f,<sp/>40.0f,<sp/>40.0f,<sp/>40.0f,<sp/>0.03f,<sp/>20.0f);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>glfwMakeContextCurrent(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classILLIXR_1_1threadloop_1af001e97f74595e18f589f66ac0595bfb" kindref="member">threadloop::start</ref>();</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>RAC_ERRNO_MSG(</highlight><highlight class="stringliteral">&quot;debuview<sp/>at<sp/>bottom<sp/>of<sp/>start()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal">debugview::~debugview()<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>RAC_ERRNO_MSG(</highlight><highlight class="stringliteral">&quot;debugview<sp/>at<sp/>start<sp/>of<sp/>destructor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplOpenGL3_Shutdown();</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplGlfw_Shutdown();</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::DestroyContext();</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>glfwDestroyWindow(gui_window_);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>RAC_ERRNO_MSG(</highlight><highlight class="stringliteral">&quot;debugview<sp/>during<sp/>destructor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>display<sp/>backend<sp/>is<sp/>GLFW,<sp/>it<sp/>will<sp/>terminate<sp/>the<sp/>GLFW<sp/>context.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>GLFW<sp/>should<sp/>be<sp/>terminated<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!display_backend_manages_glfw_)<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glfwTerminate();</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal">PLUGIN_MAIN(debugview)</highlight></codeline>
    </programlisting>
    <location file="/home/friedel/devel/ILLIXR/plugins/debugview/plugin.cpp"/>
  </compounddef>
</doxygen>
