<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classILLIXR_1_1gen__guid" kind="class" language="C++" prot="public">
    <compoundname>ILLIXR::gen_guid</compoundname>
    <basecompoundref refid="classILLIXR_1_1phonebook_1_1service" prot="public" virt="non-virtual">ILLIXR::phonebook::service</basecompoundref>
    <includes refid="record__logger_8hpp" local="no">record_logger.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classILLIXR_1_1gen__guid_1a20cbb9e39322fbfaa6e820e88ea4035b" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; std::size_t, std::unordered_map&lt; std::size_t, std::unordered_map&lt; std::size_t, std::atomic&lt; std::size_t &gt; &gt; &gt; &gt;</type>
        <definition>std::unordered_map&lt;std::size_t, std::unordered_map&lt;std::size_t, std::unordered_map&lt;std::size_t, std::atomic&lt;std::size_t&gt; &gt; &gt; &gt; ILLIXR::gen_guid::guid_starts_</definition>
        <argsstring></argsstring>
        <name>guid_starts_</name>
        <qualifiedname>ILLIXR::gen_guid::guid_starts_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/record_logger.hpp" line="277" column="9" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/record_logger.hpp" bodystart="277" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classILLIXR_1_1gen__guid_1aafe932bc24df0a0effd6113c85bfeb77" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t ILLIXR::gen_guid::get</definition>
        <argsstring>(std::size_t namespace_=0, std::size_t sub_namespace=0, std::size_t sub_sub_namespace=0)</argsstring>
        <name>get</name>
        <qualifiedname>ILLIXR::gen_guid::get</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>namespace_</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>sub_namespace</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>sub_sub_namespace</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Generate a number, unique from other calls to the same namespace/sub-namespace/sub-sub-namespace. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/record_logger.hpp" line="268" column="17" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/record_logger.hpp" bodystart="268" bodyend="273"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>This class generates unique IDs. </para>
    </briefdescription>
    <detaileddescription>
<para>If you need unique IDs (e.g. for each component), have each component call this class through Phonebook. It returns unique IDs.</para>
<para>You can use namespaces to express logical containment. The return value will be unique <emphasis>between other <computeroutput>get</computeroutput> calls to the same namespace</emphasis>. This is useful for components and sub-components. For example, If component with id_ 0 has 3 subcomponents, one might call get(0) to name_ each of them. Then, suppose component with id_ 1 has 2 subcomponents, one might call get(1) twice to name_ those. The subcomponent IDs could be reused (non-unique), but tuple (component id_, subcomponent id_) will still be unique. You can also just use the global namespace for everything, if you do not care about generating small integers for the IDs. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>ILLIXR::gen_guid</label>
        <link refid="classILLIXR_1_1gen__guid"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>ILLIXR::phonebook::service</label>
        <link refid="classILLIXR_1_1phonebook_1_1service"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>ILLIXR::gen_guid</label>
        <link refid="classILLIXR_1_1gen__guid"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>ILLIXR::phonebook::service</label>
        <link refid="classILLIXR_1_1phonebook_1_1service"/>
      </node>
    </collaborationgraph>
    <location file="/home/friedel/devel/ILLIXR/include/illixr/record_logger.hpp" line="263" column="1" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/record_logger.hpp" bodystart="263" bodyend="278"/>
    <listofallmembers>
      <member refid="classILLIXR_1_1gen__guid_1aafe932bc24df0a0effd6113c85bfeb77" prot="public" virt="non-virtual"><scope>ILLIXR::gen_guid</scope><name>get</name></member>
      <member refid="classILLIXR_1_1gen__guid_1a20cbb9e39322fbfaa6e820e88ea4035b" prot="private" virt="non-virtual"><scope>ILLIXR::gen_guid</scope><name>guid_starts_</name></member>
      <member refid="classILLIXR_1_1phonebook_1_1service_1a6bc6e64a0d9b70223989fc3fb98c2d0d" prot="public" virt="virtual"><scope>ILLIXR::gen_guid</scope><name>~service</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
