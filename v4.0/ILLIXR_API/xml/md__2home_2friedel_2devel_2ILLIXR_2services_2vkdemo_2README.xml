<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="md__2home_2friedel_2devel_2ILLIXR_2services_2vkdemo_2README" kind="page">
    <compoundname>md__2home_2friedel_2devel_2ILLIXR_2services_2vkdemo_2README</compoundname>
    <title>vkdemo</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="md__2home_2friedel_2devel_2ILLIXR_2services_2vkdemo_2README_1autotoc_md55"/> </para>
<sect1 id="md__2home_2friedel_2devel_2ILLIXR_2services_2vkdemo_2README_1autotoc_md56">
<title>Summary</title>
<para>The <computeroutput>vkdemo</computeroutput> service serves as a stand-in for an actual application when <ref refid="namespaceILLIXR" kindref="compound">ILLIXR</ref> is run as a standalone application without an actual <ulink url="../glossary.md#openxr"><emphasis>OpenXR</emphasis></ulink> application. <computeroutput>vkdemo</computeroutput> will subscribe to several <ulink url="../glossary.md#switchboard"><emphasis>switchboard</emphasis></ulink> plugs, render a simple, hard-coded 3D scene (in fact, the same 3D scene that is included in the <ulink url="../illixr_plugins.md#debugview"><computeroutput>debugview</computeroutput></ulink> plugin) and publish the results to the <ulink url="../glossary.md#switchboard"><emphasis>switchboard</emphasis></ulink> API. <computeroutput>vkdemo</computeroutput> is intended to be as lightweight as possible, serving as a baseline debug &quot;dummy application&quot;. During development, it is useful to have some content being published to the <ulink url="../glossary.md#head-mounted-display"><emphasis>HMD</emphasis></ulink> display without needing to use the full OpenXR interface; <computeroutput>vkdemo</computeroutput> fills this requirement.</para>
</sect1>
<sect1 id="md__2home_2friedel_2devel_2ILLIXR_2services_2vkdemo_2README_1autotoc_md57">
<title>Phonebook Service</title>
<para><computeroutput>vkdemo</computeroutput> is registered as a service in phonebook, conforming to the <computeroutput>app</computeroutput> render pass interface. Three functions are exposed:</para>
<para><itemizedlist>
<listitem><para><computeroutput>setup(VkRenderPass render_pass, uint32_t subpass)</computeroutput> initializes the required Vulkan pipeline and resources given a specific render pass and subpass, to which <computeroutput>vkdemo</computeroutput> binds to</para>
</listitem><listitem><para><computeroutput>update_uniforms(const pose_type render_pose)</computeroutput> updates the uniform buffer with the given pose, which is used to render the scene. This must be called before <computeroutput>record_command_buffer</computeroutput> is called.</para>
</listitem><listitem><para><computeroutput>record_command_buffer(VkCommandBuffer commandBuffer, int eye)</computeroutput> records the commands into a given command buffer that would perform the rendering for one eye, for which 0 is left and 1 is right. To achieve stereoscopic rendering, the function is called twice, once for each eye.</para>
</listitem><listitem><para><computeroutput>virtual void destroy()</computeroutput> cleans up the resources allocated by <computeroutput>vkdemo</computeroutput>. Currently, this part is not yet implemented. </para>
</listitem></itemizedlist>
</para>
</sect1>
    </detaileddescription>
    <location file="/home/friedel/devel/ILLIXR/services/vkdemo/README.md"/>
  </compounddef>
</doxygen>
