<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classILLIXR_1_1threadloop" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>ILLIXR::threadloop</compoundname>
    <basecompoundref refid="classILLIXR_1_1plugin" prot="public" virt="non-virtual">ILLIXR::plugin</basecompoundref>
    <derivedcompoundref refid="classILLIXR_1_1data__injection" prot="public" virt="non-virtual">ILLIXR::data_injection</derivedcompoundref>
    <derivedcompoundref refid="classILLIXR_1_1debugview" prot="public" virt="non-virtual">ILLIXR::debugview</derivedcompoundref>
    <derivedcompoundref refid="classILLIXR_1_1gldemo" prot="public" virt="non-virtual">ILLIXR::gldemo</derivedcompoundref>
    <derivedcompoundref refid="classILLIXR_1_1lighthouse" prot="public" virt="non-virtual">ILLIXR::lighthouse</derivedcompoundref>
    <derivedcompoundref refid="classILLIXR_1_1native__renderer" prot="public" virt="non-virtual">ILLIXR::native_renderer</derivedcompoundref>
    <derivedcompoundref refid="classILLIXR_1_1offline__cam" prot="public" virt="non-virtual">ILLIXR::offline_cam</derivedcompoundref>
    <derivedcompoundref refid="classILLIXR_1_1offline__imu" prot="public" virt="non-virtual">ILLIXR::offline_imu</derivedcompoundref>
    <derivedcompoundref refid="classILLIXR_1_1offload__reader" prot="public" virt="non-virtual">ILLIXR::offload_reader</derivedcompoundref>
    <derivedcompoundref refid="classILLIXR_1_1offload__rendering__client" prot="public" virt="non-virtual">ILLIXR::offload_rendering_client</derivedcompoundref>
    <derivedcompoundref refid="classILLIXR_1_1offload__rendering__server" prot="public" virt="non-virtual">ILLIXR::offload_rendering_server</derivedcompoundref>
    <derivedcompoundref refid="classILLIXR_1_1offload__writer" prot="public" virt="non-virtual">ILLIXR::offload_writer</derivedcompoundref>
    <derivedcompoundref refid="classILLIXR_1_1openni__plugin" prot="public" virt="non-virtual">ILLIXR::openni_plugin</derivedcompoundref>
    <derivedcompoundref refid="classILLIXR_1_1openwarp__vk__plugin" prot="public" virt="non-virtual">ILLIXR::openwarp_vk_plugin</derivedcompoundref>
    <derivedcompoundref refid="classILLIXR_1_1server__reader" prot="public" virt="non-virtual">ILLIXR::server_reader</derivedcompoundref>
    <derivedcompoundref refid="classILLIXR_1_1timewarp__gl" prot="public" virt="non-virtual">ILLIXR::timewarp_gl</derivedcompoundref>
    <derivedcompoundref refid="classILLIXR_1_1timewarp__vk__plugin" prot="public" virt="non-virtual">ILLIXR::timewarp_vk_plugin</derivedcompoundref>
    <derivedcompoundref refid="classILLIXR_1_1webcam" prot="public" virt="non-virtual">ILLIXR::webcam</derivedcompoundref>
    <derivedcompoundref refid="classILLIXR_1_1zed__camera__thread" prot="public" virt="non-virtual">ILLIXR::zed_camera_thread</derivedcompoundref>
    <derivedcompoundref refid="classILLIXR_1_1zed__imu__thread" prot="public" virt="non-virtual">ILLIXR::zed_imu_thread</derivedcompoundref>
    <includes refid="threadloop_8hpp" local="no">threadloop.hpp</includes>
    <sectiondef kind="protected-type">
      <memberdef kind="enum" id="classILLIXR_1_1threadloop_1a26c08942158dc019cbc78c9880417652" prot="protected" static="no" strong="yes">
        <type></type>
        <name>skip_option</name>
        <qualifiedname>ILLIXR::threadloop::skip_option</qualifiedname>
        <enumvalue id="classILLIXR_1_1threadloop_1a26c08942158dc019cbc78c9880417652aa53108f7543b75adbb34afc035d4cdf6" prot="protected">
          <name>run</name>
          <briefdescription>
<para>Run iteration NOW. Only then does CPU timer begin counting. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classILLIXR_1_1threadloop_1a26c08942158dc019cbc78c9880417652abe7430356a528e49af40fab3259b72b3" prot="protected">
          <name>skip_and_spin</name>
          <briefdescription>
<para>AKA &quot;busy wait&quot;. Skip but try again very quickly. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classILLIXR_1_1threadloop_1a26c08942158dc019cbc78c9880417652a9e4878510e4ed1c00058d61753440dcf" prot="protected">
          <name>skip_and_yield</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Yielding gives up a scheduling quantum, which is determined by the OS, but usually on the order of 1-10ms. This is nicer to the other threads in the system. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classILLIXR_1_1threadloop_1a26c08942158dc019cbc78c9880417652aef399b2d446bb37b7c32ad2cc1b6045b" prot="protected">
          <name>stop</name>
          <briefdescription>
<para>Calls stop. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" line="95" column="5" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" bodystart="95" bodyend="108"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classILLIXR_1_1threadloop_1a54e0814711e7a582630d38d45ddbe3f3" prot="protected" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t ILLIXR::threadloop::iteration_no</definition>
        <argsstring></argsstring>
        <name>iteration_no</name>
        <qualifiedname>ILLIXR::threadloop::iteration_no</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" line="138" column="17" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1threadloop_1a8f6ce8b95d3d9aadf83e4e1414477cd0" prot="protected" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t ILLIXR::threadloop::skip_no</definition>
        <argsstring></argsstring>
        <name>skip_no</name>
        <qualifiedname>ILLIXR::threadloop::skip_no</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" line="139" column="17" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" bodystart="139" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classILLIXR_1_1threadloop_1addfbade169288512c9be438f4ae9bc07" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; ILLIXR::threadloop::internal_stop_</definition>
        <argsstring></argsstring>
        <name>internal_stop_</name>
        <qualifiedname>ILLIXR::threadloop::internal_stop_</qualifiedname>
        <initializer>{false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" line="195" column="32" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" bodystart="195" bodyend="195"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1threadloop_1a468309a771ef1d60c4cc107cf2e9cab2" prot="private" static="no" mutable="no">
        <type>std::thread</type>
        <definition>std::thread ILLIXR::threadloop::thread_</definition>
        <argsstring></argsstring>
        <name>thread_</name>
        <qualifiedname>ILLIXR::threadloop::thread_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" line="196" column="38" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1threadloop_1a2390e3eff6ab0c0cc11f061f34cf7b39" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; const <ref refid="classILLIXR_1_1stoplight" kindref="compound">stoplight</ref> &gt;</type>
        <definition>std::shared_ptr&lt;const stoplight&gt; ILLIXR::threadloop::stoplight_</definition>
        <argsstring></argsstring>
        <name>stoplight_</name>
        <qualifiedname>ILLIXR::threadloop::stoplight_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" line="197" column="21" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" bodystart="197" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classILLIXR_1_1threadloop_1a8e69bfe104a92c0b98caa5583439c34a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ILLIXR::threadloop::threadloop</definition>
        <argsstring>(const std::string &amp;name, phonebook *pb)</argsstring>
        <name>threadloop</name>
        <qualifiedname>ILLIXR::threadloop::threadloop</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classILLIXR_1_1phonebook" kindref="compound">phonebook</ref> *</type>
          <declname>pb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" line="41" column="5" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" bodystart="41" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1threadloop_1af001e97f74595e18f589f66ac0595bfb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void ILLIXR::threadloop::start</definition>
        <argsstring>() override</argsstring>
        <name>start</name>
        <qualifiedname>ILLIXR::threadloop::start</qualifiedname>
        <reimplements refid="classILLIXR_1_1plugin_1a30d7294817fc5e8a8216fbfbca233cdc">start</reimplements>
        <briefdescription>
<para>Starts the thread. </para>
        </briefdescription>
        <detaileddescription>
<para>This cannot go into the constructor because it starts a thread which calls <computeroutput><ref refid="classILLIXR_1_1threadloop_1a609dc44adc6c56cf304408c7ac5f15be" kindref="member">_p_one_iteration()</ref></computeroutput> which is virtual in the child class.</para>
<para>Calling a virtual child method from the parent constructor will not work as expected <ulink url="https://stackoverflow.com/questions/962132/calling-virtual-functions-inside-constructors">1</ulink>. Instead, the ISO CPP FAQ recommends calling a <computeroutput><ref refid="classILLIXR_1_1threadloop_1af001e97f74595e18f589f66ac0595bfb" kindref="member">start()</ref></computeroutput> method immediately after construction <ulink url="https://isocpp.org/wiki/faq/strange-inheritance#calling-virtuals-from-ctor-idiom">2</ulink>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" line="58" column="10" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" bodystart="58" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1threadloop_1a7a968606c7ddfbd1ac6b0fb067ecc5a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void ILLIXR::threadloop::stop</definition>
        <argsstring>() override</argsstring>
        <name>stop</name>
        <qualifiedname>ILLIXR::threadloop::stop</qualifiedname>
        <reimplements refid="classILLIXR_1_1plugin_1a2cefabfb6dd9800b1ebc8b07031661c4">stop</reimplements>
        <briefdescription>
<para>Joins the thread. </para>
        </briefdescription>
        <detaileddescription>
<para>Must have already stopped the stoplight. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" line="72" column="10" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" bodystart="72" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1threadloop_1a3e12891e504c782da98e21328dbcf0af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void ILLIXR::threadloop::internal_stop</definition>
        <argsstring>()</argsstring>
        <name>internal_stop</name>
        <qualifiedname>ILLIXR::threadloop::internal_stop</qualifiedname>
        <briefdescription>
<para>Stops the thread. </para>
        </briefdescription>
        <detaileddescription>
<para>A thread should call this if it wants to stop itself (due to out of data for example). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" line="85" column="18" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" bodystart="85" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1threadloop_1afbf7b56801b484b60e9cf43448332195" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ILLIXR::threadloop::~threadloop</definition>
        <argsstring>() override</argsstring>
        <name>~threadloop</name>
        <qualifiedname>ILLIXR::threadloop::~threadloop</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" line="89" column="5" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" bodystart="89" bodyend="92"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="classILLIXR_1_1threadloop_1a9ff83bb9e47beff3efccbd26bc3e874a" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classILLIXR_1_1threadloop_1a26c08942158dc019cbc78c9880417652" kindref="member">skip_option</ref></type>
        <definition>virtual skip_option ILLIXR::threadloop::_p_should_skip</definition>
        <argsstring>()</argsstring>
        <name>_p_should_skip</name>
        <qualifiedname>ILLIXR::threadloop::_p_should_skip</qualifiedname>
        <reimplementedby refid="classILLIXR_1_1offload__rendering__server_1adf6d5c0717919c71c6d10d49f968a4e1">_p_should_skip</reimplementedby>
        <briefdescription>
<para>Gets called in a tight loop, to gate the invocation of <computeroutput><ref refid="classILLIXR_1_1threadloop_1a609dc44adc6c56cf304408c7ac5f15be" kindref="member">_p_one_iteration()</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" line="113" column="25" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" bodystart="113" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1threadloop_1a00a89b3f3e9caa870f4c70bbc2f8fe97" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void ILLIXR::threadloop::_p_thread_setup</definition>
        <argsstring>()</argsstring>
        <name>_p_thread_setup</name>
        <qualifiedname>ILLIXR::threadloop::_p_thread_setup</qualifiedname>
        <reimplementedby refid="classILLIXR_1_1offload__rendering__server_1a79eb0321b2e77e6453a65a8c873b049e">_p_thread_setup</reimplementedby>
        <briefdescription>
<para>Gets called at setup time, from the new thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" line="120" column="18" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" bodystart="120" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1threadloop_1a609dc44adc6c56cf304408c7ac5f15be" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void ILLIXR::threadloop::_p_one_iteration</definition>
        <argsstring>()=0</argsstring>
        <name>_p_one_iteration</name>
        <qualifiedname>ILLIXR::threadloop::_p_one_iteration</qualifiedname>
        <reimplementedby refid="classILLIXR_1_1offload__rendering__server_1ae851a6d01f0d942885b4e9ec5a6245c4">_p_one_iteration</reimplementedby>
        <briefdescription>
<para>Override with the computation the thread does every loop. </para>
        </briefdescription>
        <detaileddescription>
<para>This gets called in rapid succession. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" line="127" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1threadloop_1a75009fa785455bdb4b285424f0494bf7" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ILLIXR::threadloop::should_terminate</definition>
        <argsstring>()</argsstring>
        <name>should_terminate</name>
        <qualifiedname>ILLIXR::threadloop::should_terminate</qualifiedname>
        <briefdescription>
<para>Whether the thread has been asked to terminate. </para>
        </briefdescription>
        <detaileddescription>
<para>Check this before doing long-running computation; it makes termination more responsive. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" line="134" column="10" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" bodystart="134" bodyend="136"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classILLIXR_1_1threadloop_1ace62d94a271fd7a253eb1ee71589da61" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ILLIXR::threadloop::thread_main</definition>
        <argsstring>()</argsstring>
        <name>thread_main</name>
        <qualifiedname>ILLIXR::threadloop::thread_main</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" line="142" column="10" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" bodystart="142" bodyend="193"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A reusable threadloop for plugins. </para>
    </briefdescription>
    <detaileddescription>
<para>The thread continuously runs <computeroutput><ref refid="classILLIXR_1_1threadloop_1a609dc44adc6c56cf304408c7ac5f15be" kindref="member">_p_one_iteration()</ref></computeroutput> and is stoppable by <computeroutput><ref refid="classILLIXR_1_1threadloop_1a7a968606c7ddfbd1ac6b0fb067ecc5a5" kindref="member">stop()</ref></computeroutput>.</para>
<para>This factors out the common code I noticed in many different plugins. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>ILLIXR::offload_rendering_server</label>
        <link refid="classILLIXR_1_1offload__rendering__server"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>ILLIXR::plugin</label>
        <link refid="classILLIXR_1_1plugin"/>
      </node>
      <node id="1">
        <label>ILLIXR::threadloop</label>
        <link refid="classILLIXR_1_1threadloop"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>ILLIXR::phonebook</label>
        <link refid="classILLIXR_1_1phonebook"/>
      </node>
      <node id="2">
        <label>ILLIXR::plugin</label>
        <link refid="classILLIXR_1_1plugin"/>
        <childnode refid="3" relation="usage">
          <edgelabel>phonebook_</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>ILLIXR::threadloop</label>
        <link refid="classILLIXR_1_1threadloop"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" line="39" column="1" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/threadloop.hpp" bodystart="39" bodyend="198"/>
    <listofallmembers>
      <member refid="classILLIXR_1_1threadloop_1a609dc44adc6c56cf304408c7ac5f15be" prot="protected" virt="pure-virtual"><scope>ILLIXR::threadloop</scope><name>_p_one_iteration</name></member>
      <member refid="classILLIXR_1_1threadloop_1a9ff83bb9e47beff3efccbd26bc3e874a" prot="protected" virt="virtual"><scope>ILLIXR::threadloop</scope><name>_p_should_skip</name></member>
      <member refid="classILLIXR_1_1threadloop_1a00a89b3f3e9caa870f4c70bbc2f8fe97" prot="protected" virt="virtual"><scope>ILLIXR::threadloop</scope><name>_p_thread_setup</name></member>
      <member refid="classILLIXR_1_1plugin_1afe52734e7edc87bd0bf974caf112961b" prot="protected" virt="non-virtual"><scope>ILLIXR::threadloop</scope><name>gen_guid_</name></member>
      <member refid="classILLIXR_1_1plugin_1aebda022998bd35983e83f391dc0e5193" prot="public" virt="non-virtual"><scope>ILLIXR::threadloop</scope><name>get_name</name></member>
      <member refid="classILLIXR_1_1plugin_1aaedb3f9178bdd11e53815e158454aaf3" prot="protected" virt="non-virtual"><scope>ILLIXR::threadloop</scope><name>id_</name></member>
      <member refid="classILLIXR_1_1threadloop_1a3e12891e504c782da98e21328dbcf0af" prot="public" virt="virtual"><scope>ILLIXR::threadloop</scope><name>internal_stop</name></member>
      <member refid="classILLIXR_1_1threadloop_1addfbade169288512c9be438f4ae9bc07" prot="private" virt="non-virtual"><scope>ILLIXR::threadloop</scope><name>internal_stop_</name></member>
      <member refid="classILLIXR_1_1threadloop_1a54e0814711e7a582630d38d45ddbe3f3" prot="protected" virt="non-virtual"><scope>ILLIXR::threadloop</scope><name>iteration_no</name></member>
      <member refid="classILLIXR_1_1plugin_1aa963c518af83966173840a8558490888" prot="protected" virt="non-virtual"><scope>ILLIXR::threadloop</scope><name>name_</name></member>
      <member refid="classILLIXR_1_1plugin_1a6f7a2a9012350591c00d67a5bc0fd5a6" prot="protected" virt="non-virtual"><scope>ILLIXR::threadloop</scope><name>phonebook_</name></member>
      <member refid="classILLIXR_1_1plugin_1abc91c0e5be180a8e0bbeaf114a127f17" prot="public" virt="non-virtual"><scope>ILLIXR::threadloop</scope><name>plugin</name></member>
      <member refid="classILLIXR_1_1plugin_1a8d40c2421cde09079372d12bfe7d45fe" prot="protected" virt="non-virtual"><scope>ILLIXR::threadloop</scope><name>plugin_logger_</name></member>
      <member refid="classILLIXR_1_1plugin_1aef671d0cd9b6de45d3ade16dedbf4974" prot="protected" virt="non-virtual"><scope>ILLIXR::threadloop</scope><name>record_logger_</name></member>
      <member refid="classILLIXR_1_1threadloop_1a75009fa785455bdb4b285424f0494bf7" prot="protected" virt="non-virtual"><scope>ILLIXR::threadloop</scope><name>should_terminate</name></member>
      <member refid="classILLIXR_1_1threadloop_1a8f6ce8b95d3d9aadf83e4e1414477cd0" prot="protected" virt="non-virtual"><scope>ILLIXR::threadloop</scope><name>skip_no</name></member>
      <member refid="classILLIXR_1_1threadloop_1a26c08942158dc019cbc78c9880417652" prot="protected" virt="non-virtual"><scope>ILLIXR::threadloop</scope><name>skip_option</name></member>
      <member refid="classILLIXR_1_1plugin_1a7c1c7c1a0ec2e43bfa1118586a28932f" prot="public" virt="non-virtual"><scope>ILLIXR::threadloop</scope><name>spd_add_file_sink</name></member>
      <member refid="classILLIXR_1_1plugin_1a569297189ef365cf93f6a95202c76d76" prot="public" virt="non-virtual"><scope>ILLIXR::threadloop</scope><name>spdlogger</name></member>
      <member refid="classILLIXR_1_1threadloop_1af001e97f74595e18f589f66ac0595bfb" prot="public" virt="virtual"><scope>ILLIXR::threadloop</scope><name>start</name></member>
      <member refid="classILLIXR_1_1threadloop_1a7a968606c7ddfbd1ac6b0fb067ecc5a5" prot="public" virt="virtual"><scope>ILLIXR::threadloop</scope><name>stop</name></member>
      <member refid="classILLIXR_1_1threadloop_1a2390e3eff6ab0c0cc11f061f34cf7b39" prot="private" virt="non-virtual"><scope>ILLIXR::threadloop</scope><name>stoplight_</name></member>
      <member refid="classILLIXR_1_1threadloop_1a468309a771ef1d60c4cc107cf2e9cab2" prot="private" virt="non-virtual"><scope>ILLIXR::threadloop</scope><name>thread_</name></member>
      <member refid="classILLIXR_1_1threadloop_1ace62d94a271fd7a253eb1ee71589da61" prot="private" virt="non-virtual"><scope>ILLIXR::threadloop</scope><name>thread_main</name></member>
      <member refid="classILLIXR_1_1threadloop_1a8e69bfe104a92c0b98caa5583439c34a" prot="public" virt="non-virtual"><scope>ILLIXR::threadloop</scope><name>threadloop</name></member>
      <member refid="classILLIXR_1_1plugin_1a44d7b00c86e227bbc1a0b221da43d454" prot="public" virt="virtual"><scope>ILLIXR::threadloop</scope><name>~plugin</name></member>
      <member refid="classILLIXR_1_1threadloop_1afbf7b56801b484b60e9cf43448332195" prot="public" virt="non-virtual"><scope>ILLIXR::threadloop</scope><name>~threadloop</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
