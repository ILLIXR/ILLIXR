<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classILLIXR_1_1data__format_1_1proper__quaternion" kind="class" language="C++" prot="public">
    <compoundname>ILLIXR::data_format::proper_quaternion</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Eigen::Quaternion&lt; Scalar_, Eigen::AutoAlign &gt;</basecompoundref>
    <includes refid="proper__quaternion_8hpp" local="no">proper_quaternion.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename Scalar_</type>
      </param>
      <param>
        <type>int</type>
        <declname>Options_</declname>
        <defname>Options_</defname>
        <defval>Eigen::AutoAlign</defval>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classILLIXR_1_1data__format_1_1proper__quaternion_1a5c201d0e20f18e64137138182a930f51" prot="public" static="no">
        <type>Eigen::Quaternion&lt; Scalar_ &gt;::Base</type>
        <definition>typedef Eigen::Quaternion&lt;Scalar_&gt;::Base ILLIXR::data_format::proper_quaternion&lt; Scalar_, Options_ &gt;::Base</definition>
        <argsstring></argsstring>
        <name>Base</name>
        <qualifiedname>ILLIXR::data_format::proper_quaternion::Base</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" line="19" column="47" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" bodystart="19" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classILLIXR_1_1data__format_1_1proper__quaternion_1a90327d2cab04380f896908912a50c7d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classILLIXR_1_1data__format_1_1proper__quaternion" kindref="compound">proper_quaternion</ref> &amp;</type>
        <definition>proper_quaternion &amp; ILLIXR::data_format::proper_quaternion&lt; Scalar_, Options_ &gt;::operator=</definition>
        <argsstring>(const proper_quaternion &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>ILLIXR::data_format::proper_quaternion::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classILLIXR_1_1data__format_1_1proper__quaternion" kindref="compound">proper_quaternion</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>A ProperQuaternion instance </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a copy </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" line="28" column="30" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" bodystart="28" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1data__format_1_1proper__quaternion_1ad0a9e3ae08e836b0faa70c034493d441" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ILLIXR::data_format::proper_quaternion&lt; Scalar_, Options_ &gt;::proper_quaternion</definition>
        <argsstring>()=default</argsstring>
        <name>proper_quaternion</name>
        <qualifiedname>ILLIXR::data_format::proper_quaternion::proper_quaternion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" line="36" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1data__format_1_1proper__quaternion_1a9a1f1f06ac535a1712afb78a796519e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ILLIXR::data_format::proper_quaternion&lt; Scalar_, Options_ &gt;::proper_quaternion</definition>
        <argsstring>(const proper_quaternion &amp;other)=default</argsstring>
        <name>proper_quaternion</name>
        <qualifiedname>ILLIXR::data_format::proper_quaternion::proper_quaternion</qualifiedname>
        <param>
          <type>const <ref refid="classILLIXR_1_1data__format_1_1proper__quaternion" kindref="compound">proper_quaternion</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" line="37" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1data__format_1_1proper__quaternion_1a214999eff0db3c3388d40db7910594a1" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ILLIXR::data_format::proper_quaternion&lt; Scalar_, Options_ &gt;::proper_quaternion</definition>
        <argsstring>(const Eigen::Quaternion&lt; Scalar_, Options_ &gt; &amp;other)</argsstring>
        <name>proper_quaternion</name>
        <qualifiedname>ILLIXR::data_format::proper_quaternion::proper_quaternion</qualifiedname>
        <param>
          <type>const Eigen::Quaternion&lt; Scalar_, Options_ &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy constructor from the base class <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>An Eigen::Quaternion instance </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" line="43" column="15" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" bodystart="43" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1data__format_1_1proper__quaternion_1ac34f5bdda430fd8cb211380553b0f2a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ILLIXR::data_format::proper_quaternion&lt; Scalar_, Options_ &gt;::proper_quaternion</definition>
        <argsstring>(const Scalar_ &amp;w, const Scalar_ &amp;x, const Scalar_ &amp;y, const Scalar_ &amp;z)</argsstring>
        <name>proper_quaternion</name>
        <qualifiedname>ILLIXR::data_format::proper_quaternion::proper_quaternion</qualifiedname>
        <param>
          <type>const Scalar_ &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const Scalar_ &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Scalar_ &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const Scalar_ &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor from individual components <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The w component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The x component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The y component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The z component </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" line="53" column="6" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" bodystart="53" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1data__format_1_1proper__quaternion_1a596f7d824849288674500b1616f93f77" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>ILLIXR::data_format::proper_quaternion&lt; Scalar_, Options_ &gt;::proper_quaternion</definition>
        <argsstring>(const Scalar_ &amp;w, const Eigen::MatrixBase&lt; Derived &gt; &amp;vec)</argsstring>
        <name>proper_quaternion</name>
        <qualifiedname>ILLIXR::data_format::proper_quaternion::proper_quaternion</qualifiedname>
        <param>
          <type>const Scalar_ &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor from a scalar and vector <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The w component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The x, y, and z components </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" line="63" column="6" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" bodystart="63" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1data__format_1_1proper__quaternion_1a8ed11957494b49f1f14b87e38bacc33a" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ILLIXR::data_format::proper_quaternion&lt; Scalar_, Options_ &gt;::proper_quaternion</definition>
        <argsstring>(const Scalar_ *data)</argsstring>
        <name>proper_quaternion</name>
        <qualifiedname>ILLIXR::data_format::proper_quaternion::proper_quaternion</qualifiedname>
        <param>
          <type>const Scalar_ *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor from a pointer array (assumes 4 elements) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the first element </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" line="70" column="15" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" bodystart="70" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1data__format_1_1proper__quaternion_1a96b00e23e9b0b028d71067c0d268c65b" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ILLIXR::data_format::proper_quaternion&lt; Scalar_, Options_ &gt;::proper_quaternion</definition>
        <argsstring>(const Eigen::Matrix&lt; Scalar_, 4, 1 &gt; &amp;vec)</argsstring>
        <name>proper_quaternion</name>
        <qualifiedname>ILLIXR::data_format::proper_quaternion::proper_quaternion</qualifiedname>
        <param>
          <type>const Eigen::Matrix&lt; Scalar_, 4, 1 &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor from a vector. Assumes the vector is x, y, z, w order. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The input vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" line="77" column="15" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" bodystart="77" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1data__format_1_1proper__quaternion_1aa317d268748c35aa957c3198948ddbf0" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>ILLIXR::data_format::proper_quaternion&lt; Scalar_, Options_ &gt;::proper_quaternion</definition>
        <argsstring>(const Eigen::QuaternionBase&lt; Derived &gt; &amp;other)</argsstring>
        <name>proper_quaternion</name>
        <qualifiedname>ILLIXR::data_format::proper_quaternion::proper_quaternion</qualifiedname>
        <param>
          <type>const Eigen::QuaternionBase&lt; Derived &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor which casts the data type <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" line="86" column="15" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" bodystart="86" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1data__format_1_1proper__quaternion_1ad4ba5e28336154fc4c31f12c63531ad8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classILLIXR_1_1data__format_1_1proper__quaternion" kindref="compound">proper_quaternion</ref> &amp;</type>
        <definition>proper_quaternion &amp; ILLIXR::data_format::proper_quaternion&lt; Scalar_, Options_ &gt;::operator*=</definition>
        <argsstring>(const Scalar_ &amp;a)</argsstring>
        <name>operator*=</name>
        <qualifiedname>ILLIXR::data_format::proper_quaternion::operator*=</qualifiedname>
        <param>
          <type>const Scalar_ &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Scalar multiplication and assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar to multiply the Quaternion by </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the updated object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" line="94" column="23" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" bodystart="94" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1data__format_1_1proper__quaternion_1ad0e2f9c1d6f3a73d0994b294a364fb1c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classILLIXR_1_1data__format_1_1proper__quaternion" kindref="compound">proper_quaternion</ref></type>
        <definition>proper_quaternion ILLIXR::data_format::proper_quaternion&lt; Scalar_, Options_ &gt;::operator*</definition>
        <argsstring>(const int a) const</argsstring>
        <name>operator*</name>
        <qualifiedname>ILLIXR::data_format::proper_quaternion::operator*</qualifiedname>
        <param>
          <type>const int</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Integer multiplication, returning a new instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer to multiply the quaternion by </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New instance containing the result </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" line="107" column="23" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" bodystart="107" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1data__format_1_1proper__quaternion_1aad06c9a17775685c7183a1b29fe15e75" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classILLIXR_1_1data__format_1_1proper__quaternion" kindref="compound">proper_quaternion</ref></type>
        <definition>proper_quaternion ILLIXR::data_format::proper_quaternion&lt; Scalar_, Options_ &gt;::operator*</definition>
        <argsstring>(const float a) const</argsstring>
        <name>operator*</name>
        <qualifiedname>ILLIXR::data_format::proper_quaternion::operator*</qualifiedname>
        <param>
          <type>const float</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Float multiplication, returning a new instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Float to multiply the quaternion by </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New instance containing the result </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" line="116" column="23" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" bodystart="116" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1data__format_1_1proper__quaternion_1a5c74052413ce0c275229627c49faaeb5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classILLIXR_1_1data__format_1_1proper__quaternion" kindref="compound">proper_quaternion</ref></type>
        <definition>proper_quaternion ILLIXR::data_format::proper_quaternion&lt; Scalar_, Options_ &gt;::operator*</definition>
        <argsstring>(const double a) const</argsstring>
        <name>operator*</name>
        <qualifiedname>ILLIXR::data_format::proper_quaternion::operator*</qualifiedname>
        <param>
          <type>const double</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Double multiplication, returning a new instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Double to multiply the quaternion by </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New instance containing the result </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" line="125" column="23" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" bodystart="125" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1data__format_1_1proper__quaternion_1ae126791d9ad83a0fa151a0b1441d21ff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classILLIXR_1_1data__format_1_1proper__quaternion" kindref="compound">proper_quaternion</ref>&lt; Scalar_ &gt;</type>
        <definition>proper_quaternion&lt; Scalar_ &gt; ILLIXR::data_format::proper_quaternion&lt; Scalar_, Options_ &gt;::operator*</definition>
        <argsstring>(const Eigen::Quaternion&lt; Scalar_ &gt; &amp;other) const</argsstring>
        <name>operator*</name>
        <qualifiedname>ILLIXR::data_format::proper_quaternion::operator*</qualifiedname>
        <param>
          <type>const Eigen::Quaternion&lt; Scalar_ &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Multiplication operator with and Eigen::Quaternion. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The Eigen::Quaternion to multiply by </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The resulting Quaternion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" line="134" column="23" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" bodystart="134" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1data__format_1_1proper__quaternion_1a716e4dde8fcc89c6bf218e975bcce36f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::Matrix&lt; Scalar_, 4, 1 &gt;</type>
        <definition>Eigen::Matrix&lt; Scalar_, 4, 1 &gt; ILLIXR::data_format::proper_quaternion&lt; Scalar_, Options_ &gt;::asVector</definition>
        <argsstring>() const</argsstring>
        <name>asVector</name>
        <qualifiedname>ILLIXR::data_format::proper_quaternion::asVector</qualifiedname>
        <briefdescription>
<para>Convert theis object into a 4-element vector, with the order x, y, z, w. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The vector representing this instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" line="142" column="19" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" bodystart="142" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1data__format_1_1proper__quaternion_1a3443b9b632506dd9525d0dd9a0579b83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classILLIXR_1_1data__format_1_1proper__quaternion" kindref="compound">proper_quaternion</ref>&lt; Scalar_ &gt; &amp;</type>
        <definition>proper_quaternion&lt; Scalar_ &gt; &amp; ILLIXR::data_format::proper_quaternion&lt; Scalar_, Options_ &gt;::operator+=</definition>
        <argsstring>(const proper_quaternion&lt; Scalar_ &gt; &amp;other)</argsstring>
        <name>operator+=</name>
        <qualifiedname>ILLIXR::data_format::proper_quaternion::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classILLIXR_1_1data__format_1_1proper__quaternion" kindref="compound">proper_quaternion</ref>&lt; Scalar_ &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>In place addition operator with another ProperQuaternion. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>A ProperQuaternion to add to this one </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the updated instance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" line="151" column="23" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" bodystart="151" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1data__format_1_1proper__quaternion_1adefbc893df7b6ab6187ee71a7bd7cee5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classILLIXR_1_1data__format_1_1proper__quaternion" kindref="compound">proper_quaternion</ref>&lt; Scalar_ &gt;</type>
        <definition>proper_quaternion&lt; Scalar_ &gt; ILLIXR::data_format::proper_quaternion&lt; Scalar_, Options_ &gt;::operator+</definition>
        <argsstring>(const proper_quaternion&lt; Scalar_ &gt; &amp;other) const</argsstring>
        <name>operator+</name>
        <qualifiedname>ILLIXR::data_format::proper_quaternion::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classILLIXR_1_1data__format_1_1proper__quaternion" kindref="compound">proper_quaternion</ref>&lt; Scalar_ &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Addition operator with another ProperQuaternion. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>A ProperQuaternion to add to this one </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The resulting ProperQuaternion as a new instance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" line="164" column="23" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" bodystart="164" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1data__format_1_1proper__quaternion_1a1b58fbf08947f1f571c6b4788a87cd45" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classILLIXR_1_1data__format_1_1proper__quaternion" kindref="compound">proper_quaternion</ref>&lt; T &gt;</type>
        <definition>proper_quaternion&lt; T &gt; ILLIXR::data_format::proper_quaternion&lt; Scalar_, Options_ &gt;::cast</definition>
        <argsstring>()</argsstring>
        <name>cast</name>
        <qualifiedname>ILLIXR::data_format::proper_quaternion::cast</qualifiedname>
        <briefdescription>
<para>Cast a ProperQuaternion from one type to another. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new ProperQuaternion instance of the correct type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" line="176" column="23" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" bodystart="176" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1data__format_1_1proper__quaternion_1a682f50b5b1d69abbf5ac28d0d3ab9fc1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ILLIXR::data_format::proper_quaternion&lt; Scalar_, Options_ &gt;::normalize</definition>
        <argsstring>()</argsstring>
        <name>normalize</name>
        <qualifiedname>ILLIXR::data_format::proper_quaternion::normalize</qualifiedname>
        <briefdescription>
<para>Normalize the quaternion, but check w first, as it needs to be positive for our conventions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" line="184" column="17" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" bodystart="184" bodyend="189"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A more complete implementation of the Eigen::Quaternion. </para>
    </briefdescription>
    <detaileddescription>
<para>The base class, Eigen::Quaternion, is missing some arithmetic functionality, like scalar multiplication, this implementation adds this functionality.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Scalar_</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data the Quaternion holds (typically double ot float) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Options_</parametername>
</parameternamelist>
<parameterdescription>
<para>Data alignment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" line="17" column="1" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" bodystart="17" bodyend="190"/>
    <listofallmembers>
      <member refid="classILLIXR_1_1data__format_1_1proper__quaternion_1a716e4dde8fcc89c6bf218e975bcce36f" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::proper_quaternion</scope><name>asVector</name></member>
      <member refid="classILLIXR_1_1data__format_1_1proper__quaternion_1a5c201d0e20f18e64137138182a930f51" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::proper_quaternion</scope><name>Base</name></member>
      <member refid="classILLIXR_1_1data__format_1_1proper__quaternion_1a1b58fbf08947f1f571c6b4788a87cd45" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::proper_quaternion</scope><name>cast</name></member>
      <member refid="classILLIXR_1_1data__format_1_1proper__quaternion_1a682f50b5b1d69abbf5ac28d0d3ab9fc1" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::proper_quaternion</scope><name>normalize</name></member>
      <member refid="classILLIXR_1_1data__format_1_1proper__quaternion_1ad0e2f9c1d6f3a73d0994b294a364fb1c" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::proper_quaternion</scope><name>operator*</name></member>
      <member refid="classILLIXR_1_1data__format_1_1proper__quaternion_1aad06c9a17775685c7183a1b29fe15e75" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::proper_quaternion</scope><name>operator*</name></member>
      <member refid="classILLIXR_1_1data__format_1_1proper__quaternion_1a5c74052413ce0c275229627c49faaeb5" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::proper_quaternion</scope><name>operator*</name></member>
      <member refid="classILLIXR_1_1data__format_1_1proper__quaternion_1ae126791d9ad83a0fa151a0b1441d21ff" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::proper_quaternion</scope><name>operator*</name></member>
      <member refid="classILLIXR_1_1data__format_1_1proper__quaternion_1ad4ba5e28336154fc4c31f12c63531ad8" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::proper_quaternion</scope><name>operator*=</name></member>
      <member refid="classILLIXR_1_1data__format_1_1proper__quaternion_1adefbc893df7b6ab6187ee71a7bd7cee5" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::proper_quaternion</scope><name>operator+</name></member>
      <member refid="classILLIXR_1_1data__format_1_1proper__quaternion_1a3443b9b632506dd9525d0dd9a0579b83" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::proper_quaternion</scope><name>operator+=</name></member>
      <member refid="classILLIXR_1_1data__format_1_1proper__quaternion_1a90327d2cab04380f896908912a50c7d0" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::proper_quaternion</scope><name>operator=</name></member>
      <member refid="classILLIXR_1_1data__format_1_1proper__quaternion_1ad0a9e3ae08e836b0faa70c034493d441" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::proper_quaternion</scope><name>proper_quaternion</name></member>
      <member refid="classILLIXR_1_1data__format_1_1proper__quaternion_1a9a1f1f06ac535a1712afb78a796519e0" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::proper_quaternion</scope><name>proper_quaternion</name></member>
      <member refid="classILLIXR_1_1data__format_1_1proper__quaternion_1a214999eff0db3c3388d40db7910594a1" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::proper_quaternion</scope><name>proper_quaternion</name></member>
      <member refid="classILLIXR_1_1data__format_1_1proper__quaternion_1ac34f5bdda430fd8cb211380553b0f2a0" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::proper_quaternion</scope><name>proper_quaternion</name></member>
      <member refid="classILLIXR_1_1data__format_1_1proper__quaternion_1a596f7d824849288674500b1616f93f77" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::proper_quaternion</scope><name>proper_quaternion</name></member>
      <member refid="classILLIXR_1_1data__format_1_1proper__quaternion_1a8ed11957494b49f1f14b87e38bacc33a" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::proper_quaternion</scope><name>proper_quaternion</name></member>
      <member refid="classILLIXR_1_1data__format_1_1proper__quaternion_1a96b00e23e9b0b028d71067c0d268c65b" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::proper_quaternion</scope><name>proper_quaternion</name></member>
      <member refid="classILLIXR_1_1data__format_1_1proper__quaternion_1aa317d268748c35aa957c3198948ddbf0" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::proper_quaternion</scope><name>proper_quaternion</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
