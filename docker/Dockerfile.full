ARG CUDA_MAJOR=12
ARG CUDA_MINOR=6
ARG CUDA_PATCH=3

ARG UBUNTU_RELEASE_YEAR=24

FROM nvidia/cuda:${CUDA_MAJOR}.${CUDA_MINOR}.${CUDA_PATCH}-cudnn-devel-ubuntu${UBUNTU_RELEASE_YEAR}.04

ARG CUDA_MAJOR
ARG CUDA_MINOR
ARG CUDA_PATCH

ARG UBUNTU_RELEASE_YEAR

ARG ZED_SDK_MAJOR=4
ARG ZED_SDK_MINOR=2
ARG ZED_SDK_PATCH=3

LABEL version="3.3"
LABEL description="This container contains a fully built ILLIXR system"

ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update
RUN apt-get -y install curl apt-transport-https lsb-release software-properties-common

RUN mkdir -p /etc/apt/keyrings
RUN add-apt-repository ppa:ecal/ecal-latest -y -u
RUN apt-get update

RUN apt-get install -y build-essential patch gcc g++ sudo cmake wget pkg-config protobuf-compiler libprotobuf-dev libprotoc-dev unzip
RUN apt-get install -y libglew-dev libgl-dev libx11-dev libgflags-dev git libglfw3-dev libglib2.0-dev libglm-dev libwayland-dev
RUN apt-get install -y libsqlite3-dev libeigen3-dev libspdlog-dev ecal libfmt-dev libboost-all-dev libc6-dev
RUN apt-get install -y libxkbcommon-dev libglu1-mesa-dev libopencv-dev libfp16-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libjpeg-dev libcpuinfo-dev libgles-dev libopenni2-dev libusb-1.0.0-dev libuvc-dev libopenxr-dev  libpng-dev
RUN apt-get install -y libsdl2-dev libtiff-dev udev libudev-dev
RUN apt-get install -y wayland-protocols libx11-xcb-dev libxcb-glx0-dev libxcb-randr0-dev zstd nvidia-cuda-toolkit-gcc
RUN apt-get install -y libvulkan-dev vulkan-validationlayers glslang-dev glslang-tools

ENV NVIDIA_DRIVER_CAPABILITIES=graphics,compute,video,utility

RUN echo "Europe/Paris" > /etc/localtime ; echo "CUDA Version ${CUDA_MAJOR}.${CUDA_MINOR}.${CUDA_PATCH}" > /usr/local/cuda/version.txt

RUN apt-get upgrade -y
RUN apt-get install -y --no-install-recommends wget less python3 python3-pip libgomp1 python3-numpy python3-opencv
RUN apt-get install -y libssl-dev libcurl4-openssl-dev vim-tiny
RUN apt-get install -y mkdocs mkdocs-autorefs mkdocs-bootstrap mkdocs-gen-files mkdocs-macros-plugin mkdocs-material mkdocs-material-extensions mkdocs-nature mkdocs-redirects mkdocs-section-index mkdocstrings doxygen doxygen-doxyparse doxygen-latex

# install realsense libraries
RUN git clone --depth=1 --branch v2.56.3 https://github.com/IntelRealSense/librealsense.git /tmp/librealsense
RUN mkdir -p /tmp/librealsense/build
WORKDIR /tmp/librealsense/build
RUN cmake ..
RUN make -j4 && make install
WORKDIR /
RUN rm -rf librealsense

# clean up cache
RUN rm -rf /var/lib/apt/lists/*

# give user illixr passwordless sudo (required for ZED install)
RUN useradd -m -d /home/illixr illixr && adduser illixr sudo
RUN echo "illixr ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/illixr-user
USER illixr
WORKDIR /home/illixr

# ZED sdk install
RUN wget -q -O ZED_SDK_Linux_Ubuntu${UBUNTU_RELEASE_YEAR}.run https://download.stereolabs.com/zedsdk/${ZED_SDK_MAJOR}.${ZED_SDK_MINOR}/cu${CUDA_MAJOR}/ubuntu${UBUNTU_RELEASE_YEAR}
RUN chmod +x ZED_SDK_Linux_Ubuntu${UBUNTU_RELEASE_YEAR}.run
RUN ./ZED_SDK_Linux_Ubuntu${UBUNTU_RELEASE_YEAR}.run --accept -- silent skip_tools skip_python skip_cuda
RUN rm ZED_SDK_Linux_Ubuntu${UBUNTU_RELEASE_YEAR}.run

WORKDIR /home/illixr

# set up environment
#  have to force this otherwise CMake won't see it
ENV SHELL=/bin/sh
# docker doesn't set this for some reason
ENV USER=illixr

# set install path to env vars
RUN echo "export PATH=${PATH}:/home/illixr/bin" >> /home/illixr/.bashrc
RUN echo "export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/home/illixr/lib" >> /home/illixr/.bashrc

# build ILLIXR
RUN git clone -b master https://github.com/ILLIXR/ILLIXR.git
RUN mkdir -p /home/illixr/ILLIXR/build
WORKDIR /home/illixr/ILLIXR/build

RUN cmake .. -DYAML_FILE=profiles/all.yaml -DCMAKE_INSTALL_PREFIX=/home/illixr -DBUILD_DOCS=ON -DUSE_MONADO=ON
RUN make -j4
RUN make install
RUN make docs
RUN make docs install
