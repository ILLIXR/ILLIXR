<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classILLIXR_1_1offload__rendering__server__loader" kind="class" language="C++" prot="public">
    <compoundname>ILLIXR::offload_rendering_server_loader</compoundname>
    <basecompoundref refid="classILLIXR_1_1plugin" prot="public" virt="non-virtual">ILLIXR::plugin</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">vulkan::vk_extension_request</basecompoundref>
    <includes refid="plugins_2offload__rendering__server_2plugin_8hpp" local="no">plugin.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classILLIXR_1_1offload__rendering__server__loader_1ade15fc3c9974d192dc18aedd2c9bc708" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classILLIXR_1_1offload__rendering__server" kindref="compound">offload_rendering_server</ref> &gt;</type>
        <definition>std::shared_ptr&lt;offload_rendering_server&gt; ILLIXR::offload_rendering_server_loader::offload_rendering_server_plugin_</definition>
        <argsstring></argsstring>
        <name>offload_rendering_server_plugin_</name>
        <qualifiedname>ILLIXR::offload_rendering_server_loader::offload_rendering_server_plugin_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/plugin.hpp" line="44" column="21" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/plugin.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1offload__rendering__server__loader_1a150c1714e18712dbf25d15aa65138750" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; spdlog::logger &gt;</type>
        <definition>std::shared_ptr&lt;spdlog::logger&gt; ILLIXR::offload_rendering_server_loader::log_</definition>
        <argsstring></argsstring>
        <name>log_</name>
        <qualifiedname>ILLIXR::offload_rendering_server_loader::log_</qualifiedname>
        <initializer>{spdlogger(&quot;debug&quot;)}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/plugin.hpp" line="45" column="31" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/plugin.hpp" bodystart="45" bodyend="45"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classILLIXR_1_1offload__rendering__server__loader_1aa8130d622181142b928bea5b81f7a108" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>offload_rendering_server_loader::offload_rendering_server_loader</definition>
        <argsstring>(const std::string &amp;name, phonebook *pb)</argsstring>
        <name>offload_rendering_server_loader</name>
        <qualifiedname>ILLIXR::offload_rendering_server_loader::offload_rendering_server_loader</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classILLIXR_1_1phonebook" kindref="compound">phonebook</ref> *</type>
          <declname>pb</declname>
        </param>
        <briefdescription>
<para>Constructor registers the server plugin with the system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Plugin name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pb</parametername>
</parameternamelist>
<parameterdescription>
<para>Phonebook for component lookup </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/plugin.hpp" line="25" column="6" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/plugin.cpp" bodystart="19" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1offload__rendering__server__loader_1a3d57258ca4fa6ea173b06638790cccdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; const char * &gt;</type>
        <definition>std::vector&lt; const char * &gt; offload_rendering_server_loader::get_required_instance_extensions</definition>
        <argsstring>() override</argsstring>
        <name>get_required_instance_extensions</name>
        <qualifiedname>ILLIXR::offload_rendering_server_loader::get_required_instance_extensions</qualifiedname>
        <briefdescription>
<para>Get required Vulkan instance extensions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>List of required instance extension names </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/plugin.hpp" line="31" column="17" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/plugin.cpp" bodystart="27" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1offload__rendering__server__loader_1a1aa44381caf1500a9d693e4b19a17c7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; const char * &gt;</type>
        <definition>std::vector&lt; const char * &gt; offload_rendering_server_loader::get_required_devices_extensions</definition>
        <argsstring>() override</argsstring>
        <name>get_required_devices_extensions</name>
        <qualifiedname>ILLIXR::offload_rendering_server_loader::get_required_devices_extensions</qualifiedname>
        <briefdescription>
<para>Get required Vulkan device extensions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>List of required device extension names </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/plugin.hpp" line="37" column="17" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/plugin.cpp" bodystart="32" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1offload__rendering__server__loader_1a3b5d052cda43dde1f63e9cb33fcdb76d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void offload_rendering_server_loader::start</definition>
        <argsstring>() override</argsstring>
        <name>start</name>
        <qualifiedname>ILLIXR::offload_rendering_server_loader::start</qualifiedname>
        <reimplements refid="classILLIXR_1_1plugin_1a30d7294817fc5e8a8216fbfbca233cdc">start</reimplements>
        <briefdescription>
<para>A method which Spindle calls when it starts the component. </para>
        </briefdescription>
        <detaileddescription>
<para>This is necessary because a constructor can&apos;t call derived virtual methods (due to structure of C++). See <computeroutput>threadloop</computeroutput> for an example of this use-case. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/plugin.hpp" line="39" column="10" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/plugin.cpp" bodystart="38" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1offload__rendering__server__loader_1a8495b481afc10a2e134bf180cb3d9796" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void offload_rendering_server_loader::stop</definition>
        <argsstring>() override</argsstring>
        <name>stop</name>
        <qualifiedname>ILLIXR::offload_rendering_server_loader::stop</qualifiedname>
        <reimplements refid="classILLIXR_1_1plugin_1a2cefabfb6dd9800b1ebc8b07031661c4">stop</reimplements>
        <briefdescription>
<para>A method which Spindle calls when it stops the component. </para>
        </briefdescription>
        <detaileddescription>
<para>This is necessary because the parent class might define some actions that need to be taken prior to destructing the derived class. For example, threadloop must halt and join the thread before the derived class can be safely destructed. However, the derived class&apos;s destructor is called before its parent (threadloop), so threadloop doesn&apos;t get a chance to join the thread before the derived class is destroyed, and the thread accesses freed memory. Instead, we call plugin-&gt;stop manually before destroying anything.</para>
<para>Concrete plugins are responsible for initializing their specific logger and sinks. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/plugin.hpp" line="41" column="10" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/plugin.cpp" bodystart="42" bodyend="44"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Plugin loader for the offload rendering server. </para>
    </briefdescription>
    <detaileddescription>
<para>Handles plugin registration and Vulkan extension requirements for the offload rendering server component. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>ILLIXR::offload_rendering_server_loader</label>
        <link refid="classILLIXR_1_1offload__rendering__server__loader"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>ILLIXR::plugin</label>
        <link refid="classILLIXR_1_1plugin"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>ILLIXR::offload_rendering_server_loader</label>
        <link refid="classILLIXR_1_1offload__rendering__server__loader"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>ILLIXR::phonebook</label>
        <link refid="classILLIXR_1_1phonebook"/>
      </node>
      <node id="2">
        <label>ILLIXR::plugin</label>
        <link refid="classILLIXR_1_1plugin"/>
        <childnode refid="3" relation="usage">
          <edgelabel>phonebook_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/plugin.hpp" line="16" column="1" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/plugin.hpp" bodystart="18" bodyend="46"/>
    <listofallmembers>
      <member refid="classILLIXR_1_1plugin_1afe52734e7edc87bd0bf974caf112961b" prot="protected" virt="non-virtual"><scope>ILLIXR::offload_rendering_server_loader</scope><name>gen_guid_</name></member>
      <member refid="classILLIXR_1_1plugin_1aebda022998bd35983e83f391dc0e5193" prot="public" virt="non-virtual"><scope>ILLIXR::offload_rendering_server_loader</scope><name>get_name</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server__loader_1a1aa44381caf1500a9d693e4b19a17c7c" prot="public" virt="non-virtual"><scope>ILLIXR::offload_rendering_server_loader</scope><name>get_required_devices_extensions</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server__loader_1a3d57258ca4fa6ea173b06638790cccdb" prot="public" virt="non-virtual"><scope>ILLIXR::offload_rendering_server_loader</scope><name>get_required_instance_extensions</name></member>
      <member refid="classILLIXR_1_1plugin_1aaedb3f9178bdd11e53815e158454aaf3" prot="protected" virt="non-virtual"><scope>ILLIXR::offload_rendering_server_loader</scope><name>id_</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server__loader_1a150c1714e18712dbf25d15aa65138750" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server_loader</scope><name>log_</name></member>
      <member refid="classILLIXR_1_1plugin_1aa963c518af83966173840a8558490888" prot="protected" virt="non-virtual"><scope>ILLIXR::offload_rendering_server_loader</scope><name>name_</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server__loader_1aa8130d622181142b928bea5b81f7a108" prot="public" virt="non-virtual"><scope>ILLIXR::offload_rendering_server_loader</scope><name>offload_rendering_server_loader</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server__loader_1ade15fc3c9974d192dc18aedd2c9bc708" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server_loader</scope><name>offload_rendering_server_plugin_</name></member>
      <member refid="classILLIXR_1_1plugin_1a6f7a2a9012350591c00d67a5bc0fd5a6" prot="protected" virt="non-virtual"><scope>ILLIXR::offload_rendering_server_loader</scope><name>phonebook_</name></member>
      <member refid="classILLIXR_1_1plugin_1abc91c0e5be180a8e0bbeaf114a127f17" prot="public" virt="non-virtual"><scope>ILLIXR::offload_rendering_server_loader</scope><name>plugin</name></member>
      <member refid="classILLIXR_1_1plugin_1a8d40c2421cde09079372d12bfe7d45fe" prot="protected" virt="non-virtual"><scope>ILLIXR::offload_rendering_server_loader</scope><name>plugin_logger_</name></member>
      <member refid="classILLIXR_1_1plugin_1aef671d0cd9b6de45d3ade16dedbf4974" prot="protected" virt="non-virtual"><scope>ILLIXR::offload_rendering_server_loader</scope><name>record_logger_</name></member>
      <member refid="classILLIXR_1_1plugin_1a7c1c7c1a0ec2e43bfa1118586a28932f" prot="public" virt="non-virtual"><scope>ILLIXR::offload_rendering_server_loader</scope><name>spd_add_file_sink</name></member>
      <member refid="classILLIXR_1_1plugin_1a569297189ef365cf93f6a95202c76d76" prot="public" virt="non-virtual"><scope>ILLIXR::offload_rendering_server_loader</scope><name>spdlogger</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server__loader_1a3b5d052cda43dde1f63e9cb33fcdb76d" prot="public" virt="virtual"><scope>ILLIXR::offload_rendering_server_loader</scope><name>start</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server__loader_1a8495b481afc10a2e134bf180cb3d9796" prot="public" virt="virtual"><scope>ILLIXR::offload_rendering_server_loader</scope><name>stop</name></member>
      <member refid="classILLIXR_1_1plugin_1a44d7b00c86e227bbc1a0b221da43d454" prot="public" virt="virtual"><scope>ILLIXR::offload_rendering_server_loader</scope><name>~plugin</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
