<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classILLIXR_1_1phonebook" kind="class" language="C++" prot="public">
    <compoundname>ILLIXR::phonebook</compoundname>
    <includes refid="phonebook_8hpp" local="no">phonebook.hpp</includes>
    <innerclass refid="classILLIXR_1_1phonebook_1_1service" prot="public">ILLIXR::phonebook::service</innerclass>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classILLIXR_1_1phonebook_1a99cb78ecf1e254bfc650caf76e4f62ca" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; std::type_index, const std::shared_ptr&lt; <ref refid="classILLIXR_1_1phonebook_1_1service" kindref="compound">service</ref> &gt; &gt;</type>
        <definition>std::unordered_map&lt;std::type_index, const std::shared_ptr&lt;service&gt; &gt; ILLIXR::phonebook::registry_</definition>
        <argsstring></argsstring>
        <name>registry_</name>
        <qualifiedname>ILLIXR::phonebook::registry_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/phonebook.hpp" line="188" column="24" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/phonebook.hpp" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1phonebook_1ad264f1c2e3d3e54ce8774dcf3ca493b2" prot="private" static="no" mutable="yes">
        <type>std::shared_mutex</type>
        <definition>std::shared_mutex ILLIXR::phonebook::mutex_</definition>
        <argsstring></argsstring>
        <name>mutex_</name>
        <qualifiedname>ILLIXR::phonebook::mutex_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/phonebook.hpp" line="189" column="73" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/phonebook.hpp" bodystart="189" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classILLIXR_1_1phonebook_1ad7c2cf4154deff558b5e5b42eb7263b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Specific_service</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ILLIXR::phonebook::register_impl</definition>
        <argsstring>(std::shared_ptr&lt; Specific_service &gt; impl)</argsstring>
        <name>register_impl</name>
        <qualifiedname>ILLIXR::phonebook::register_impl</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; Specific_service &gt;</type>
          <declname>impl</declname>
        </param>
        <briefdescription>
<para>Registers an implementation of <computeroutput>baseclass</computeroutput> for future calls to lookup. </para>
        </briefdescription>
        <detaileddescription>
<para>Safe to be called from any thread.</para>
<para>The implementation will be owned by phonebook (phonebook calls <computeroutput>delete</computeroutput>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/phonebook.hpp" line="134" column="10" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/phonebook.hpp" bodystart="134" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1phonebook_1a3d292059ea83e59808695622fec36fe2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Specific_service</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; Specific_service &gt;</type>
        <definition>std::shared_ptr&lt; Specific_service &gt; ILLIXR::phonebook::lookup_impl</definition>
        <argsstring>() const</argsstring>
        <name>lookup_impl</name>
        <qualifiedname>ILLIXR::phonebook::lookup_impl</qualifiedname>
        <briefdescription>
<para>Look up an implementation of <computeroutput>Specific_service</computeroutput>, which should be registered first. </para>
        </briefdescription>
        <detaileddescription>
<para>Safe to be called from any thread.</para>
<para>Do not call <computeroutput>delete</computeroutput> on the returned object; it is still managed by phonebook.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>if</parametername>
</parameternamelist>
<parameterdescription>
<para>an implementation is not already registered. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/phonebook.hpp" line="155" column="21" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/phonebook.hpp" bodystart="155" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1phonebook_1a671d83e1b37be06464cccd65279050a5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename specific_service</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool ILLIXR::phonebook::has_impl</definition>
        <argsstring>() const</argsstring>
        <name>has_impl</name>
        <qualifiedname>ILLIXR::phonebook::has_impl</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/phonebook.hpp" line="179" column="11" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/phonebook.hpp" bodystart="179" bodyend="185"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A <ulink url="https://en.wikipedia.org/wiki/Service_locator_pattern">service locator</ulink> for <ref refid="namespaceILLIXR" kindref="compound">ILLIXR</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>This will be explained through an example: Suppose one dynamically-loaded plugin, <computeroutput>A_plugin</computeroutput>, needs a service, <computeroutput>B_service</computeroutput>, provided by another, <computeroutput>B_plugin</computeroutput>. <computeroutput>A_plugin</computeroutput> cannot statically construct a <computeroutput>B_service</computeroutput>, because the implementation <computeroutput>B_plugin</computeroutput> is dynamically loaded. However, <computeroutput>B_plugin</computeroutput> can register an implementation of <computeroutput>B_service</computeroutput> when it is loaded, and <computeroutput>A_plugin</computeroutput> can lookup that implementation without knowing it.</para>
<para><computeroutput>B_service.hpp</computeroutput> in <computeroutput>common</computeroutput>: <programlisting filename=".cpp"><codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">B_service<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>frobnicate(foo<sp/>data)<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para><computeroutput>B_plugin.hpp</computeroutput>: <programlisting filename=".cpp"><codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">B_impl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>B_service<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>frobnicate(foo<sp/>data)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>blah_blah(phonebook*<sp/>pb)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Expose<sp/>`this`<sp/>as<sp/>the<sp/>&quot;official&quot;<sp/>implementation<sp/>of<sp/>`B_service`<sp/>for<sp/>this<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pb-&gt;register_impl&lt;B_service&gt;(std::make_shared&lt;B_impl&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><computeroutput>A_plugin.cpp</computeroutput>: <programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;B_service.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>blah_blah(phonebook*<sp/>pb)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>B_service*<sp/>b<sp/>=<sp/>pb-&gt;lookup_impl&lt;B_service&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>b-&gt;frobnicate(data);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>If the implementation of <computeroutput>B_service</computeroutput> is not known to <computeroutput>A_plugin</computeroutput> (the usual case), <computeroutput>B_service should be an [abstract class][2]. In either case</computeroutput>B_service<computeroutput>should be in</computeroutput>common`, so both plugins can refer to it.</para>
<para>One could even selectively return a different implementation of <computeroutput>B_service</computeroutput> depending on the caller (through the parameters), but we have not encountered the need for that yet. </para>
    </detaileddescription>
    <location file="/home/friedel/devel/ILLIXR/include/illixr/phonebook.hpp" line="69" column="1" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/phonebook.hpp" bodystart="69" bodyend="190"/>
    <listofallmembers>
      <member refid="classILLIXR_1_1phonebook_1a671d83e1b37be06464cccd65279050a5" prot="public" virt="non-virtual"><scope>ILLIXR::phonebook</scope><name>has_impl</name></member>
      <member refid="classILLIXR_1_1phonebook_1a3d292059ea83e59808695622fec36fe2" prot="public" virt="non-virtual"><scope>ILLIXR::phonebook</scope><name>lookup_impl</name></member>
      <member refid="classILLIXR_1_1phonebook_1ad264f1c2e3d3e54ce8774dcf3ca493b2" prot="private" virt="non-virtual"><scope>ILLIXR::phonebook</scope><name>mutex_</name></member>
      <member refid="classILLIXR_1_1phonebook_1ad7c2cf4154deff558b5e5b42eb7263b3" prot="public" virt="non-virtual"><scope>ILLIXR::phonebook</scope><name>register_impl</name></member>
      <member refid="classILLIXR_1_1phonebook_1a99cb78ecf1e254bfc650caf76e4f62ca" prot="private" virt="non-virtual"><scope>ILLIXR::phonebook</scope><name>registry_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
