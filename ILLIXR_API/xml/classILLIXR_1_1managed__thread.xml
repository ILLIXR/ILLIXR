<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classILLIXR_1_1managed__thread" kind="class" language="C++" prot="public">
    <compoundname>ILLIXR::managed_thread</compoundname>
    <includes refid="managed__thread_8hpp" local="no">managed_thread.hpp</includes>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="classILLIXR_1_1managed__thread_1a5468c10675b43488736ae3d628cd1d1d" prot="public" static="no" strong="yes">
        <type></type>
        <name>state</name>
        <qualifiedname>ILLIXR::managed_thread::state</qualifiedname>
        <enumvalue id="classILLIXR_1_1managed__thread_1a5468c10675b43488736ae3d628cd1d1da33361ca8d9806bdc5d8b1047b74bb595" prot="public">
          <name>nonstartable</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classILLIXR_1_1managed__thread_1a5468c10675b43488736ae3d628cd1d1dad95ef5b9d3f4769f8b4fffdba31bbb6f" prot="public">
          <name>startable</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classILLIXR_1_1managed__thread_1a5468c10675b43488736ae3d628cd1d1da75101dcdfc88455bcafc9e53e0b06689" prot="public">
          <name>running</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classILLIXR_1_1managed__thread_1a5468c10675b43488736ae3d628cd1d1daf0a0bfe6bc7d2c58d2989034f83183e0" prot="public">
          <name>stopped</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Possible states for a <ref refid="classILLIXR_1_1managed__thread" kindref="compound">managed_thread</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/managed_thread.hpp" line="18" column="5" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/managed_thread.hpp" bodystart="18" bodyend="23"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classILLIXR_1_1managed__thread_1a97b8c6f551031e7e01474d5e13a683b5" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; ILLIXR::managed_thread::stop_</definition>
        <argsstring></argsstring>
        <name>stop_</name>
        <qualifiedname>ILLIXR::managed_thread::stop_</qualifiedname>
        <initializer>{false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/managed_thread.hpp" line="91" column="21" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/managed_thread.hpp" bodystart="91" bodyend="91"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1managed__thread_1a11365bddaccf1840c296f2057978cd12" prot="private" static="no" mutable="no">
        <type>std::thread</type>
        <definition>std::thread ILLIXR::managed_thread::thread_</definition>
        <argsstring></argsstring>
        <name>thread_</name>
        <qualifiedname>ILLIXR::managed_thread::thread_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/managed_thread.hpp" line="92" column="27" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/managed_thread.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1managed__thread_1a92bdc38322779c027c1eaa7d52628249" prot="private" static="no" mutable="no">
        <type>std::function&lt; void()&gt;</type>
        <definition>std::function&lt;void()&gt; ILLIXR::managed_thread::body_</definition>
        <argsstring></argsstring>
        <name>body_</name>
        <qualifiedname>ILLIXR::managed_thread::body_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/managed_thread.hpp" line="93" column="19" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/managed_thread.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1managed__thread_1a2da4ee20b0a04ba34bdd3c8ab6b67834" prot="private" static="no" mutable="no">
        <type>std::function&lt; void()&gt;</type>
        <definition>std::function&lt;void()&gt; ILLIXR::managed_thread::on_start_</definition>
        <argsstring></argsstring>
        <name>on_start_</name>
        <qualifiedname>ILLIXR::managed_thread::on_start_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/managed_thread.hpp" line="94" column="19" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/managed_thread.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1managed__thread_1a5a69e1511f360d2c63eacfdc8371c8ec" prot="private" static="no" mutable="no">
        <type>std::function&lt; void()&gt;</type>
        <definition>std::function&lt;void()&gt; ILLIXR::managed_thread::on_stop_</definition>
        <argsstring></argsstring>
        <name>on_stop_</name>
        <qualifiedname>ILLIXR::managed_thread::on_stop_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/managed_thread.hpp" line="95" column="19" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/managed_thread.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classILLIXR_1_1managed__thread_1a48ba44563b382e865c9694e32d8b6e53" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>ILLIXR::managed_thread::managed_thread</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>managed_thread</name>
        <qualifiedname>ILLIXR::managed_thread::managed_thread</qualifiedname>
        <briefdescription>
<para>Constructs a non-startable thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/managed_thread.hpp" line="28" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1managed__thread_1a49e2bec5e813c51bc70ca29863eb5d1e" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>ILLIXR::managed_thread::managed_thread</definition>
        <argsstring>(std::function&lt; void()&gt; body, std::function&lt; void()&gt; on_start=std::function&lt; void()&gt;{}, std::function&lt; void()&gt; on_stop=std::function&lt; void()&gt;{}) noexcept</argsstring>
        <name>managed_thread</name>
        <qualifiedname>ILLIXR::managed_thread::managed_thread</qualifiedname>
        <param>
          <type>std::function&lt; void()&gt;</type>
          <declname>body</declname>
        </param>
        <param>
          <type>std::function&lt; void()&gt;</type>
          <declname>on_start</declname>
          <defval>std::function&lt; void()&gt;{}</defval>
        </param>
        <param>
          <type>std::function&lt; void()&gt;</type>
          <declname>on_stop</declname>
          <defval>std::function&lt; void()&gt;{}</defval>
        </param>
        <briefdescription>
<para>Constructs a startable thread. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>on_stop</computeroutput> is called once (if present) <computeroutput>on_start</computeroutput> is called as the thread is joining <computeroutput>body</computeroutput> is called in a tight loop </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/managed_thread.hpp" line="37" column="14" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/managed_thread.hpp" bodystart="37" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1managed__thread_1a24b2a08ab885d7f22235b1e67dd2d873" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>ILLIXR::managed_thread::~managed_thread</definition>
        <argsstring>() noexcept</argsstring>
        <name>~managed_thread</name>
        <qualifiedname>ILLIXR::managed_thread::~managed_thread</qualifiedname>
        <briefdescription>
<para>Stops a thread, if necessary. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/managed_thread.hpp" line="46" column="5" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/managed_thread.hpp" bodystart="46" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1managed__thread_1a3291df2d2e33d018cc53ec4fa70e08c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classILLIXR_1_1managed__thread_1a5468c10675b43488736ae3d628cd1d1d" kindref="member">state</ref></type>
        <definition>state ILLIXR::managed_thread::get_state</definition>
        <argsstring>()</argsstring>
        <name>get_state</name>
        <qualifiedname>ILLIXR::managed_thread::get_state</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/managed_thread.hpp" line="56" column="11" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/managed_thread.hpp" bodystart="56" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1managed__thread_1a4b9872f2246c30d72266d45f6fc4ab09" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ILLIXR::managed_thread::start</definition>
        <argsstring>()</argsstring>
        <name>start</name>
        <qualifiedname>ILLIXR::managed_thread::start</qualifiedname>
        <briefdescription>
<para>Moves a <ref refid="classILLIXR_1_1managed__thread" kindref="compound">managed_thread</ref> from startable to running. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/managed_thread.hpp" line="74" column="10" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/managed_thread.hpp" bodystart="74" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1managed__thread_1aea73f54e75390e1909905ccdd90572d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ILLIXR::managed_thread::stop</definition>
        <argsstring>()</argsstring>
        <name>stop</name>
        <qualifiedname>ILLIXR::managed_thread::stop</qualifiedname>
        <briefdescription>
<para>Moves a <ref refid="classILLIXR_1_1managed__thread" kindref="compound">managed_thread</ref> from running to stopped. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/managed_thread.hpp" line="83" column="10" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/managed_thread.hpp" bodystart="83" bodyend="88"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classILLIXR_1_1managed__thread_1a7aec8c2bde4ef3b5c92ed56ebfb1c107" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ILLIXR::managed_thread::thread_main</definition>
        <argsstring>()</argsstring>
        <name>thread_main</name>
        <qualifiedname>ILLIXR::managed_thread::thread_main</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/managed_thread.hpp" line="97" column="10" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/managed_thread.hpp" bodystart="97" bodyend="108"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>An object that manages a std::thread; it joins and exits when the object gets destructed. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/friedel/devel/ILLIXR/include/illixr/managed_thread.hpp" line="15" column="1" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/managed_thread.hpp" bodystart="15" bodyend="109"/>
    <listofallmembers>
      <member refid="classILLIXR_1_1managed__thread_1a92bdc38322779c027c1eaa7d52628249" prot="private" virt="non-virtual"><scope>ILLIXR::managed_thread</scope><name>body_</name></member>
      <member refid="classILLIXR_1_1managed__thread_1a3291df2d2e33d018cc53ec4fa70e08c4" prot="public" virt="non-virtual"><scope>ILLIXR::managed_thread</scope><name>get_state</name></member>
      <member refid="classILLIXR_1_1managed__thread_1a48ba44563b382e865c9694e32d8b6e53" prot="public" virt="non-virtual"><scope>ILLIXR::managed_thread</scope><name>managed_thread</name></member>
      <member refid="classILLIXR_1_1managed__thread_1a49e2bec5e813c51bc70ca29863eb5d1e" prot="public" virt="non-virtual"><scope>ILLIXR::managed_thread</scope><name>managed_thread</name></member>
      <member refid="classILLIXR_1_1managed__thread_1a2da4ee20b0a04ba34bdd3c8ab6b67834" prot="private" virt="non-virtual"><scope>ILLIXR::managed_thread</scope><name>on_start_</name></member>
      <member refid="classILLIXR_1_1managed__thread_1a5a69e1511f360d2c63eacfdc8371c8ec" prot="private" virt="non-virtual"><scope>ILLIXR::managed_thread</scope><name>on_stop_</name></member>
      <member refid="classILLIXR_1_1managed__thread_1a4b9872f2246c30d72266d45f6fc4ab09" prot="public" virt="non-virtual"><scope>ILLIXR::managed_thread</scope><name>start</name></member>
      <member refid="classILLIXR_1_1managed__thread_1a5468c10675b43488736ae3d628cd1d1d" prot="public" virt="non-virtual"><scope>ILLIXR::managed_thread</scope><name>state</name></member>
      <member refid="classILLIXR_1_1managed__thread_1aea73f54e75390e1909905ccdd90572d4" prot="public" virt="non-virtual"><scope>ILLIXR::managed_thread</scope><name>stop</name></member>
      <member refid="classILLIXR_1_1managed__thread_1a97b8c6f551031e7e01474d5e13a683b5" prot="private" virt="non-virtual"><scope>ILLIXR::managed_thread</scope><name>stop_</name></member>
      <member refid="classILLIXR_1_1managed__thread_1a11365bddaccf1840c296f2057978cd12" prot="private" virt="non-virtual"><scope>ILLIXR::managed_thread</scope><name>thread_</name></member>
      <member refid="classILLIXR_1_1managed__thread_1a7aec8c2bde4ef3b5c92ed56ebfb1c107" prot="private" virt="non-virtual"><scope>ILLIXR::managed_thread</scope><name>thread_main</name></member>
      <member refid="classILLIXR_1_1managed__thread_1a24b2a08ab885d7f22235b1e67dd2d873" prot="public" virt="non-virtual"><scope>ILLIXR::managed_thread</scope><name>~managed_thread</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
