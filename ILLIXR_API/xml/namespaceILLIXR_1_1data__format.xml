<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceILLIXR_1_1data__format" kind="namespace" language="C++">
    <compoundname>ILLIXR::data_format</compoundname>
    <innerclass refid="structILLIXR_1_1data__format_1_1binocular__cam__type" prot="public">ILLIXR::data_format::binocular_cam_type</innerclass>
    <innerclass refid="structILLIXR_1_1data__format_1_1cam__base__type" prot="public">ILLIXR::data_format::cam_base_type</innerclass>
    <innerclass refid="structILLIXR_1_1data__format_1_1cam__type__zed" prot="public">ILLIXR::data_format::cam_type_zed</innerclass>
    <innerclass refid="structILLIXR_1_1data__format_1_1camera__data" prot="public">ILLIXR::data_format::camera_data</innerclass>
    <innerclass refid="structILLIXR_1_1data__format_1_1ccd__data" prot="public">ILLIXR::data_format::ccd_data</innerclass>
    <innerclass refid="structILLIXR_1_1data__format_1_1compressed__frame" prot="public">ILLIXR::data_format::compressed_frame</innerclass>
    <innerclass refid="structILLIXR_1_1data__format_1_1connection__signal" prot="public">ILLIXR::data_format::connection_signal</innerclass>
    <innerclass refid="structILLIXR_1_1data__format_1_1depth__type" prot="public">ILLIXR::data_format::depth_type</innerclass>
    <innerclass refid="structILLIXR_1_1data__format_1_1fast__pose__type" prot="public">ILLIXR::data_format::fast_pose_type</innerclass>
    <innerclass refid="structILLIXR_1_1data__format_1_1hmd__physical__info" prot="public">ILLIXR::data_format::hmd_physical_info</innerclass>
    <innerclass refid="structILLIXR_1_1data__format_1_1hologram__input" prot="public">ILLIXR::data_format::hologram_input</innerclass>
    <innerclass refid="structILLIXR_1_1data__format_1_1image__handle" prot="public">ILLIXR::data_format::image_handle</innerclass>
    <innerclass refid="structILLIXR_1_1data__format_1_1imu__integrator__input" prot="public">ILLIXR::data_format::imu_integrator_input</innerclass>
    <innerclass refid="structILLIXR_1_1data__format_1_1imu__params" prot="public">ILLIXR::data_format::imu_params</innerclass>
    <innerclass refid="structILLIXR_1_1data__format_1_1imu__raw__type" prot="public">ILLIXR::data_format::imu_raw_type</innerclass>
    <innerclass refid="structILLIXR_1_1data__format_1_1imu__type" prot="public">ILLIXR::data_format::imu_type</innerclass>
    <innerclass refid="structILLIXR_1_1data__format_1_1monocular__cam__type" prot="public">ILLIXR::data_format::monocular_cam_type</innerclass>
    <innerclass refid="structILLIXR_1_1data__format_1_1point" prot="public">ILLIXR::data_format::point</innerclass>
    <innerclass refid="structILLIXR_1_1data__format_1_1point__with__units" prot="public">ILLIXR::data_format::point_with_units</innerclass>
    <innerclass refid="structILLIXR_1_1data__format_1_1point__with__validity" prot="public">ILLIXR::data_format::point_with_validity</innerclass>
    <innerclass refid="structILLIXR_1_1data__format_1_1points__with__units" prot="public">ILLIXR::data_format::points_with_units</innerclass>
    <innerclass refid="structILLIXR_1_1data__format_1_1pose__data" prot="public">ILLIXR::data_format::pose_data</innerclass>
    <innerclass refid="classILLIXR_1_1data__format_1_1pose__prediction" prot="public">ILLIXR::data_format::pose_prediction</innerclass>
    <innerclass refid="structILLIXR_1_1data__format_1_1pose__type" prot="public">ILLIXR::data_format::pose_type</innerclass>
    <innerclass refid="classILLIXR_1_1data__format_1_1proper__quaternion" prot="public">ILLIXR::data_format::proper_quaternion</innerclass>
    <innerclass refid="structILLIXR_1_1data__format_1_1raw__point" prot="public">ILLIXR::data_format::raw_point</innerclass>
    <innerclass refid="structILLIXR_1_1data__format_1_1raw__pose" prot="public">ILLIXR::data_format::raw_pose</innerclass>
    <innerclass refid="structILLIXR_1_1data__format_1_1rect" prot="public">ILLIXR::data_format::rect</innerclass>
    <innerclass refid="structILLIXR_1_1data__format_1_1rendered__frame" prot="public">ILLIXR::data_format::rendered_frame</innerclass>
    <innerclass refid="structILLIXR_1_1data__format_1_1rgb__depth__type" prot="public">ILLIXR::data_format::rgb_depth_type</innerclass>
    <innerclass refid="structILLIXR_1_1data__format_1_1signal__to__quad" prot="public">ILLIXR::data_format::signal_to_quad</innerclass>
    <innerclass refid="structILLIXR_1_1data__format_1_1texture__pose" prot="public">ILLIXR::data_format::texture_pose</innerclass>
    <innerclass refid="structILLIXR_1_1data__format_1_1vk__image__handle" prot="public">ILLIXR::data_format::vk_image_handle</innerclass>
    <innernamespace refid="namespaceILLIXR_1_1data__format_1_1camera">ILLIXR::data_format::camera</innernamespace>
    <innernamespace refid="namespaceILLIXR_1_1data__format_1_1coordinates">ILLIXR::data_format::coordinates</innernamespace>
    <innernamespace refid="namespaceILLIXR_1_1data__format_1_1ht">ILLIXR::data_format::ht</innernamespace>
    <innernamespace refid="namespaceILLIXR_1_1data__format_1_1image">ILLIXR::data_format::image</innernamespace>
    <innernamespace refid="namespaceILLIXR_1_1data__format_1_1units">ILLIXR::data_format::units</innernamespace>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="misc_8hpp_1adb4f39f5111686f87d5489182db83d30" prot="public" static="no" strong="yes">
        <type></type>
        <name>graphics_api</name>
        <qualifiedname>ILLIXR::data_format::graphics_api</qualifiedname>
        <enumvalue id="misc_8hpp_1adb4f39f5111686f87d5489182db83d30ac0ad831a34c4633bee584066cfcc5040" prot="public">
          <name>OPENGL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="misc_8hpp_1adb4f39f5111686f87d5489182db83d30ac60cacb57b9e78f018a9d973bee2f801" prot="public">
          <name>VULKAN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="misc_8hpp_1adb4f39f5111686f87d5489182db83d30ad4908b1e39cc61772e5d74e5fb77d241" prot="public">
          <name>TBD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/misc.hpp" line="22" column="1" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/misc.hpp" bodystart="22" bodyend="22"/>
      </memberdef>
      <memberdef kind="enum" id="misc_8hpp_1a2bb21bd5685c68f893f8ef8837cdba8b" prot="public" static="no" strong="yes">
        <type></type>
        <name>swapchain_usage</name>
        <qualifiedname>ILLIXR::data_format::swapchain_usage</qualifiedname>
        <enumvalue id="misc_8hpp_1a2bb21bd5685c68f893f8ef8837cdba8baf4b748d04f97e0149fe74c25f097c364" prot="public">
          <name>LEFT_SWAPCHAIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="misc_8hpp_1a2bb21bd5685c68f893f8ef8837cdba8ba951646e00a475190432e69a3c36382f2" prot="public">
          <name>RIGHT_SWAPCHAIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="misc_8hpp_1a2bb21bd5685c68f893f8ef8837cdba8ba4d4e3a0aa14078dde19595ff502bc651" prot="public">
          <name>LEFT_RENDER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="misc_8hpp_1a2bb21bd5685c68f893f8ef8837cdba8baa0dcfe8741012bf5f9d5c63404a3ae2e" prot="public">
          <name>RIGHT_RENDER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="misc_8hpp_1a2bb21bd5685c68f893f8ef8837cdba8bad4cd0dabcf4caa22ad92fab40844c786" prot="public">
          <name>NA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/misc.hpp" line="25" column="1" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/misc.hpp" bodystart="25" bodyend="25"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="camera__data_8hpp_1a393871c51dc6667ea17f3bff9b6d0c36" prot="public" static="no">
        <type>std::map&lt; units::eyes, <ref refid="structILLIXR_1_1data__format_1_1ccd__data" kindref="compound">ccd_data</ref> &gt;</type>
        <definition>typedef std::map&lt;units::eyes, ccd_data&gt; ILLIXR::data_format::ccd_map</definition>
        <argsstring></argsstring>
        <name>ccd_map</name>
        <qualifiedname>ILLIXR::data_format::ccd_map</qualifiedname>
        <briefdescription>
<para>mapping of ccd information to the eye it is associated with, for monocular cameras use <computeroutput>units::LEFT_EYE</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/camera_data.hpp" line="46" column="5" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/camera_data.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="misc_8hpp_1a7fb771feeea2841af86e15b9306b8451" prot="public" static="no">
        <type>struct ILLIXR::data_format::vk_image_handle</type>
        <definition>typedef struct ILLIXR::data_format::vk_image_handle ILLIXR::data_format::vk_image_handle</definition>
        <argsstring></argsstring>
        <name>vk_image_handle</name>
        <qualifiedname>ILLIXR::data_format::vk_image_handle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/misc.hpp" line="40" column="17"/>
      </memberdef>
      <memberdef kind="typedef" id="pose_8hpp_1a507d7d3bfc15a8a3c419b8eae8aa095e" prot="public" static="no">
        <type>std::map&lt; units::eyes, <ref refid="structILLIXR_1_1data__format_1_1pose__type" kindref="compound">pose_type</ref> &gt;</type>
        <definition>typedef std::map&lt;units::eyes, pose_type&gt; ILLIXR::data_format::multi_pose_map</definition>
        <argsstring></argsstring>
        <name>multi_pose_map</name>
        <qualifiedname>ILLIXR::data_format::multi_pose_map</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/pose.hpp" line="162" column="19" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/pose.hpp" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="proper__quaternion_8hpp_1a44a2b582cf358d0fcc11f13632688295" prot="public" static="no">
        <type><ref refid="classILLIXR_1_1data__format_1_1proper__quaternion" kindref="compound">proper_quaternion</ref>&lt; double &gt;</type>
        <definition>typedef proper_quaternion&lt;double&gt; ILLIXR::data_format::proper_quaterniond</definition>
        <argsstring></argsstring>
        <name>proper_quaterniond</name>
        <qualifiedname>ILLIXR::data_format::proper_quaterniond</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" line="205" column="28" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="proper__quaternion_8hpp_1ac2e846ae7adbccf5e92a9e1829f824c0" prot="public" static="no">
        <type><ref refid="classILLIXR_1_1data__format_1_1proper__quaternion" kindref="compound">proper_quaternion</ref>&lt; float &gt;</type>
        <definition>typedef proper_quaternion&lt;float&gt; ILLIXR::data_format::proper_quaternionf</definition>
        <argsstring></argsstring>
        <name>proper_quaternionf</name>
        <qualifiedname>ILLIXR::data_format::proper_quaternionf</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" line="206" column="29" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" bodystart="206" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="hand__tracking__data_8hpp_1aff8038060450358116493b473363bbda" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void ILLIXR::data_format::normalize&lt; ht::hand_points &gt;</definition>
        <argsstring>(ht::hand_points &amp;obj, const float width, const float height, const float depth)</argsstring>
        <name>normalize&lt; ht::hand_points &gt;</name>
        <qualifiedname>ILLIXR::data_format::normalize&lt; ht::hand_points &gt;</qualifiedname>
        <param>
          <type><ref refid="structILLIXR_1_1data__format_1_1ht_1_1hand__points" kindref="compound">ht::hand_points</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>width</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>height</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/hand_tracking_data.hpp" line="500" column="8" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/hand_tracking_data.hpp" bodystart="500" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="hand__tracking__data_8hpp_1ab0338a51ff90217bbcc1880072451969" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void ILLIXR::data_format::denormalize&lt; ht::hand_points &gt;</definition>
        <argsstring>(ht::hand_points &amp;obj, const float width, const float height, const float depth, units::measurement_unit unit_)</argsstring>
        <name>denormalize&lt; ht::hand_points &gt;</name>
        <qualifiedname>ILLIXR::data_format::denormalize&lt; ht::hand_points &gt;</qualifiedname>
        <param>
          <type><ref refid="structILLIXR_1_1data__format_1_1ht_1_1hand__points" kindref="compound">ht::hand_points</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>width</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>height</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>depth</declname>
        </param>
        <param>
          <type>units::measurement_unit</type>
          <declname>unit_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/hand_tracking_data.hpp" line="511" column="8" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/hand_tracking_data.hpp" bodystart="511" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="hand__tracking__data_8hpp_1a180fc2a69f106dc2c886293df14352fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void ILLIXR::data_format::normalize&lt; ht::velocity &gt;</definition>
        <argsstring>(ht::velocity &amp;obj, const float width, const float height, const float depth)</argsstring>
        <name>normalize&lt; ht::velocity &gt;</name>
        <qualifiedname>ILLIXR::data_format::normalize&lt; ht::velocity &gt;</qualifiedname>
        <param>
          <type><ref refid="structILLIXR_1_1data__format_1_1ht_1_1velocity" kindref="compound">ht::velocity</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>width</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>height</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/hand_tracking_data.hpp" line="519" column="8" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/hand_tracking_data.hpp" bodystart="519" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="hand__tracking__data_8hpp_1a96ae951c470a4aac9f9ae9c3cc7e907b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void ILLIXR::data_format::denormalize&lt; ht::velocity &gt;</definition>
        <argsstring>(ht::velocity &amp;obj, const float width, const float height, const float depth, units::measurement_unit unit_)</argsstring>
        <name>denormalize&lt; ht::velocity &gt;</name>
        <qualifiedname>ILLIXR::data_format::denormalize&lt; ht::velocity &gt;</qualifiedname>
        <param>
          <type><ref refid="structILLIXR_1_1data__format_1_1ht_1_1velocity" kindref="compound">ht::velocity</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>width</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>height</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>depth</declname>
        </param>
        <param>
          <type>units::measurement_unit</type>
          <declname>unit_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/hand_tracking_data.hpp" line="530" column="8" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/hand_tracking_data.hpp" bodystart="530" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="hand__tracking__data_8hpp_1aed524dc0be015617da36c294f58472e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void ILLIXR::data_format::normalize&lt; ht::ht_detection &gt;</definition>
        <argsstring>(ht::ht_detection &amp;obj, const float width, const float height, const float depth)</argsstring>
        <name>normalize&lt; ht::ht_detection &gt;</name>
        <qualifiedname>ILLIXR::data_format::normalize&lt; ht::ht_detection &gt;</qualifiedname>
        <param>
          <type><ref refid="structILLIXR_1_1data__format_1_1ht_1_1ht__detection" kindref="compound">ht::ht_detection</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>width</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>height</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/hand_tracking_data.hpp" line="538" column="8" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/hand_tracking_data.hpp" bodystart="538" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="hand__tracking__data_8hpp_1a863145475ed90842ed12cb4fe24fe57b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void ILLIXR::data_format::normalize&lt; ht::ht_frame &gt;</definition>
        <argsstring>(ht::ht_frame &amp;obj, const float width, const float height, const float depth)</argsstring>
        <name>normalize&lt; ht::ht_frame &gt;</name>
        <qualifiedname>ILLIXR::data_format::normalize&lt; ht::ht_frame &gt;</qualifiedname>
        <param>
          <type><ref refid="structILLIXR_1_1data__format_1_1ht_1_1ht__frame" kindref="compound">ht::ht_frame</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>width</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>height</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/hand_tracking_data.hpp" line="548" column="9" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/hand_tracking_data.hpp" bodystart="548" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="hand__tracking__data_8hpp_1afb0ee26bb1ee299268e485cc19b4059c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void ILLIXR::data_format::denormalize&lt; ht::ht_detection &gt;</definition>
        <argsstring>(ht::ht_detection &amp;obj, const float width, const float height, const float depth, units::measurement_unit unit)</argsstring>
        <name>denormalize&lt; ht::ht_detection &gt;</name>
        <qualifiedname>ILLIXR::data_format::denormalize&lt; ht::ht_detection &gt;</qualifiedname>
        <param>
          <type><ref refid="structILLIXR_1_1data__format_1_1ht_1_1ht__detection" kindref="compound">ht::ht_detection</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>width</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>height</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>depth</declname>
        </param>
        <param>
          <type>units::measurement_unit</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/hand_tracking_data.hpp" line="559" column="8" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/hand_tracking_data.hpp" bodystart="559" bodyend="567"/>
      </memberdef>
      <memberdef kind="function" id="hand__tracking__data_8hpp_1af75783c29954424c25a69ee3d4f38b44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void ILLIXR::data_format::denormalize&lt; ht::ht_frame &gt;</definition>
        <argsstring>(ht::ht_frame &amp;obj, const float width, const float height, const float depth, units::measurement_unit unit)</argsstring>
        <name>denormalize&lt; ht::ht_frame &gt;</name>
        <qualifiedname>ILLIXR::data_format::denormalize&lt; ht::ht_frame &gt;</qualifiedname>
        <param>
          <type><ref refid="structILLIXR_1_1data__format_1_1ht_1_1ht__frame" kindref="compound">ht::ht_frame</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>width</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>height</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>depth</declname>
        </param>
        <param>
          <type>units::measurement_unit</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/hand_tracking_data.hpp" line="570" column="9" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/hand_tracking_data.hpp" bodystart="570" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="misc_8hpp_1aee1e2187447238dd6dac655aa9a3354a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ILLIXR::data_format::compare</definition>
        <argsstring>(const std::string &amp;input, const std::string &amp;val)</argsstring>
        <name>compare</name>
        <qualifiedname>ILLIXR::data_format::compare</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/misc.hpp" line="108" column="13" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/misc.hpp" bodystart="108" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="point_8hpp_1ad8a6467864e8edf9fe841372ec0365e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>point</type>
        <definition>point ILLIXR::data_format::abs</definition>
        <argsstring>(const point &amp;pnt)</argsstring>
        <name>abs</name>
        <qualifiedname>ILLIXR::data_format::abs</qualifiedname>
        <param>
          <type>const point &amp;</type>
          <declname>pnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" line="320" column="14" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" bodystart="320" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="point_8hpp_1accd64f2367e6d9c2cffd8c3847c5ae90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>point_with_validity</type>
        <definition>point_with_validity ILLIXR::data_format::abs</definition>
        <argsstring>(const point_with_validity &amp;pnt)</argsstring>
        <name>abs</name>
        <qualifiedname>ILLIXR::data_format::abs</qualifiedname>
        <param>
          <type>const point_with_validity &amp;</type>
          <declname>pnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" line="327" column="29" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" bodystart="327" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="point_8hpp_1aab2a9b40d3d4eb86ada2dbdccdc8e40d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>point_with_units</type>
        <definition>point_with_units ILLIXR::data_format::abs</definition>
        <argsstring>(const point_with_units &amp;pnt)</argsstring>
        <name>abs</name>
        <qualifiedname>ILLIXR::data_format::abs</qualifiedname>
        <param>
          <type>const point_with_units &amp;</type>
          <declname>pnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine the absolute value of a point (done on each coordinate) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to take the absolute value of </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A point containing the result </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" line="336" column="26" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" bodystart="336" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="point_8hpp_1a79a0511deaf8e9904c41c357fc9b3cf2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void ILLIXR::data_format::normalize&lt; points_with_units &gt;</definition>
        <argsstring>(points_with_units &amp;obj, const float width, const float height, const float depth)</argsstring>
        <name>normalize&lt; points_with_units &gt;</name>
        <qualifiedname>ILLIXR::data_format::normalize&lt; points_with_units &gt;</qualifiedname>
        <param>
          <type>points_with_units &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>width</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>height</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Normalize a set of points based on the given bounds (all values will be 0. - 1.) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The points to be normalized </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The x bound </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The y bound </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth</parametername>
</parameternamelist>
<parameterdescription>
<para>The z bound </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" line="545" column="9" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" bodystart="545" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="point_8hpp_1aa577ba77582475549c28c0fcd22e96a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void ILLIXR::data_format::denormalize&lt; points_with_units &gt;</definition>
        <argsstring>(points_with_units &amp;obj, const float width, const float height, const float depth, units::measurement_unit unit_)</argsstring>
        <name>denormalize&lt; points_with_units &gt;</name>
        <qualifiedname>ILLIXR::data_format::denormalize&lt; points_with_units &gt;</qualifiedname>
        <param>
          <type>points_with_units &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>width</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>height</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>depth</declname>
        </param>
        <param>
          <type>units::measurement_unit</type>
          <declname>unit_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>De-normalize a set of points to coordinates within the given bounds <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>the points to de-normalize </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>the x bound </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>the y bound </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth</parametername>
</parameternamelist>
<parameterdescription>
<para>the z bound </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit_</parametername>
</parameternamelist>
<parameterdescription>
<para>the units for the points </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" line="565" column="9" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" bodystart="565" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="proper__quaternion_8hpp_1a7f17aa6ea8a36dc1f7f60eeaf300aa5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; ILLIXR::data_format::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const proper_quaternion&lt; T &gt; &amp;pq)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>ILLIXR::data_format::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classILLIXR_1_1data__format_1_1proper__quaternion" kindref="compound">proper_quaternion</ref>&lt; T &gt; &amp;</type>
          <declname>pq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pq</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" line="200" column="1" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="proper__quaternion_8hpp_1aa5fd561730812371fc06b28c696d4355" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar_</type>
          </param>
        </templateparamlist>
        <type><ref refid="classILLIXR_1_1data__format_1_1proper__quaternion" kindref="compound">proper_quaternion</ref>&lt; Scalar_ &gt;</type>
        <definition>proper_quaternion&lt; Scalar_ &gt; ILLIXR::data_format::operator*</definition>
        <argsstring>(Scalar_ x, const proper_quaternion&lt; Scalar_ &gt; &amp;pq)</argsstring>
        <name>operator*</name>
        <qualifiedname>ILLIXR::data_format::operator*</qualifiedname>
        <param>
          <type>Scalar_</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classILLIXR_1_1data__format_1_1proper__quaternion" kindref="compound">proper_quaternion</ref>&lt; Scalar_ &gt; &amp;</type>
          <declname>pq</declname>
        </param>
        <briefdescription>
<para>Multiplication of scalar and ProperQuaternion. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Scalar_</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to multiply the quaternion by </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pq</parametername>
</parameternamelist>
<parameterdescription>
<para>The quaternion to multiply </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ProperQuaternion containing the result </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" line="216" column="26" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" bodystart="216" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="proper__quaternion_8hpp_1a8eee3034806834992f1767c4af71e72b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar_</type>
          </param>
        </templateparamlist>
        <type><ref refid="classILLIXR_1_1data__format_1_1proper__quaternion" kindref="compound">proper_quaternion</ref>&lt; Scalar_ &gt;</type>
        <definition>proper_quaternion&lt; Scalar_ &gt; ILLIXR::data_format::operator/</definition>
        <argsstring>(const proper_quaternion&lt; Scalar_ &gt; &amp;pq, Scalar_ x)</argsstring>
        <name>operator/</name>
        <qualifiedname>ILLIXR::data_format::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classILLIXR_1_1data__format_1_1proper__quaternion" kindref="compound">proper_quaternion</ref>&lt; Scalar_ &gt; &amp;</type>
          <declname>pq</declname>
        </param>
        <param>
          <type>Scalar_</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Division of a ProperQuaternion by a scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Scalar_</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pq</parametername>
</parameternamelist>
<parameterdescription>
<para>The quaternion to divide </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to divide the Quaternion by </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ProperQuaternion containing the result </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" line="228" column="26" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/proper_quaternion.hpp" bodystart="228" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="shape_8hpp_1a6b05cd859c469a5f232d7e92a8afb984" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void ILLIXR::data_format::normalize&lt; rect &gt;</definition>
        <argsstring>(rect &amp;obj, const float width, const float height, const float depth)</argsstring>
        <name>normalize&lt; rect &gt;</name>
        <qualifiedname>ILLIXR::data_format::normalize&lt; rect &gt;</qualifiedname>
        <param>
          <type><ref refid="structILLIXR_1_1data__format_1_1rect" kindref="compound">rect</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>width</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>height</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/shape.hpp" line="106" column="8" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/shape.hpp" bodystart="106" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="shape_8hpp_1a2bf9b804de4430d5333c47eba7f24060" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void ILLIXR::data_format::denormalize&lt; rect &gt;</definition>
        <argsstring>(rect &amp;obj, const float width, const float height, const float depth, units::measurement_unit unit)</argsstring>
        <name>denormalize&lt; rect &gt;</name>
        <qualifiedname>ILLIXR::data_format::denormalize&lt; rect &gt;</qualifiedname>
        <param>
          <type><ref refid="structILLIXR_1_1data__format_1_1rect" kindref="compound">rect</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>width</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>height</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>depth</declname>
        </param>
        <param>
          <type>units::measurement_unit</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/shape.hpp" line="122" column="8" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/shape.hpp" bodystart="122" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="template_8hpp_1a5001275a35d0e267b53bd6bac1a9a3c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ILLIXR::data_format::normalize</definition>
        <argsstring>(T &amp;obj, const float width, const float height, const float depth)</argsstring>
        <name>normalize</name>
        <qualifiedname>ILLIXR::data_format::normalize</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>width</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>height</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/template.hpp" line="14" column="13" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/template.hpp" bodystart="14" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="template_8hpp_1abd98e7c4ea24ac2c210ee2f8737aadd2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ILLIXR::data_format::normalize</definition>
        <argsstring>(T &amp;obj, const float width, const float height)</argsstring>
        <name>normalize</name>
        <qualifiedname>ILLIXR::data_format::normalize</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>width</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/template.hpp" line="28" column="13" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/template.hpp" bodystart="28" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="template_8hpp_1a703c1270310054ef889246019fb397bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ILLIXR::data_format::denormalize</definition>
        <argsstring>(T &amp;obj, const float width, const float height, const float depth, units::measurement_unit unit_=units::PIXEL)</argsstring>
        <name>denormalize</name>
        <qualifiedname>ILLIXR::data_format::denormalize</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>width</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>height</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>depth</declname>
        </param>
        <param>
          <type>units::measurement_unit</type>
          <declname>unit_</declname>
          <defval>units::PIXEL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/template.hpp" line="36" column="13" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/template.hpp" bodystart="36" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="template_8hpp_1a6777917c18834e81bc549165bfd6ca6c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ILLIXR::data_format::denormalize</definition>
        <argsstring>(T &amp;obj, const float width, const float height, units::measurement_unit unit_=units::PIXEL)</argsstring>
        <name>denormalize</name>
        <qualifiedname>ILLIXR::data_format::denormalize</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>width</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>height</declname>
        </param>
        <param>
          <type>units::measurement_unit</type>
          <declname>unit_</declname>
          <defval>units::PIXEL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/template.hpp" line="56" column="13" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/template.hpp" bodystart="56" bodyend="58"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/camera_data.hpp" line="17" column="1"/>
  </compounddef>
</doxygen>
