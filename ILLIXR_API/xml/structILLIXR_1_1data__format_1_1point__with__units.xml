<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structILLIXR_1_1data__format_1_1point__with__units" kind="struct" language="C++" prot="public">
    <compoundname>ILLIXR::data_format::point_with_units</compoundname>
    <basecompoundref prot="public" virt="non-virtual">ILLIXR::data_format::point_with_validity</basecompoundref>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structILLIXR_1_1data__format_1_1point__with__units_1a06beb8ee3db2e40c88f0196c9b680966" prot="public" static="no" mutable="no">
        <type>units::measurement_unit</type>
        <definition>units::measurement_unit ILLIXR::data_format::point_with_units::unit</definition>
        <argsstring></argsstring>
        <name>unit</name>
        <qualifiedname>ILLIXR::data_format::point_with_units::unit</qualifiedname>
        <briefdescription>
<para>The units this point is in. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" line="142" column="29" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" bodystart="142" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structILLIXR_1_1data__format_1_1point__with__units_1abcce00ec27f502bd267ed0dfdc032a94" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ILLIXR::data_format::point_with_units::point_with_units</definition>
        <argsstring>(units::measurement_unit unit_=units::UNSET)</argsstring>
        <name>point_with_units</name>
        <qualifiedname>ILLIXR::data_format::point_with_units::point_with_units</qualifiedname>
        <param>
          <type>units::measurement_unit</type>
          <declname>unit_</declname>
          <defval>units::UNSET</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor, places point at the origin </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" line="147" column="14" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" bodystart="147" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="structILLIXR_1_1data__format_1_1point__with__units_1a0ad9270a96696e0d872adda2f0cc1836" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ILLIXR::data_format::point_with_units::point_with_units</definition>
        <argsstring>(const float x, const float y, const float z, units::measurement_unit unit_=units::UNSET, bool valid_=true, const float confidence_=0.)</argsstring>
        <name>point_with_units</name>
        <qualifiedname>ILLIXR::data_format::point_with_units::point_with_units</qualifiedname>
        <param>
          <type>const float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>z</declname>
        </param>
        <param>
          <type>units::measurement_unit</type>
          <declname>unit_</declname>
          <defval>units::UNSET</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>valid_</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const float</type>
          <declname>confidence_</declname>
          <defval>0.</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initial point based on the given x, y, and z coordinates <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The x coordinate in arbitrary units </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The y coordinate in arbitrary units </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The z coordinate in arbitrary units </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit_</parametername>
</parameternamelist>
<parameterdescription>
<para>The units of the point, default is UNSET </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>valid_</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the point contains valid data, default is true </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>confidence_</parametername>
</parameternamelist>
<parameterdescription>
<para>Confidence level of the point&apos;s value, default is 0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" line="160" column="5" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" bodystart="160" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="structILLIXR_1_1data__format_1_1point__with__units_1a2031e5959ad18dec1af511b1475e631c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ILLIXR::data_format::point_with_units::point_with_units</definition>
        <argsstring>(const point &amp;pnt, units::measurement_unit unit_=units::UNSET, bool valid_=true, const float confidence_=0.)</argsstring>
        <name>point_with_units</name>
        <qualifiedname>ILLIXR::data_format::point_with_units::point_with_units</qualifiedname>
        <param>
          <type>const point &amp;</type>
          <declname>pnt</declname>
        </param>
        <param>
          <type>units::measurement_unit</type>
          <declname>unit_</declname>
          <defval>units::UNSET</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>valid_</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const float</type>
          <declname>confidence_</declname>
          <defval>0.</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a point_with_units from another point <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pnt</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to construct it from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit_</parametername>
</parameternamelist>
<parameterdescription>
<para>The units of the point, default is UNSET </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>valid_</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the point contains valid data, default is true </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>confidence_</parametername>
</parameternamelist>
<parameterdescription>
<para>Confidence level of the point&apos;s value, default is 0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" line="172" column="5" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" bodystart="172" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="structILLIXR_1_1data__format_1_1point__with__units_1a6886b38b447b222ab85ccf7472d79cc8" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ILLIXR::data_format::point_with_units::point_with_units</definition>
        <argsstring>(const point_with_validity &amp;pnt, units::measurement_unit unit_=units::UNSET)</argsstring>
        <name>point_with_units</name>
        <qualifiedname>ILLIXR::data_format::point_with_units::point_with_units</qualifiedname>
        <param>
          <type>const point_with_validity &amp;</type>
          <declname>pnt</declname>
        </param>
        <param>
          <type>units::measurement_unit</type>
          <declname>unit_</declname>
          <defval>units::UNSET</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a point_with_units from a point_with_validity <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pnt</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to construct it from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit_</parametername>
</parameternamelist>
<parameterdescription>
<para>The units of the point, default is UNSET </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" line="182" column="14" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" bodystart="182" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="structILLIXR_1_1data__format_1_1point__with__units_1a0df7da00d30a45776c16258950877598" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>point_with_units</type>
        <definition>point_with_units ILLIXR::data_format::point_with_units::operator+</definition>
        <argsstring>(const point_with_units &amp;pnt) const</argsstring>
        <name>operator+</name>
        <qualifiedname>ILLIXR::data_format::point_with_units::operator+</qualifiedname>
        <param>
          <type>const point_with_units &amp;</type>
          <declname>pnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Addition operator between two points_with_units, units are not checked, but the validity flag is an AND of the two flags <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pnt</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to add to this one </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new point </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" line="191" column="22" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" bodystart="191" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="structILLIXR_1_1data__format_1_1point__with__units_1aa67e76afa2712f412f2d3266968fd648" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>point_with_units</type>
        <definition>point_with_units ILLIXR::data_format::point_with_units::operator-</definition>
        <argsstring>(const point_with_units &amp;pnt) const</argsstring>
        <name>operator-</name>
        <qualifiedname>ILLIXR::data_format::point_with_units::operator-</qualifiedname>
        <param>
          <type>const point_with_units &amp;</type>
          <declname>pnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtraction operator between two points_with_units, units are not checked, but the validity flag is an AND of the two flags <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pnt</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to subtract from this one </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new point </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" line="207" column="22" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" bodystart="207" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="structILLIXR_1_1data__format_1_1point__with__units_1ac66c200607898e5445a9a87ccc8a56eb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>point_with_units</type>
        <definition>point_with_units ILLIXR::data_format::point_with_units::operator+</definition>
        <argsstring>(const Eigen::Vector3f &amp;pnt) const</argsstring>
        <name>operator+</name>
        <qualifiedname>ILLIXR::data_format::point_with_units::operator+</qualifiedname>
        <param>
          <type>const Eigen::Vector3f &amp;</type>
          <declname>pnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Addition operator between a points_with_units and Eigen::Vector <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pnt</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to add to this one </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new point </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" line="222" column="22" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" bodystart="222" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="structILLIXR_1_1data__format_1_1point__with__units_1a9091673b01b26dba03c31e85657b4f29" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>point_with_units</type>
        <definition>point_with_units ILLIXR::data_format::point_with_units::operator-</definition>
        <argsstring>(const Eigen::Vector3f &amp;pnt) const</argsstring>
        <name>operator-</name>
        <qualifiedname>ILLIXR::data_format::point_with_units::operator-</qualifiedname>
        <param>
          <type>const Eigen::Vector3f &amp;</type>
          <declname>pnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtraction operator between a points_with_units and Eigen::Vector <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pnt</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to subtract from this one </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new point </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" line="237" column="22" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" bodystart="237" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="structILLIXR_1_1data__format_1_1point__with__units_1abc1f81a3349a4fe8b9128b97d274f244" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>point_with_units</type>
        <definition>point_with_units ILLIXR::data_format::point_with_units::operator*</definition>
        <argsstring>(const float val) const</argsstring>
        <name>operator*</name>
        <qualifiedname>ILLIXR::data_format::point_with_units::operator*</qualifiedname>
        <param>
          <type>const float</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplication operator to multiply a point_with_units by a constant value <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to multiply by </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new point </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" line="252" column="22" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" bodystart="252" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="structILLIXR_1_1data__format_1_1point__with__units_1a3291f436d72db4b33ed0a7f9834fff3e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>point_with_units</type>
        <definition>point_with_units ILLIXR::data_format::point_with_units::operator/</definition>
        <argsstring>(const float val) const</argsstring>
        <name>operator/</name>
        <qualifiedname>ILLIXR::data_format::point_with_units::operator/</qualifiedname>
        <param>
          <type>const float</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Division operator to divide a point_with_units by a constant value <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to divide by </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new point </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" line="267" column="22" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" bodystart="267" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="structILLIXR_1_1data__format_1_1point__with__units_1a6b1191b2ac2bbde2e4d254801690100a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ILLIXR::data_format::point_with_units::set</definition>
        <argsstring>(const float x_, const float y_, const float z_, units::measurement_unit unit_, bool valid_=true)</argsstring>
        <name>set</name>
        <qualifiedname>ILLIXR::data_format::point_with_units::set</qualifiedname>
        <param>
          <type>const float</type>
          <declname>x_</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>y_</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>z_</declname>
        </param>
        <param>
          <type>units::measurement_unit</type>
          <declname>unit_</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>valid_</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the coordinates based on the given x, y, and z coordinates <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The x coordinate in arbitrary units </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The y coordinate in arbitrary units </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The z coordinate in arbitrary units </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit_</parametername>
</parameternamelist>
<parameterdescription>
<para>The units of the point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>valid_</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the point contains valid data, default is true </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" line="285" column="10" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" bodystart="285" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="structILLIXR_1_1data__format_1_1point__with__units_1ad07a82ab1ad3ffec414eb7f6d54cbf83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ILLIXR::data_format::point_with_units::set</definition>
        <argsstring>(const Eigen::Vector3f &amp;vec)</argsstring>
        <name>set</name>
        <qualifiedname>ILLIXR::data_format::point_with_units::set</qualifiedname>
        <param>
          <type>const Eigen::Vector3f &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the coordinates based on the given Eigen::Vector <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to set the point from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" line="298" column="10" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" bodystart="298" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="structILLIXR_1_1data__format_1_1point__with__units_1a76c5329679bd460d3c7ffd941f7cc05f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ILLIXR::data_format::point_with_units::set</definition>
        <argsstring>(const point_with_units &amp;pnt)</argsstring>
        <name>set</name>
        <qualifiedname>ILLIXR::data_format::point_with_units::set</qualifiedname>
        <param>
          <type>const point_with_units &amp;</type>
          <declname>pnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the coordinates from another point_with_units <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pnt</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to set this one to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" line="308" column="10" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" bodystart="308" bodyend="314"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" line="141" column="1" bodyfile="/home/friedel/devel/ILLIXR/include/illixr/data_format/point.hpp" bodystart="141" bodyend="315"/>
    <listofallmembers>
      <member refid="structILLIXR_1_1data__format_1_1point__with__validity_1ae4b2f7a38b8dfcb2dfdb4b7396dfc83c" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::point_with_units</scope><name>confidence</name></member>
      <member refid="structILLIXR_1_1data__format_1_1point__with__units_1abc1f81a3349a4fe8b9128b97d274f244" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::point_with_units</scope><name>operator*</name></member>
      <member refid="structILLIXR_1_1data__format_1_1point__with__units_1a0df7da00d30a45776c16258950877598" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::point_with_units</scope><name>operator+</name></member>
      <member refid="structILLIXR_1_1data__format_1_1point__with__units_1ac66c200607898e5445a9a87ccc8a56eb" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::point_with_units</scope><name>operator+</name></member>
      <member refid="structILLIXR_1_1data__format_1_1point_1a5f121c9baa1a5927c19683207fff5c88" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::point_with_units</scope><name>operator+=</name></member>
      <member refid="structILLIXR_1_1data__format_1_1point__with__units_1aa67e76afa2712f412f2d3266968fd648" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::point_with_units</scope><name>operator-</name></member>
      <member refid="structILLIXR_1_1data__format_1_1point__with__units_1a9091673b01b26dba03c31e85657b4f29" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::point_with_units</scope><name>operator-</name></member>
      <member refid="structILLIXR_1_1data__format_1_1point_1ab8a0cd6a274553d00c43244c38cf8a0a" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::point_with_units</scope><name>operator-=</name></member>
      <member refid="structILLIXR_1_1data__format_1_1point__with__units_1a3291f436d72db4b33ed0a7f9834fff3e" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::point_with_units</scope><name>operator/</name></member>
      <member refid="structILLIXR_1_1data__format_1_1point_1a4876cffd1a044fd9948a0a2e4af58403" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::point_with_units</scope><name>operator=</name></member>
      <member refid="structILLIXR_1_1data__format_1_1point_1a4e4487c361cca164ccf773b4d19178fb" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::point_with_units</scope><name>operator=</name></member>
      <member refid="structILLIXR_1_1data__format_1_1point_1a352d21c81e43299dc15adf5ecdb52111" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::point_with_units</scope><name>point</name></member>
      <member refid="structILLIXR_1_1data__format_1_1point_1a778571bb8cee1db4c5129260a87009f2" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::point_with_units</scope><name>point</name></member>
      <member refid="structILLIXR_1_1data__format_1_1point__with__units_1abcce00ec27f502bd267ed0dfdc032a94" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::point_with_units</scope><name>point_with_units</name></member>
      <member refid="structILLIXR_1_1data__format_1_1point__with__units_1a0ad9270a96696e0d872adda2f0cc1836" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::point_with_units</scope><name>point_with_units</name></member>
      <member refid="structILLIXR_1_1data__format_1_1point__with__units_1a2031e5959ad18dec1af511b1475e631c" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::point_with_units</scope><name>point_with_units</name></member>
      <member refid="structILLIXR_1_1data__format_1_1point__with__units_1a6886b38b447b222ab85ccf7472d79cc8" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::point_with_units</scope><name>point_with_units</name></member>
      <member refid="structILLIXR_1_1data__format_1_1point__with__validity_1a1d4ecd932430c50f92383f3e165a34b1" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::point_with_units</scope><name>point_with_validity</name></member>
      <member refid="structILLIXR_1_1data__format_1_1point__with__validity_1a9a573a69f2253f0e782fe2648421f6e6" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::point_with_units</scope><name>point_with_validity</name></member>
      <member refid="structILLIXR_1_1data__format_1_1point__with__validity_1a813c1b147954eeab460afb7379819d80" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::point_with_units</scope><name>point_with_validity</name></member>
      <member refid="structILLIXR_1_1data__format_1_1point__with__units_1a6b1191b2ac2bbde2e4d254801690100a" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::point_with_units</scope><name>set</name></member>
      <member refid="structILLIXR_1_1data__format_1_1point__with__units_1ad07a82ab1ad3ffec414eb7f6d54cbf83" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::point_with_units</scope><name>set</name></member>
      <member refid="structILLIXR_1_1data__format_1_1point__with__units_1a76c5329679bd460d3c7ffd941f7cc05f" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::point_with_units</scope><name>set</name></member>
      <member refid="structILLIXR_1_1data__format_1_1point_1a16a51a168c1cebd9df0ff0779697e6df" prot="public" virt="non-virtual" ambiguityscope="ILLIXR::data_format::point_with_validity::"><scope>ILLIXR::data_format::point_with_units</scope><name>set</name></member>
      <member refid="structILLIXR_1_1data__format_1_1point__with__units_1a06beb8ee3db2e40c88f0196c9b680966" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::point_with_units</scope><name>unit</name></member>
      <member refid="structILLIXR_1_1data__format_1_1point__with__validity_1a6d3fff0c592b66b984bdf803a345ba36" prot="public" virt="non-virtual"><scope>ILLIXR::data_format::point_with_units</scope><name>valid</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
