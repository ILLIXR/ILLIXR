<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classILLIXR_1_1offload__rendering__server" kind="class" language="C++" prot="public">
    <compoundname>ILLIXR::offload_rendering_server</compoundname>
    <basecompoundref refid="classILLIXR_1_1threadloop" prot="public" virt="non-virtual">ILLIXR::threadloop</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">ILLIXR::vulkan::timewarp</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">ILLIXR::data_format::pose_prediction</basecompoundref>
    <basecompoundref prot="private" virt="non-virtual">std::enable_shared_from_this&lt; plugin &gt;</basecompoundref>
    <includes refid="offload__rendering__server_8hpp" local="no">offload_rendering_server.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classILLIXR_1_1offload__rendering__server_1a2bb7c1d4306e1511cf9b5c3c4c8affd3" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; spdlog::logger &gt;</type>
        <definition>std::shared_ptr&lt;spdlog::logger&gt; ILLIXR::offload_rendering_server::log_</definition>
        <argsstring></argsstring>
        <name>log_</name>
        <qualifiedname>ILLIXR::offload_rendering_server::log_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="210" column="55" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1offload__rendering__server_1aeed480245e23d2590cfcce593d8d1d09" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classILLIXR_1_1vulkan_1_1display__provider" kindref="compound">vulkan::display_provider</ref> &gt;</type>
        <definition>std::shared_ptr&lt;vulkan::display_provider&gt; ILLIXR::offload_rendering_server::display_provider_</definition>
        <argsstring></argsstring>
        <name>display_provider_</name>
        <qualifiedname>ILLIXR::offload_rendering_server::display_provider_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="211" column="45" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1offload__rendering__server_1a44c9637a8053018f791510082d678b59" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classILLIXR_1_1switchboard" kindref="compound">switchboard</ref> &gt;</type>
        <definition>std::shared_ptr&lt;switchboard&gt; ILLIXR::offload_rendering_server::switchboard_</definition>
        <argsstring></argsstring>
        <name>switchboard_</name>
        <qualifiedname>ILLIXR::offload_rendering_server::switchboard_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="212" column="58" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1offload__rendering__server_1acc0ab9ec23f7515b6ee1c496d9efb732" prot="private" static="no" mutable="no">
        <type>switchboard::network_writer&lt; data_format::compressed_frame &gt;</type>
        <definition>switchboard::network_writer&lt;data_format::compressed_frame&gt; ILLIXR::offload_rendering_server::frames_topic_</definition>
        <argsstring></argsstring>
        <name>frames_topic_</name>
        <qualifiedname>ILLIXR::offload_rendering_server::frames_topic_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="213" column="40" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1offload__rendering__server_1a06194015d0bb9ef58288093d58f902df" prot="private" static="no" mutable="no">
        <type><ref refid="classILLIXR_1_1switchboard_1_1reader" kindref="compound">switchboard::reader</ref>&lt; <ref refid="structILLIXR_1_1data__format_1_1fast__pose__type" kindref="compound">data_format::fast_pose_type</ref> &gt;</type>
        <definition>switchboard::reader&lt;data_format::fast_pose_type&gt; ILLIXR::offload_rendering_server::render_pose_</definition>
        <argsstring></argsstring>
        <name>render_pose_</name>
        <qualifiedname>ILLIXR::offload_rendering_server::render_pose_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="214" column="42" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1offload__rendering__server_1a4bcbe770404ce8dff7e480d3d4cdd622" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; vulkan::buffer_pool&lt; <ref refid="structILLIXR_1_1data__format_1_1fast__pose__type" kindref="compound">data_format::fast_pose_type</ref> &gt; &gt;</type>
        <definition>std::shared_ptr&lt;vulkan::buffer_pool&lt;data_format::fast_pose_type&gt; &gt; ILLIXR::offload_rendering_server::buffer_pool_</definition>
        <argsstring></argsstring>
        <name>buffer_pool_</name>
        <qualifiedname>ILLIXR::offload_rendering_server::buffer_pool_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="215" column="21" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1offload__rendering__server_1a86ff0e37e676db0e86a1fc30c7b580a4" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::array&lt; vulkan::ffmpeg_utils::ffmpeg_vk_frame, 2 &gt; &gt;</type>
        <definition>std::vector&lt;std::array&lt;vulkan::ffmpeg_utils::ffmpeg_vk_frame, 2&gt; &gt; ILLIXR::offload_rendering_server::avvk_color_frames_</definition>
        <argsstring></argsstring>
        <name>avvk_color_frames_</name>
        <qualifiedname>ILLIXR::offload_rendering_server::avvk_color_frames_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="216" column="17" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1offload__rendering__server_1a8c669daddfba7aec80ce66d4e4347947" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::array&lt; vulkan::ffmpeg_utils::ffmpeg_vk_frame, 2 &gt; &gt;</type>
        <definition>std::vector&lt;std::array&lt;vulkan::ffmpeg_utils::ffmpeg_vk_frame, 2&gt; &gt; ILLIXR::offload_rendering_server::avvk_depth_frames_</definition>
        <argsstring></argsstring>
        <name>avvk_depth_frames_</name>
        <qualifiedname>ILLIXR::offload_rendering_server::avvk_depth_frames_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="217" column="17" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1offload__rendering__server_1a852edcdebf7961ffe99e359b0826d3b9" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int ILLIXR::offload_rendering_server::framerate_</definition>
        <argsstring></argsstring>
        <name>framerate_</name>
        <qualifiedname>ILLIXR::offload_rendering_server::framerate_</qualifiedname>
        <initializer>= 144</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="219" column="10" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1offload__rendering__server_1add3f28b2c778581033a819affaf694cc" prot="private" static="no" mutable="no">
        <type>long</type>
        <definition>long ILLIXR::offload_rendering_server::bitrate_</definition>
        <argsstring></argsstring>
        <name>bitrate_</name>
        <qualifiedname>ILLIXR::offload_rendering_server::bitrate_</qualifiedname>
        <initializer>= OFFLOAD_RENDERING_BITRATE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="220" column="10" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1offload__rendering__server_1a7ebec832a4ad4bb7ab0a15f2710e9cf6" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool ILLIXR::offload_rendering_server::use_pass_depth_</definition>
        <argsstring></argsstring>
        <name>use_pass_depth_</name>
        <qualifiedname>ILLIXR::offload_rendering_server::use_pass_depth_</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="222" column="10" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1offload__rendering__server_1a2f1847d0c78b185dc3448dd851145b10" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool ILLIXR::offload_rendering_server::nalu_only_</definition>
        <argsstring></argsstring>
        <name>nalu_only_</name>
        <qualifiedname>ILLIXR::offload_rendering_server::nalu_only_</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="223" column="10" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1offload__rendering__server_1a4432e324a66d981a78ea43fb2737c965" prot="private" static="no" mutable="no">
        <type>AVBufferRef *</type>
        <definition>AVBufferRef* ILLIXR::offload_rendering_server::device_ctx_</definition>
        <argsstring></argsstring>
        <name>device_ctx_</name>
        <qualifiedname>ILLIXR::offload_rendering_server::device_ctx_</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="225" column="17" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1offload__rendering__server_1a4a82a9c74335423b63bd5379532f82d4" prot="private" static="no" mutable="no">
        <type>AVBufferRef *</type>
        <definition>AVBufferRef* ILLIXR::offload_rendering_server::cuda_device_ctx_</definition>
        <argsstring></argsstring>
        <name>cuda_device_ctx_</name>
        <qualifiedname>ILLIXR::offload_rendering_server::cuda_device_ctx_</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="226" column="17" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1offload__rendering__server_1a1ef9fd8d74f7c5870f933caa6fe7f631" prot="private" static="no" mutable="no">
        <type>AVBufferRef *</type>
        <definition>AVBufferRef* ILLIXR::offload_rendering_server::frame_ctx_</definition>
        <argsstring></argsstring>
        <name>frame_ctx_</name>
        <qualifiedname>ILLIXR::offload_rendering_server::frame_ctx_</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="227" column="17" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1offload__rendering__server_1a91014a80f079e1e3b2dd5535535cece2" prot="private" static="no" mutable="no">
        <type>AVBufferRef *</type>
        <definition>AVBufferRef* ILLIXR::offload_rendering_server::cuda_frame_ctx_</definition>
        <argsstring></argsstring>
        <name>cuda_frame_ctx_</name>
        <qualifiedname>ILLIXR::offload_rendering_server::cuda_frame_ctx_</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="228" column="17" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1offload__rendering__server_1a16825dd98d7a2b8a9ef01f0ce406a1a1" prot="private" static="no" mutable="no">
        <type>AVCodecContext *</type>
        <definition>AVCodecContext* ILLIXR::offload_rendering_server::codec_color_ctx_</definition>
        <argsstring></argsstring>
        <name>codec_color_ctx_</name>
        <qualifiedname>ILLIXR::offload_rendering_server::codec_color_ctx_</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="230" column="29" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1offload__rendering__server_1ab872061c816fce9df8909cafd31c51a9" prot="private" static="no" mutable="no">
        <type>std::array&lt; AVFrame *, 2 &gt;</type>
        <definition>std::array&lt;AVFrame*, 2&gt; ILLIXR::offload_rendering_server::encode_src_color_frames_</definition>
        <argsstring></argsstring>
        <name>encode_src_color_frames_</name>
        <qualifiedname>ILLIXR::offload_rendering_server::encode_src_color_frames_</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="231" column="17" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="231" bodyend="231"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1offload__rendering__server_1af4460c025fd7fd4a72acd2736f4fcbbc" prot="private" static="no" mutable="no">
        <type>std::array&lt; AVPacket *, 2 &gt;</type>
        <definition>std::array&lt;AVPacket*, 2&gt; ILLIXR::offload_rendering_server::encode_out_color_packets_</definition>
        <argsstring></argsstring>
        <name>encode_out_color_packets_</name>
        <qualifiedname>ILLIXR::offload_rendering_server::encode_out_color_packets_</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="232" column="16" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="232" bodyend="232"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1offload__rendering__server_1a256731fb905cdd9e410e6eb727ffc867" prot="private" static="no" mutable="no">
        <type>AVCodecContext *</type>
        <definition>AVCodecContext* ILLIXR::offload_rendering_server::codec_depth_ctx_</definition>
        <argsstring></argsstring>
        <name>codec_depth_ctx_</name>
        <qualifiedname>ILLIXR::offload_rendering_server::codec_depth_ctx_</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="234" column="29" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1offload__rendering__server_1a70d3b9e27577d44a0eddefacfa8fc862" prot="private" static="no" mutable="no">
        <type>std::array&lt; AVFrame *, 2 &gt;</type>
        <definition>std::array&lt;AVFrame*, 2&gt; ILLIXR::offload_rendering_server::encode_src_depth_frames_</definition>
        <argsstring></argsstring>
        <name>encode_src_depth_frames_</name>
        <qualifiedname>ILLIXR::offload_rendering_server::encode_src_depth_frames_</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="235" column="17" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="235" bodyend="235"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1offload__rendering__server_1a00e5c3fde450fcd1050b88b118c060ae" prot="private" static="no" mutable="no">
        <type>std::array&lt; AVPacket *, 2 &gt;</type>
        <definition>std::array&lt;AVPacket*, 2&gt; ILLIXR::offload_rendering_server::encode_out_depth_packets_</definition>
        <argsstring></argsstring>
        <name>encode_out_depth_packets_</name>
        <qualifiedname>ILLIXR::offload_rendering_server::encode_out_depth_packets_</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="236" column="16" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="236" bodyend="236"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1offload__rendering__server_1a209f6cad3d10f722e57b410a934f1fb8" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t ILLIXR::offload_rendering_server::frame_count_</definition>
        <argsstring></argsstring>
        <name>frame_count_</name>
        <qualifiedname>ILLIXR::offload_rendering_server::frame_count_</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="238" column="14" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1offload__rendering__server_1a68f9dbf9c89d71be9c521462f96e4a4a" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double ILLIXR::offload_rendering_server::fps_counter_</definition>
        <argsstring></argsstring>
        <name>fps_counter_</name>
        <qualifiedname>ILLIXR::offload_rendering_server::fps_counter_</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="240" column="52" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1offload__rendering__server_1a1555801679800f9571a5fa311e57b108" prot="private" static="no" mutable="no">
        <type>std::chrono::high_resolution_clock::time_point</type>
        <definition>std::chrono::high_resolution_clock::time_point ILLIXR::offload_rendering_server::fps_start_time_</definition>
        <argsstring></argsstring>
        <name>fps_start_time_</name>
        <qualifiedname>ILLIXR::offload_rendering_server::fps_start_time_</qualifiedname>
        <initializer>= std::chrono::high_resolution_clock::now()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="241" column="52" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1offload__rendering__server_1a86e28f0e9ce2d7118eb78fe8bbcb9161" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, uint32_t &gt;</type>
        <definition>std::map&lt;std::string, uint32_t&gt; ILLIXR::offload_rendering_server::metrics_</definition>
        <argsstring></argsstring>
        <name>metrics_</name>
        <qualifiedname>ILLIXR::offload_rendering_server::metrics_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="242" column="29" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1offload__rendering__server_1aed00e082b9c1cd370cad2f41c51615cc" prot="private" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t ILLIXR::offload_rendering_server::last_frame_ind_</definition>
        <argsstring></argsstring>
        <name>last_frame_ind_</name>
        <qualifiedname>ILLIXR::offload_rendering_server::last_frame_ind_</qualifiedname>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="244" column="14" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classILLIXR_1_1offload__rendering__server_1a5a5f7eaff4015f45a7884898d20b71ca" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; ILLIXR::offload_rendering_server::ready_</definition>
        <argsstring></argsstring>
        <name>ready_</name>
        <qualifiedname>ILLIXR::offload_rendering_server::ready_</qualifiedname>
        <initializer>{false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="246" column="17" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="246" bodyend="246"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classILLIXR_1_1offload__rendering__server_1a95fa48babe8cf2e8365efd2a86654a26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>offload_rendering_server::offload_rendering_server</definition>
        <argsstring>(const std::string &amp;name, phonebook *pb)</argsstring>
        <name>offload_rendering_server</name>
        <qualifiedname>ILLIXR::offload_rendering_server::offload_rendering_server</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classILLIXR_1_1phonebook" kindref="compound">phonebook</ref> *</type>
          <declname>pb</declname>
        </param>
        <briefdescription>
<para>Constructor initializes the server with configuration from environment variables. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Plugin name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pb</parametername>
</parameternamelist>
<parameterdescription>
<para>Phonebook for component lookup </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="37" column="5" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.cpp" bodystart="7" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1offload__rendering__server_1a0208c1b9dab065a5fce89b46d9a363c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void offload_rendering_server::start</definition>
        <argsstring>() override</argsstring>
        <name>start</name>
        <qualifiedname>ILLIXR::offload_rendering_server::start</qualifiedname>
        <reimplements refid="classILLIXR_1_1plugin_1a30d7294817fc5e8a8216fbfbca233cdc">start</reimplements>
        <briefdescription>
<para>A method which Spindle calls when it starts the component. </para>
        </briefdescription>
        <detaileddescription>
<para>This is necessary because a constructor can&apos;t call derived virtual methods (due to structure of C++). See <computeroutput>threadloop</computeroutput> for an example of this use-case. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="38" column="10" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.cpp" bodystart="31" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1offload__rendering__server_1a79eb0321b2e77e6453a65a8c873b049e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void offload_rendering_server::_p_thread_setup</definition>
        <argsstring>() override</argsstring>
        <name>_p_thread_setup</name>
        <qualifiedname>ILLIXR::offload_rendering_server::_p_thread_setup</qualifiedname>
        <reimplements refid="classILLIXR_1_1threadloop_1a00a89b3f3e9caa870f4c70bbc2f8fe97">_p_thread_setup</reimplements>
        <briefdescription>
<para>Gets called at setup time, from the new thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="39" column="10" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.cpp" bodystart="35" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1offload__rendering__server_1a78e5664cf5631716e41251650c6e7457" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void offload_rendering_server::setup</definition>
        <argsstring>(VkRenderPass render_pass, uint32_t subpass, std::shared_ptr&lt; vulkan::buffer_pool&lt; data_format::fast_pose_type &gt; &gt; _buffer_pool, bool input_texture_vulkan_coordinates) override</argsstring>
        <name>setup</name>
        <qualifiedname>ILLIXR::offload_rendering_server::setup</qualifiedname>
        <param>
          <type>VkRenderPass</type>
          <declname>render_pass</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>subpass</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; vulkan::buffer_pool&lt; <ref refid="structILLIXR_1_1data__format_1_1fast__pose__type" kindref="compound">data_format::fast_pose_type</ref> &gt; &gt;</type>
          <declname>_buffer_pool</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>input_texture_vulkan_coordinates</declname>
        </param>
        <briefdescription>
<para>Sets up the rendering pipeline and encoding resources. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>render_pass</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan render pass handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subpass</parametername>
</parameternamelist>
<parameterdescription>
<para>Subpass index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_buffer_pool</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer pool for frame management </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input_texture_vulkan_coordinates</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether input textures use Vulkan coordinates </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="48" column="10" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.cpp" bodystart="78" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1offload__rendering__server_1af673303192f91fc0c02333594603eaf4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ILLIXR::offload_rendering_server::is_external</definition>
        <argsstring>() override</argsstring>
        <name>is_external</name>
        <qualifiedname>ILLIXR::offload_rendering_server::is_external</qualifiedname>
        <briefdescription>
<para>Indicates this sink does not make use of the rendering pipeline in order for the access masks of the layout transitions to be set properly. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="56" column="10" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="56" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1offload__rendering__server_1a98f104e9e690977e099b3e2c49fda887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void offload_rendering_server::destroy</definition>
        <argsstring>() override</argsstring>
        <name>destroy</name>
        <qualifiedname>ILLIXR::offload_rendering_server::destroy</qualifiedname>
        <briefdescription>
<para>Cleanup resources on destruction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="63" column="10" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.cpp" bodystart="106" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1offload__rendering__server_1a552c4589d8d75bbd3cd602cc7254b6c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structILLIXR_1_1data__format_1_1fast__pose__type" kindref="compound">data_format::fast_pose_type</ref></type>
        <definition>fast_pose_type offload_rendering_server::get_fast_pose</definition>
        <argsstring>() const override</argsstring>
        <name>get_fast_pose</name>
        <qualifiedname>ILLIXR::offload_rendering_server::get_fast_pose</qualifiedname>
        <briefdescription>
<para>Get the latest pose for rendering. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="68" column="33" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.cpp" bodystart="128" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1offload__rendering__server_1a4bf5cad2e4f3b142f4acca73f93f9fd5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structILLIXR_1_1data__format_1_1pose__type" kindref="compound">data_format::pose_type</ref></type>
        <definition>data_format::pose_type ILLIXR::offload_rendering_server::get_true_pose</definition>
        <argsstring>() const override</argsstring>
        <name>get_true_pose</name>
        <qualifiedname>ILLIXR::offload_rendering_server::get_true_pose</qualifiedname>
        <briefdescription>
<para>Get the true pose (same as fast pose in this implementation) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="73" column="28" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="73" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1offload__rendering__server_1a806824b7829ee031e31745718bb294bd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structILLIXR_1_1data__format_1_1fast__pose__type" kindref="compound">data_format::fast_pose_type</ref></type>
        <definition>data_format::fast_pose_type ILLIXR::offload_rendering_server::get_fast_pose</definition>
        <argsstring>(time_point future_time) const override</argsstring>
        <name>get_fast_pose</name>
        <qualifiedname>ILLIXR::offload_rendering_server::get_fast_pose</qualifiedname>
        <param>
          <type>time_point</type>
          <declname>future_time</declname>
        </param>
        <briefdescription>
<para>Get predicted pose for a future time point (returns current pose) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="80" column="33" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="80" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1offload__rendering__server_1aca6f386ebf5e3aaa56781b5b93e0168c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ILLIXR::offload_rendering_server::fast_pose_reliable</definition>
        <argsstring>() const override</argsstring>
        <name>fast_pose_reliable</name>
        <qualifiedname>ILLIXR::offload_rendering_server::fast_pose_reliable</qualifiedname>
        <briefdescription>
<para>Check if fast pose data is reliable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="88" column="10" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="88" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1offload__rendering__server_1a2972885c4bb5f6d2dfd2e1e1ff28c50f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ILLIXR::offload_rendering_server::true_pose_reliable</definition>
        <argsstring>() const override</argsstring>
        <name>true_pose_reliable</name>
        <qualifiedname>ILLIXR::offload_rendering_server::true_pose_reliable</qualifiedname>
        <briefdescription>
<para>Check if true pose data is reliable (always false in this implementation) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="95" column="10" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1offload__rendering__server_1abdc3a6ad1ea4d083371ead2a365f92bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ILLIXR::offload_rendering_server::set_offset</definition>
        <argsstring>(const Eigen::Quaternionf &amp;orientation) override</argsstring>
        <name>set_offset</name>
        <qualifiedname>ILLIXR::offload_rendering_server::set_offset</qualifiedname>
        <param>
          <type>const Eigen::Quaternionf &amp;</type>
          <declname>orientation</declname>
        </param>
        <briefdescription>
<para>Set orientation offset (no-op in this implementation) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="102" column="10" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="102" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1offload__rendering__server_1a056e29357ab41256ab505dd030c74b25" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::Quaternionf</type>
        <definition>Eigen::Quaternionf ILLIXR::offload_rendering_server::get_offset</definition>
        <argsstring>() override</argsstring>
        <name>get_offset</name>
        <qualifiedname>ILLIXR::offload_rendering_server::get_offset</qualifiedname>
        <briefdescription>
<para>Get orientation offset (returns identity in this implementation) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="109" column="24" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1offload__rendering__server_1a060824eccee6f56459873aac5079acbf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structILLIXR_1_1data__format_1_1pose__type" kindref="compound">data_format::pose_type</ref></type>
        <definition>data_format::pose_type ILLIXR::offload_rendering_server::correct_pose</definition>
        <argsstring>(const data_format::pose_type &amp;pose) const override</argsstring>
        <name>correct_pose</name>
        <qualifiedname>ILLIXR::offload_rendering_server::correct_pose</qualifiedname>
        <param>
          <type>const <ref refid="structILLIXR_1_1data__format_1_1pose__type" kindref="compound">data_format::pose_type</ref> &amp;</type>
          <declname>pose</declname>
        </param>
        <briefdescription>
<para>Correct pose data (no-op in this implementation) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="116" column="28" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="116" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1offload__rendering__server_1a5120d9f862aded126975ec12390155d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ILLIXR::offload_rendering_server::record_command_buffer</definition>
        <argsstring>(VkCommandBuffer commandBuffer, VkFramebuffer framebuffer, int buffer_ind, bool left) override</argsstring>
        <name>record_command_buffer</name>
        <qualifiedname>ILLIXR::offload_rendering_server::record_command_buffer</qualifiedname>
        <param>
          <type>VkCommandBuffer</type>
          <declname>commandBuffer</declname>
        </param>
        <param>
          <type>VkFramebuffer</type>
          <declname>framebuffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>buffer_ind</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>left</declname>
        </param>
        <briefdescription>
<para>Record command buffer (no-op in this implementation) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="124" column="10" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="124" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1offload__rendering__server_1a0686de9190c73570b75eb6b2363baed6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ILLIXR::offload_rendering_server::update_uniforms</definition>
        <argsstring>(const data_format::pose_type &amp;r_pose) override</argsstring>
        <name>update_uniforms</name>
        <qualifiedname>ILLIXR::offload_rendering_server::update_uniforms</qualifiedname>
        <param>
          <type>const <ref refid="structILLIXR_1_1data__format_1_1pose__type" kindref="compound">data_format::pose_type</ref> &amp;</type>
          <declname>r_pose</declname>
        </param>
        <briefdescription>
<para>Update uniforms (no-op in this implementation) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="134" column="10" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="134" bodyend="136"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="classILLIXR_1_1offload__rendering__server_1adf6d5c0717919c71c6d10d49f968a4e1" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classILLIXR_1_1threadloop_1a26c08942158dc019cbc78c9880417652" kindref="member">skip_option</ref></type>
        <definition>skip_option ILLIXR::offload_rendering_server::_p_should_skip</definition>
        <argsstring>() override</argsstring>
        <name>_p_should_skip</name>
        <qualifiedname>ILLIXR::offload_rendering_server::_p_should_skip</qualifiedname>
        <reimplements refid="classILLIXR_1_1threadloop_1a9ff83bb9e47beff3efccbd26bc3e874a">_p_should_skip</reimplements>
        <briefdescription>
<para>Determines if the current iteration should be skipped. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="142" column="17" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="142" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1offload__rendering__server_1ae851a6d01f0d942885b4e9ec5a6245c4" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void offload_rendering_server::_p_one_iteration</definition>
        <argsstring>() override</argsstring>
        <name>_p_one_iteration</name>
        <qualifiedname>ILLIXR::offload_rendering_server::_p_one_iteration</qualifiedname>
        <reimplements refid="classILLIXR_1_1threadloop_1a609dc44adc6c56cf304408c7ac5f15be">_p_one_iteration</reimplements>
        <briefdescription>
<para>Main processing loop for frame encoding and transmission. </para>
        </briefdescription>
        <detaileddescription>
<para>This method:<orderedlist>
<listitem><para>Captures the latest rendered frame</para>
</listitem><listitem><para>Encodes it using hardware acceleration</para>
</listitem><listitem><para>Transmits it to the client</para>
</listitem><listitem><para>Tracks performance metrics </para>
</listitem></orderedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="155" column="10" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.cpp" bodystart="137" bodyend="261"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classILLIXR_1_1offload__rendering__server_1a84f40e4a08a80118d1604b142debd8ba" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void offload_rendering_server::enqueue_for_network_send</definition>
        <argsstring>(data_format::fast_pose_type &amp;pose)</argsstring>
        <name>enqueue_for_network_send</name>
        <qualifiedname>ILLIXR::offload_rendering_server::enqueue_for_network_send</qualifiedname>
        <param>
          <type><ref refid="structILLIXR_1_1data__format_1_1fast__pose__type" kindref="compound">data_format::fast_pose_type</ref> &amp;</type>
          <declname>pose</declname>
        </param>
        <briefdescription>
<para>Sends encoded frame data to the client. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pose</parametername>
</parameternamelist>
<parameterdescription>
<para>The pose data associated with the frame </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="162" column="10" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.cpp" bodystart="263" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1offload__rendering__server_1a60734f7e87e62cea944b8c939c13853b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void offload_rendering_server::ffmpeg_init_device</definition>
        <argsstring>()</argsstring>
        <name>ffmpeg_init_device</name>
        <qualifiedname>ILLIXR::offload_rendering_server::ffmpeg_init_device</qualifiedname>
        <briefdescription>
<para>Initializes the FFmpeg Vulkan device context. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets up the Vulkan device context for FFmpeg hardware acceleration, configuring queues and extensions for optimal performance. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="170" column="10" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.cpp" bodystart="278" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1offload__rendering__server_1a8dd0bdeaa8372c1682fa14e918a04ce6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void offload_rendering_server::ffmpeg_init_cuda_device</definition>
        <argsstring>()</argsstring>
        <name>ffmpeg_init_cuda_device</name>
        <qualifiedname>ILLIXR::offload_rendering_server::ffmpeg_init_cuda_device</qualifiedname>
        <briefdescription>
<para>Initializes the FFmpeg CUDA device context for hardware acceleration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="175" column="10" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.cpp" bodystart="337" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1offload__rendering__server_1a5f8b5f2e9cbcb311703f57e79a61c562" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void offload_rendering_server::ffmpeg_init_frame_ctx</definition>
        <argsstring>()</argsstring>
        <name>ffmpeg_init_frame_ctx</name>
        <qualifiedname>ILLIXR::offload_rendering_server::ffmpeg_init_frame_ctx</qualifiedname>
        <briefdescription>
<para>Initializes the FFmpeg frame context for Vulkan frames. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets up the frame context with appropriate pixel format and dimensions for hardware-accelerated frame processing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="183" column="10" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.cpp" bodystart="346" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1offload__rendering__server_1a73dddf2dafdc8e18044540434c2204b9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void offload_rendering_server::ffmpeg_init_cuda_frame_ctx</definition>
        <argsstring>()</argsstring>
        <name>ffmpeg_init_cuda_frame_ctx</name>
        <qualifiedname>ILLIXR::offload_rendering_server::ffmpeg_init_cuda_frame_ctx</qualifiedname>
        <briefdescription>
<para>Initializes the FFmpeg CUDA frame context. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets up the CUDA frame context for hardware-accelerated encoding, configuring frame dimensions and format to match the Vulkan frames. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="191" column="10" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.cpp" bodystart="373" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1offload__rendering__server_1a4470b0e1188dfb1335537e26c65d9d31" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void offload_rendering_server::ffmpeg_init_buffer_pool</definition>
        <argsstring>()</argsstring>
        <name>ffmpeg_init_buffer_pool</name>
        <qualifiedname>ILLIXR::offload_rendering_server::ffmpeg_init_buffer_pool</qualifiedname>
        <briefdescription>
<para>Initializes the frame buffer pool for both color and depth frames. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates and configures AVFrame objects for both color and depth frames, setting up the necessary Vulkan and CUDA resources for hardware acceleration. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="199" column="10" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.cpp" bodystart="392" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="classILLIXR_1_1offload__rendering__server_1a1b02102655f0fff54d7d40a61efed6e7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void offload_rendering_server::ffmpeg_init_encoder</definition>
        <argsstring>()</argsstring>
        <name>ffmpeg_init_encoder</name>
        <qualifiedname>ILLIXR::offload_rendering_server::ffmpeg_init_encoder</qualifiedname>
        <briefdescription>
<para>Initializes the FFmpeg encoders for color and depth frames. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets up hardware-accelerated encoders with optimal settings for low-latency streaming of VR content. Configures separate encoders for color and depth frames if depth transmission is enabled. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="208" column="10" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.cpp" bodystart="524" bodyend="606"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Main server implementation for offload rendering. </para>
    </briefdescription>
    <detaileddescription>
<para>This class handles:<orderedlist>
<listitem><para>Frame capture from the rendering pipeline</para>
</listitem><listitem><para>Hardware-accelerated encoding using FFmpeg/CUDA</para>
</listitem><listitem><para>Network transmission of encoded frames</para>
</listitem><listitem><para>Pose synchronization with the client </para>
</listitem></orderedlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>ILLIXR::offload_rendering_server</label>
        <link refid="classILLIXR_1_1offload__rendering__server"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>ILLIXR::plugin</label>
        <link refid="classILLIXR_1_1plugin"/>
      </node>
      <node id="2">
        <label>ILLIXR::threadloop</label>
        <link refid="classILLIXR_1_1threadloop"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>ILLIXR::offload_rendering_server</label>
        <link refid="classILLIXR_1_1offload__rendering__server"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>ILLIXR::phonebook</label>
        <link refid="classILLIXR_1_1phonebook"/>
      </node>
      <node id="3">
        <label>ILLIXR::plugin</label>
        <link refid="classILLIXR_1_1plugin"/>
        <childnode refid="4" relation="usage">
          <edgelabel>phonebook_</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>ILLIXR::threadloop</label>
        <link refid="classILLIXR_1_1threadloop"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" line="26" column="1" bodyfile="/home/friedel/devel/ILLIXR/plugins/offload_rendering_server/offload_rendering_server.hpp" bodystart="30" bodyend="247"/>
    <listofallmembers>
      <member refid="classILLIXR_1_1data__format_1_1pose__prediction_1a071229a53e9c710cffd58e0164297394" prot="protected" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>_correct_pose</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1ae851a6d01f0d942885b4e9ec5a6245c4" prot="protected" virt="virtual"><scope>ILLIXR::offload_rendering_server</scope><name>_p_one_iteration</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1adf6d5c0717919c71c6d10d49f968a4e1" prot="protected" virt="virtual"><scope>ILLIXR::offload_rendering_server</scope><name>_p_should_skip</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a79eb0321b2e77e6453a65a8c873b049e" prot="public" virt="virtual"><scope>ILLIXR::offload_rendering_server</scope><name>_p_thread_setup</name></member>
      <member refid="classILLIXR_1_1data__format_1_1pose__prediction_1a8d55392ab96fa14ce9131dff2982676a" prot="protected" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>_set_offset</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a86ff0e37e676db0e86a1fc30c7b580a4" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>avvk_color_frames_</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a8c669daddfba7aec80ce66d4e4347947" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>avvk_depth_frames_</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1add3f28b2c778581033a819affaf694cc" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>bitrate_</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a4bcbe770404ce8dff7e480d3d4cdd622" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>buffer_pool_</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a16825dd98d7a2b8a9ef01f0ce406a1a1" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>codec_color_ctx_</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a256731fb905cdd9e410e6eb727ffc867" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>codec_depth_ctx_</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a060824eccee6f56459873aac5079acbf" prot="public" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>correct_pose</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a4a82a9c74335423b63bd5379532f82d4" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>cuda_device_ctx_</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a91014a80f079e1e3b2dd5535535cece2" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>cuda_frame_ctx_</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a98f104e9e690977e099b3e2c49fda887" prot="public" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>destroy</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a4432e324a66d981a78ea43fb2737c965" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>device_ctx_</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1aeed480245e23d2590cfcce593d8d1d09" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>display_provider_</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1af4460c025fd7fd4a72acd2736f4fcbbc" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>encode_out_color_packets_</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a00e5c3fde450fcd1050b88b118c060ae" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>encode_out_depth_packets_</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1ab872061c816fce9df8909cafd31c51a9" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>encode_src_color_frames_</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a70d3b9e27577d44a0eddefacfa8fc862" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>encode_src_depth_frames_</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a84f40e4a08a80118d1604b142debd8ba" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>enqueue_for_network_send</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1aca6f386ebf5e3aaa56781b5b93e0168c" prot="public" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>fast_pose_reliable</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a4470b0e1188dfb1335537e26c65d9d31" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>ffmpeg_init_buffer_pool</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a8dd0bdeaa8372c1682fa14e918a04ce6" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>ffmpeg_init_cuda_device</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a73dddf2dafdc8e18044540434c2204b9" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>ffmpeg_init_cuda_frame_ctx</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a60734f7e87e62cea944b8c939c13853b" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>ffmpeg_init_device</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a1b02102655f0fff54d7d40a61efed6e7" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>ffmpeg_init_encoder</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a5f8b5f2e9cbcb311703f57e79a61c562" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>ffmpeg_init_frame_ctx</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a68f9dbf9c89d71be9c521462f96e4a4a" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>fps_counter_</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a1555801679800f9571a5fa311e57b108" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>fps_start_time_</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a209f6cad3d10f722e57b410a934f1fb8" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>frame_count_</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a1ef9fd8d74f7c5870f933caa6fe7f631" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>frame_ctx_</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a852edcdebf7961ffe99e359b0826d3b9" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>framerate_</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1acc0ab9ec23f7515b6ee1c496d9efb732" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>frames_topic_</name></member>
      <member refid="classILLIXR_1_1plugin_1afe52734e7edc87bd0bf974caf112961b" prot="protected" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>gen_guid_</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a552c4589d8d75bbd3cd602cc7254b6c5" prot="public" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>get_fast_pose</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a806824b7829ee031e31745718bb294bd" prot="public" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>get_fast_pose</name></member>
      <member refid="classILLIXR_1_1plugin_1aebda022998bd35983e83f391dc0e5193" prot="public" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>get_name</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a056e29357ab41256ab505dd030c74b25" prot="public" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>get_offset</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a4bf5cad2e4f3b142f4acca73f93f9fd5" prot="public" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>get_true_pose</name></member>
      <member refid="classILLIXR_1_1plugin_1aaedb3f9178bdd11e53815e158454aaf3" prot="protected" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>id_</name></member>
      <member refid="classILLIXR_1_1threadloop_1a3e12891e504c782da98e21328dbcf0af" prot="public" virt="virtual"><scope>ILLIXR::offload_rendering_server</scope><name>internal_stop</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1af673303192f91fc0c02333594603eaf4" prot="public" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>is_external</name></member>
      <member refid="classILLIXR_1_1threadloop_1a54e0814711e7a582630d38d45ddbe3f3" prot="protected" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>iteration_no</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1aed00e082b9c1cd370cad2f41c51615cc" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>last_frame_ind_</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a2bb7c1d4306e1511cf9b5c3c4c8affd3" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>log_</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a86e28f0e9ce2d7118eb78fe8bbcb9161" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>metrics_</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a2f1847d0c78b185dc3448dd851145b10" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>nalu_only_</name></member>
      <member refid="classILLIXR_1_1plugin_1aa963c518af83966173840a8558490888" prot="protected" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>name_</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a95fa48babe8cf2e8365efd2a86654a26" prot="public" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>offload_rendering_server</name></member>
      <member refid="classILLIXR_1_1plugin_1a6f7a2a9012350591c00d67a5bc0fd5a6" prot="protected" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>phonebook_</name></member>
      <member refid="classILLIXR_1_1vulkan_1_1render__pass_1a59471ec4496602094f87dcdd740c3fa8" prot="public" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>pipeline_</name></member>
      <member refid="classILLIXR_1_1plugin_1abc91c0e5be180a8e0bbeaf114a127f17" prot="public" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>plugin</name></member>
      <member refid="classILLIXR_1_1plugin_1a8d40c2421cde09079372d12bfe7d45fe" prot="protected" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>plugin_logger_</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a5a5f7eaff4015f45a7884898d20b71ca" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>ready_</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a5120d9f862aded126975ec12390155d6" prot="public" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>record_command_buffer</name></member>
      <member refid="classILLIXR_1_1plugin_1aef671d0cd9b6de45d3ade16dedbf4974" prot="protected" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>record_logger_</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a06194015d0bb9ef58288093d58f902df" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>render_pose_</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1abdc3a6ad1ea4d083371ead2a365f92bb" prot="public" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>set_offset</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a78e5664cf5631716e41251650c6e7457" prot="public" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>setup</name></member>
      <member refid="classILLIXR_1_1vulkan_1_1timewarp_1a5f5662cf14f4aa19aed93bf7c217f44a" prot="public" virt="pure-virtual" ambiguityscope="ILLIXR::vulkan::timewarp::"><scope>ILLIXR::offload_rendering_server</scope><name>setup</name></member>
      <member refid="classILLIXR_1_1threadloop_1a75009fa785455bdb4b285424f0494bf7" prot="protected" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>should_terminate</name></member>
      <member refid="classILLIXR_1_1threadloop_1a8f6ce8b95d3d9aadf83e4e1414477cd0" prot="protected" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>skip_no</name></member>
      <member refid="classILLIXR_1_1threadloop_1a26c08942158dc019cbc78c9880417652" prot="protected" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>skip_option</name></member>
      <member refid="classILLIXR_1_1plugin_1a7c1c7c1a0ec2e43bfa1118586a28932f" prot="public" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>spd_add_file_sink</name></member>
      <member refid="classILLIXR_1_1plugin_1a569297189ef365cf93f6a95202c76d76" prot="public" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>spdlogger</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a0208c1b9dab065a5fce89b46d9a363c6" prot="public" virt="virtual"><scope>ILLIXR::offload_rendering_server</scope><name>start</name></member>
      <member refid="classILLIXR_1_1threadloop_1a7a968606c7ddfbd1ac6b0fb067ecc5a5" prot="public" virt="virtual"><scope>ILLIXR::offload_rendering_server</scope><name>stop</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a44c9637a8053018f791510082d678b59" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>switchboard_</name></member>
      <member refid="classILLIXR_1_1threadloop_1a8e69bfe104a92c0b98caa5583439c34a" prot="public" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>threadloop</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a2972885c4bb5f6d2dfd2e1e1ff28c50f" prot="public" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>true_pose_reliable</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a0686de9190c73570b75eb6b2363baed6" prot="public" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>update_uniforms</name></member>
      <member refid="classILLIXR_1_1offload__rendering__server_1a7ebec832a4ad4bb7ab0a15f2710e9cf6" prot="private" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>use_pass_depth_</name></member>
      <member refid="classILLIXR_1_1plugin_1a44d7b00c86e227bbc1a0b221da43d454" prot="public" virt="virtual"><scope>ILLIXR::offload_rendering_server</scope><name>~plugin</name></member>
      <member refid="classILLIXR_1_1data__format_1_1pose__prediction_1acea6d7b4f9b4d15cda0289398b67892f" prot="public" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>~pose_prediction</name></member>
      <member refid="classILLIXR_1_1vulkan_1_1render__pass_1ae57133967b6196133e8832759f3fc881" prot="public" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>~render_pass</name></member>
      <member refid="classILLIXR_1_1phonebook_1_1service_1a6bc6e64a0d9b70223989fc3fb98c2d0d" prot="public" virt="virtual"><scope>ILLIXR::offload_rendering_server</scope><name>~service</name></member>
      <member refid="classILLIXR_1_1threadloop_1afbf7b56801b484b60e9cf43448332195" prot="public" virt="non-virtual"><scope>ILLIXR::offload_rendering_server</scope><name>~threadloop</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
