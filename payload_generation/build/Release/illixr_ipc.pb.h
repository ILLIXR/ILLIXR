// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: illixr_ipc.proto

#ifndef PROTOBUF_INCLUDED_illixr_5fipc_2eproto
#define PROTOBUF_INCLUDED_illixr_5fipc_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_illixr_5fipc_2eproto 

namespace protobuf_illixr_5fipc_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_illixr_5fipc_2eproto
namespace ILLIXRIPC {
class Color;
class ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class IPCPayload;
class IPCPayloadDefaultTypeInternal;
extern IPCPayloadDefaultTypeInternal _IPCPayload_default_instance_;
class Mesh;
class MeshDefaultTypeInternal;
extern MeshDefaultTypeInternal _Mesh_default_instance_;
class Vector3;
class Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
}  // namespace ILLIXRIPC
namespace google {
namespace protobuf {
template<> ::ILLIXRIPC::Color* Arena::CreateMaybeMessage<::ILLIXRIPC::Color>(Arena*);
template<> ::ILLIXRIPC::IPCPayload* Arena::CreateMaybeMessage<::ILLIXRIPC::IPCPayload>(Arena*);
template<> ::ILLIXRIPC::Mesh* Arena::CreateMaybeMessage<::ILLIXRIPC::Mesh>(Arena*);
template<> ::ILLIXRIPC::Vector3* Arena::CreateMaybeMessage<::ILLIXRIPC::Vector3>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ILLIXRIPC {

// ===================================================================

class Vector3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ILLIXRIPC.Vector3) */ {
 public:
  Vector3();
  virtual ~Vector3();

  Vector3(const Vector3& from);

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(Vector3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Vector3* other);
  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector3* New() const final {
    return CreateMaybeMessage<Vector3>(NULL);
  }

  Vector3* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Vector3& from);
  void MergeFrom(const Vector3& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:ILLIXRIPC.Vector3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_illixr_5fipc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Color : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ILLIXRIPC.Color) */ {
 public:
  Color();
  virtual ~Color();

  Color(const Color& from);

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(Color&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Color& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Color* other);
  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Color* New() const final {
    return CreateMaybeMessage<Color>(NULL);
  }

  Color* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float r = 1;
  void clear_r();
  static const int kRFieldNumber = 1;
  float r() const;
  void set_r(float value);

  // float g = 2;
  void clear_g();
  static const int kGFieldNumber = 2;
  float g() const;
  void set_g(float value);

  // float b = 3;
  void clear_b();
  static const int kBFieldNumber = 3;
  float b() const;
  void set_b(float value);

  // @@protoc_insertion_point(class_scope:ILLIXRIPC.Color)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float r_;
  float g_;
  float b_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_illixr_5fipc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Mesh : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ILLIXRIPC.Mesh) */ {
 public:
  Mesh();
  virtual ~Mesh();

  Mesh(const Mesh& from);

  inline Mesh& operator=(const Mesh& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mesh(Mesh&& from) noexcept
    : Mesh() {
    *this = ::std::move(from);
  }

  inline Mesh& operator=(Mesh&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Mesh& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mesh* internal_default_instance() {
    return reinterpret_cast<const Mesh*>(
               &_Mesh_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Mesh* other);
  friend void swap(Mesh& a, Mesh& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mesh* New() const final {
    return CreateMaybeMessage<Mesh>(NULL);
  }

  Mesh* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mesh>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mesh& from);
  void MergeFrom(const Mesh& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mesh* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ILLIXRIPC.Vector3 vertices = 1;
  int vertices_size() const;
  void clear_vertices();
  static const int kVerticesFieldNumber = 1;
  ::ILLIXRIPC::Vector3* mutable_vertices(int index);
  ::google::protobuf::RepeatedPtrField< ::ILLIXRIPC::Vector3 >*
      mutable_vertices();
  const ::ILLIXRIPC::Vector3& vertices(int index) const;
  ::ILLIXRIPC::Vector3* add_vertices();
  const ::google::protobuf::RepeatedPtrField< ::ILLIXRIPC::Vector3 >&
      vertices() const;

  // repeated int32 faces = 2;
  int faces_size() const;
  void clear_faces();
  static const int kFacesFieldNumber = 2;
  ::google::protobuf::int32 faces(int index) const;
  void set_faces(int index, ::google::protobuf::int32 value);
  void add_faces(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      faces() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_faces();

  // repeated .ILLIXRIPC.Vector3 normals = 3;
  int normals_size() const;
  void clear_normals();
  static const int kNormalsFieldNumber = 3;
  ::ILLIXRIPC::Vector3* mutable_normals(int index);
  ::google::protobuf::RepeatedPtrField< ::ILLIXRIPC::Vector3 >*
      mutable_normals();
  const ::ILLIXRIPC::Vector3& normals(int index) const;
  ::ILLIXRIPC::Vector3* add_normals();
  const ::google::protobuf::RepeatedPtrField< ::ILLIXRIPC::Vector3 >&
      normals() const;

  // repeated .ILLIXRIPC.Color vertexColors = 4;
  int vertexcolors_size() const;
  void clear_vertexcolors();
  static const int kVertexColorsFieldNumber = 4;
  ::ILLIXRIPC::Color* mutable_vertexcolors(int index);
  ::google::protobuf::RepeatedPtrField< ::ILLIXRIPC::Color >*
      mutable_vertexcolors();
  const ::ILLIXRIPC::Color& vertexcolors(int index) const;
  ::ILLIXRIPC::Color* add_vertexcolors();
  const ::google::protobuf::RepeatedPtrField< ::ILLIXRIPC::Color >&
      vertexcolors() const;

  // @@protoc_insertion_point(class_scope:ILLIXRIPC.Mesh)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ILLIXRIPC::Vector3 > vertices_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > faces_;
  mutable int _faces_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::ILLIXRIPC::Vector3 > normals_;
  ::google::protobuf::RepeatedPtrField< ::ILLIXRIPC::Color > vertexcolors_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_illixr_5fipc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IPCPayload : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ILLIXRIPC.IPCPayload) */ {
 public:
  IPCPayload();
  virtual ~IPCPayload();

  IPCPayload(const IPCPayload& from);

  inline IPCPayload& operator=(const IPCPayload& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IPCPayload(IPCPayload&& from) noexcept
    : IPCPayload() {
    *this = ::std::move(from);
  }

  inline IPCPayload& operator=(IPCPayload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IPCPayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IPCPayload* internal_default_instance() {
    return reinterpret_cast<const IPCPayload*>(
               &_IPCPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(IPCPayload* other);
  friend void swap(IPCPayload& a, IPCPayload& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IPCPayload* New() const final {
    return CreateMaybeMessage<IPCPayload>(NULL);
  }

  IPCPayload* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IPCPayload>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IPCPayload& from);
  void MergeFrom(const IPCPayload& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPCPayload* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ILLIXRIPC.Mesh meshes = 2;
  int meshes_size() const;
  void clear_meshes();
  static const int kMeshesFieldNumber = 2;
  ::ILLIXRIPC::Mesh* mutable_meshes(int index);
  ::google::protobuf::RepeatedPtrField< ::ILLIXRIPC::Mesh >*
      mutable_meshes();
  const ::ILLIXRIPC::Mesh& meshes(int index) const;
  ::ILLIXRIPC::Mesh* add_meshes();
  const ::google::protobuf::RepeatedPtrField< ::ILLIXRIPC::Mesh >&
      meshes() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes dracomesh = 3;
  void clear_dracomesh();
  static const int kDracomeshFieldNumber = 3;
  const ::std::string& dracomesh() const;
  void set_dracomesh(const ::std::string& value);
  #if LANG_CXX11
  void set_dracomesh(::std::string&& value);
  #endif
  void set_dracomesh(const char* value);
  void set_dracomesh(const void* value, size_t size);
  ::std::string* mutable_dracomesh();
  ::std::string* release_dracomesh();
  void set_allocated_dracomesh(::std::string* dracomesh);

  // @@protoc_insertion_point(class_scope:ILLIXRIPC.IPCPayload)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ILLIXRIPC::Mesh > meshes_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr dracomesh_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_illixr_5fipc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector3

// float x = 1;
inline void Vector3::clear_x() {
  x_ = 0;
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:ILLIXRIPC.Vector3.x)
  return x_;
}
inline void Vector3::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ILLIXRIPC.Vector3.x)
}

// float y = 2;
inline void Vector3::clear_y() {
  y_ = 0;
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:ILLIXRIPC.Vector3.y)
  return y_;
}
inline void Vector3::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ILLIXRIPC.Vector3.y)
}

// float z = 3;
inline void Vector3::clear_z() {
  z_ = 0;
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:ILLIXRIPC.Vector3.z)
  return z_;
}
inline void Vector3::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:ILLIXRIPC.Vector3.z)
}

// -------------------------------------------------------------------

// Color

// float r = 1;
inline void Color::clear_r() {
  r_ = 0;
}
inline float Color::r() const {
  // @@protoc_insertion_point(field_get:ILLIXRIPC.Color.r)
  return r_;
}
inline void Color::set_r(float value) {
  
  r_ = value;
  // @@protoc_insertion_point(field_set:ILLIXRIPC.Color.r)
}

// float g = 2;
inline void Color::clear_g() {
  g_ = 0;
}
inline float Color::g() const {
  // @@protoc_insertion_point(field_get:ILLIXRIPC.Color.g)
  return g_;
}
inline void Color::set_g(float value) {
  
  g_ = value;
  // @@protoc_insertion_point(field_set:ILLIXRIPC.Color.g)
}

// float b = 3;
inline void Color::clear_b() {
  b_ = 0;
}
inline float Color::b() const {
  // @@protoc_insertion_point(field_get:ILLIXRIPC.Color.b)
  return b_;
}
inline void Color::set_b(float value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:ILLIXRIPC.Color.b)
}

// -------------------------------------------------------------------

// Mesh

// repeated .ILLIXRIPC.Vector3 vertices = 1;
inline int Mesh::vertices_size() const {
  return vertices_.size();
}
inline void Mesh::clear_vertices() {
  vertices_.Clear();
}
inline ::ILLIXRIPC::Vector3* Mesh::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:ILLIXRIPC.Mesh.vertices)
  return vertices_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ILLIXRIPC::Vector3 >*
Mesh::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:ILLIXRIPC.Mesh.vertices)
  return &vertices_;
}
inline const ::ILLIXRIPC::Vector3& Mesh::vertices(int index) const {
  // @@protoc_insertion_point(field_get:ILLIXRIPC.Mesh.vertices)
  return vertices_.Get(index);
}
inline ::ILLIXRIPC::Vector3* Mesh::add_vertices() {
  // @@protoc_insertion_point(field_add:ILLIXRIPC.Mesh.vertices)
  return vertices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ILLIXRIPC::Vector3 >&
Mesh::vertices() const {
  // @@protoc_insertion_point(field_list:ILLIXRIPC.Mesh.vertices)
  return vertices_;
}

// repeated int32 faces = 2;
inline int Mesh::faces_size() const {
  return faces_.size();
}
inline void Mesh::clear_faces() {
  faces_.Clear();
}
inline ::google::protobuf::int32 Mesh::faces(int index) const {
  // @@protoc_insertion_point(field_get:ILLIXRIPC.Mesh.faces)
  return faces_.Get(index);
}
inline void Mesh::set_faces(int index, ::google::protobuf::int32 value) {
  faces_.Set(index, value);
  // @@protoc_insertion_point(field_set:ILLIXRIPC.Mesh.faces)
}
inline void Mesh::add_faces(::google::protobuf::int32 value) {
  faces_.Add(value);
  // @@protoc_insertion_point(field_add:ILLIXRIPC.Mesh.faces)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Mesh::faces() const {
  // @@protoc_insertion_point(field_list:ILLIXRIPC.Mesh.faces)
  return faces_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Mesh::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:ILLIXRIPC.Mesh.faces)
  return &faces_;
}

// repeated .ILLIXRIPC.Vector3 normals = 3;
inline int Mesh::normals_size() const {
  return normals_.size();
}
inline void Mesh::clear_normals() {
  normals_.Clear();
}
inline ::ILLIXRIPC::Vector3* Mesh::mutable_normals(int index) {
  // @@protoc_insertion_point(field_mutable:ILLIXRIPC.Mesh.normals)
  return normals_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ILLIXRIPC::Vector3 >*
Mesh::mutable_normals() {
  // @@protoc_insertion_point(field_mutable_list:ILLIXRIPC.Mesh.normals)
  return &normals_;
}
inline const ::ILLIXRIPC::Vector3& Mesh::normals(int index) const {
  // @@protoc_insertion_point(field_get:ILLIXRIPC.Mesh.normals)
  return normals_.Get(index);
}
inline ::ILLIXRIPC::Vector3* Mesh::add_normals() {
  // @@protoc_insertion_point(field_add:ILLIXRIPC.Mesh.normals)
  return normals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ILLIXRIPC::Vector3 >&
Mesh::normals() const {
  // @@protoc_insertion_point(field_list:ILLIXRIPC.Mesh.normals)
  return normals_;
}

// repeated .ILLIXRIPC.Color vertexColors = 4;
inline int Mesh::vertexcolors_size() const {
  return vertexcolors_.size();
}
inline void Mesh::clear_vertexcolors() {
  vertexcolors_.Clear();
}
inline ::ILLIXRIPC::Color* Mesh::mutable_vertexcolors(int index) {
  // @@protoc_insertion_point(field_mutable:ILLIXRIPC.Mesh.vertexColors)
  return vertexcolors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ILLIXRIPC::Color >*
Mesh::mutable_vertexcolors() {
  // @@protoc_insertion_point(field_mutable_list:ILLIXRIPC.Mesh.vertexColors)
  return &vertexcolors_;
}
inline const ::ILLIXRIPC::Color& Mesh::vertexcolors(int index) const {
  // @@protoc_insertion_point(field_get:ILLIXRIPC.Mesh.vertexColors)
  return vertexcolors_.Get(index);
}
inline ::ILLIXRIPC::Color* Mesh::add_vertexcolors() {
  // @@protoc_insertion_point(field_add:ILLIXRIPC.Mesh.vertexColors)
  return vertexcolors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ILLIXRIPC::Color >&
Mesh::vertexcolors() const {
  // @@protoc_insertion_point(field_list:ILLIXRIPC.Mesh.vertexColors)
  return vertexcolors_;
}

// -------------------------------------------------------------------

// IPCPayload

// string name = 1;
inline void IPCPayload::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPCPayload::name() const {
  // @@protoc_insertion_point(field_get:ILLIXRIPC.IPCPayload.name)
  return name_.GetNoArena();
}
inline void IPCPayload::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ILLIXRIPC.IPCPayload.name)
}
#if LANG_CXX11
inline void IPCPayload::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ILLIXRIPC.IPCPayload.name)
}
#endif
inline void IPCPayload::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ILLIXRIPC.IPCPayload.name)
}
inline void IPCPayload::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ILLIXRIPC.IPCPayload.name)
}
inline ::std::string* IPCPayload::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ILLIXRIPC.IPCPayload.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPCPayload::release_name() {
  // @@protoc_insertion_point(field_release:ILLIXRIPC.IPCPayload.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPCPayload::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ILLIXRIPC.IPCPayload.name)
}

// repeated .ILLIXRIPC.Mesh meshes = 2;
inline int IPCPayload::meshes_size() const {
  return meshes_.size();
}
inline void IPCPayload::clear_meshes() {
  meshes_.Clear();
}
inline ::ILLIXRIPC::Mesh* IPCPayload::mutable_meshes(int index) {
  // @@protoc_insertion_point(field_mutable:ILLIXRIPC.IPCPayload.meshes)
  return meshes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ILLIXRIPC::Mesh >*
IPCPayload::mutable_meshes() {
  // @@protoc_insertion_point(field_mutable_list:ILLIXRIPC.IPCPayload.meshes)
  return &meshes_;
}
inline const ::ILLIXRIPC::Mesh& IPCPayload::meshes(int index) const {
  // @@protoc_insertion_point(field_get:ILLIXRIPC.IPCPayload.meshes)
  return meshes_.Get(index);
}
inline ::ILLIXRIPC::Mesh* IPCPayload::add_meshes() {
  // @@protoc_insertion_point(field_add:ILLIXRIPC.IPCPayload.meshes)
  return meshes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ILLIXRIPC::Mesh >&
IPCPayload::meshes() const {
  // @@protoc_insertion_point(field_list:ILLIXRIPC.IPCPayload.meshes)
  return meshes_;
}

// bytes dracomesh = 3;
inline void IPCPayload::clear_dracomesh() {
  dracomesh_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPCPayload::dracomesh() const {
  // @@protoc_insertion_point(field_get:ILLIXRIPC.IPCPayload.dracomesh)
  return dracomesh_.GetNoArena();
}
inline void IPCPayload::set_dracomesh(const ::std::string& value) {
  
  dracomesh_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ILLIXRIPC.IPCPayload.dracomesh)
}
#if LANG_CXX11
inline void IPCPayload::set_dracomesh(::std::string&& value) {
  
  dracomesh_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ILLIXRIPC.IPCPayload.dracomesh)
}
#endif
inline void IPCPayload::set_dracomesh(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dracomesh_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ILLIXRIPC.IPCPayload.dracomesh)
}
inline void IPCPayload::set_dracomesh(const void* value, size_t size) {
  
  dracomesh_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ILLIXRIPC.IPCPayload.dracomesh)
}
inline ::std::string* IPCPayload::mutable_dracomesh() {
  
  // @@protoc_insertion_point(field_mutable:ILLIXRIPC.IPCPayload.dracomesh)
  return dracomesh_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPCPayload::release_dracomesh() {
  // @@protoc_insertion_point(field_release:ILLIXRIPC.IPCPayload.dracomesh)
  
  return dracomesh_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPCPayload::set_allocated_dracomesh(::std::string* dracomesh) {
  if (dracomesh != NULL) {
    
  } else {
    
  }
  dracomesh_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dracomesh);
  // @@protoc_insertion_point(field_set_allocated:ILLIXRIPC.IPCPayload.dracomesh)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ILLIXRIPC

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_illixr_5fipc_2eproto
